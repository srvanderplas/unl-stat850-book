---
title: "Stat 850: Computing Tools for Statisticians"
author: ""
date: "Fall 2022"

format: 
  pdf:
    keep-tex: true
    # include-in-header: "in-header.tex"
    include-in-header: 
      text: |
        \makeatletter
        \def\@maketitle{%
          \begin{center}%
          \let \footnote \thanks
            {\LARGE \@title \par}%
            {\large \@author \par}%
            {\large \@date}
          \end{center}%
          \par
          \vskip 1em}
        \makeatother
        \RedeclareSectionCommand[beforeskip=1ex plus -.2ex minus -.2ex,afterskip=.25ex plus -.1ex minus -.1ex]{section}
        \RedeclareSectionCommand[beforeskip=1ex plus -.2ex minus -.2ex,afterskip=.25ex plus -.1ex minus -.1ex]{subsection}
        \RedeclareSectionCommand[beforeskip=1ex plus -.2ex minus -.2ex,afterskip=.25ex plus -.1ex minus -.1ex]{subsubsection}
        \raggedbottom
        \usepackage{enumitem}
        \setlist{nolistsep}
    latex-engine: xelatex
dev: png
geometry: margin=1in

fontfamily: mathpazo
fontsize: 11pt
---

Instructor | Class
--------- | -----------
Susan Vanderplas | Location: Keim 214
Email: [susan.vanderplas@unl.edu](mailto:susan.vanderplas@unl.edu?subject=Stat%20850) | Time: Tuesday/Thursday 12:30-1:45
Office: Hardin 343D | Office Hours (online): [Schedule here](https://calendly.com/drvanderplas/officehours) 


```{r setup, include=FALSE}
# knitr::opts_chunk$set(cache=FALSE, dev='pdf')
knitr::opts_chunk$set(cache=F,
                      fig.path = 'figs/',
                      cache.path='cache/',
                      warning=F,
                      message=F)

knitr::opts_chunk$set(
                  fig.process = function(x) {
                      x2 = sub('-\\d+([.][a-z]+)$', '\\1', x)
                      if (file.rename(x, x2)) x2 else x
                      }
                  )

library(tidyverse)
library(lubridate)

# Create a calendar for your syllabus ----
# Source: http://svmiller.com/blog/2020/08/a-ggplot-calendar-for-your-semester/

# 1) what is the first Monday of the semester?
# Any number of ways to identify dates in R, but we'll use {lubridate} and the ymd() function here.
# Format: YYYYMMDD. In this example, 4 January 2022.

# What are the full dates of the semester? Here, I'll exclude exam week as I like to do.
# In this case: 6 January to 23 April
semester_dates <- seq(ymd(20220822), ymd(20221210), by=1)

# Weekday(s) of class
class_wdays <- c("Tue", "Thu")

not_here_dates <- c(
  # Labor Day
  ymd("20220905"),
  # Spring Break
  # Fall Break
  seq(ymd(20221017), ymd(20221018), by = 1),
  # Thanksgiving
  seq(ymd(20221123), ymd(20221125), by = 1))

# exam_dates <- c(ymd(20220309), ymd(20220512))
project_dates <- c(ymd(20221104), ymd(20221205), ymd(20221209))
finals_week <- seq(ymd(20221212), ymd(20221216), by = 1)

# Custom function for treating the first day of the month as the first week 
# of the month up until the first Sunday 
# (unless Sunday was the start of the month)
wom <- function(date) {
    first <- wday(as.Date(paste(year(date), month(date), 1, sep = "-")))
    return((mday(date) + (first - 2)) %/% 7 + 1)
  }

# Create a data frame of dates, assign to Cal
Cal <- tibble(date = seq(ymd(20220801), ymd(20221231), by=1))  %>%
  mutate(mon = lubridate::month(date, label=T, abbr=F),
         wkdy = weekdays(date, abbreviate=T),
         wkdy = fct_relevel(wkdy, "Sun", "Mon", "Tue", "Wed", "Thu","Fri","Sat"), # make sure Sunday comes first
         semester = date %in% semester_dates, 
         project = date %in% project_dates,
         # exams = date %in% exam_dates, # is it an exam?
         not_here = date %in% not_here_dates, # is it a day off?
         exam_wk = date %in% finals_week,
         day = lubridate::mday(date), 
         week = wom(date))

Cal <- Cal %>%
  mutate(category = case_when(
    project ~ "Project",
    not_here ~ "UNL holiday",
    semester & wkdy %in% class_wdays & !not_here & !exam_wk ~ "Class Day",
    semester ~ "Semester",
    TRUE ~ "NA"
  ))


class_cal <- Cal %>% 
  ggplot(.,aes(wkdy, week)) +
  theme_bw() +
  theme(panel.grid.major.x = element_blank(),
        legend.position = c(1, 0), legend.justification = c(1,0),
        legend.direction = "vertical", legend.title = element_blank(),
        axis.title.y = element_blank(), axis.title.x = element_blank(),
        axis.ticks.y = element_blank(), axis.text.y = element_blank()) +
  geom_tile(alpha=0.8, aes(fill=category), color="black", size=.45) +
  facet_wrap(~mon, scales = "free", ncol=3) +
  geom_text(aes(label = day, color = semester & (!not_here))) +
  # put your y-axis down, flip it, and reverse it
  scale_y_reverse(breaks=NULL) +
  # manually fill scale colors to something you like...
  scale_color_manual(values = c("FALSE" = "grey80", "TRUE" = "black"), guide = "none") + 
  scale_fill_manual(values=c("Class Day"="purple", 
                             "Semester"="white",
                             "UNL holiday" = "grey10",
                             "NA" = "white", # I like these whited out...
                             "Project"="orange"),
                    #... but also suppress a label for a non-class semester day
                    breaks=c("Semester", "UNL holiday", "Class Day","Project"))
# class_cal

# exam_days <- filter(Cal, category == "Exam") %>% 
#   mutate(topic = c("Midterm", "Final"),
#          time = c("In Class", "1-3 pm"))
project_days <- filter(Cal, category == "Project") %>%
  mutate(topic = c("Project Proposal Due", "Project Presentation Due", "Project Report Due"),
         time = c("8pm", "8pm", "8pm")) %>%
  mutate(Date = format(date, "%b %e"),
         sem_week = week(date))

class_days <- filter(Cal, category == "Class Day") %>%
  mutate(sem_week = week(date)) %>%
  group_by(sem_week) %>%
  summarize(Date = paste(format(date, "%b %e"), sep = ",", collapse = ", ")) %>%
  mutate(topic = c(
    "Exploring the Toolbox", 
    "Introduction to Programming, Basic Variable Types", 
    "Data and Control Structures", 
    "Programming with Data", 
    "Reading and Exploring Data", 
    "Data Cleaning and Manipulation", 
    "Data Transformations", 
    "Graphics", 
    "Debugging", 
    "Reproducibility and Professional Communication", 
    "Simulation", 
    "Interactive Graphics", 
    "TBD", 
    "Project Work Day",
    "TBD", 
    "Finals")) %>%
  bind_rows(project_days) %>%
  arrange(sem_week) %>%
  select(Date, Topic = topic)

```

# Course Description

Introductions to statistical computing packages and document preparation software. Topics include: graphical techniques, data management, Monte Carlo simulation, dynamic document preparation, presentation software.

# Course Goals
1. Learn how to use R and/or Python for data analysis, data processing, and data visualization.
2. Become familiar with the process, techniques, and goals of exploratory data analysis.
3. Create, assess, and debug code effectively.
    i. Use online resources to find software to perform a task, comparing approaches taken by competing programs.
    ii. Read error messages, find related problems in online forums, and isolate the conditions necessary to generate the error.
    iii. Generate minimum working examples or reproducible examples of errors in order to ask for help effectively.
4. Communicate statistical results using reproducible, dynamic tools. Understand the importance of reproducibility in scientific computation.

# Course Objectives
(what you should be able to do at the end of this course)

A.  Clean and format the data appropriately for the intended analysis or visualization method. (Goals: 1)

B.  Explore a data set using numerical and visual summaries, developing questions which can be answered using statistics. (Goals: 1, 2)

C.  Evaluate methods or software to assess relevance to a problem. Compare similar options to determine which are more appropriate for a given application (Goals: 1, 3)

D.  Test and debug software, using the following sequence: (Goals: 3, 4)
    1. Reproduce the error in a new environment,
    2. Create a minimal reproducible example,
    3. Research the error message and evaluate online resources for relevance,
    4. Ask for help, describing the error or problem appropriately.

E.  Document the data, methods, and results of an analysis using reproducible methods. (Goals: 1, 2, 4)


# Textbook

In keeping with the principles of this course, any course materials I develop will be made available on GitHub, in the (continuously evolving) [course textbook](https://srvanderplas.github.io/unl-stat850/). The book is laid out with the same structure as the course. In order to avoid duplicating content available elsewhere, where it is appropriate, I will link to relevant material available on other sites. This makes the course easier to maintain, but it also ensures you get the most relevant and up to date instructions.

In addition, you may find it useful to reference some of the following resources that I have consulted while assembling the textbook. Most are available online for free, though some require an institutional email address.

- [R for Data Science](https://r4ds.had.co.nz/)


- [Python for Data Analysis](https://www.oreilly.com/library/view/python-for-data/9781449323592/) * 

- [Python Data Science Handbook](https://learning.oreilly.com/library/view/python-data-science/9781491912126/) *

- [Advanced R](http://adv-r.had.co.nz/)

- [Python for Everybody](https://www.py4e.com/html3/)

\* Available online for free if you register with your UNL email address.

# Class Schedule & Topic Outline

This schedule is tentative and subject to change. Students are expected to read the corresponding textbook chapter (linked in Canvas) prior to coming to class. 
```{r calendar}
#| echo: false
#| eval: true
#| warning: false
#| fig-width: 8
#| fig-height: 4.5
class_cal
```

```{r schedule}
#| echo: false
#| eval: true
#| fig-pos: 'h'
class_days %>% 
kableExtra::kable(caption = "Tentative schedule of class topics and important due dates", format = "simple")
```

# Course Policies

## Assessment/Grading

Assignments | Weight
----- | -----
Weekly Homework | 50% 
Perusall Assignments/Participation | 10%
Textbook Quizzes | 10%
Project | 30%

Lower bounds for grade cutoffs are shown in the following table. I will not "round up" grades at the end of the semester beyond strict mathematical rules of rounding.

Letter grade |	X + |  	X |	X - 
-------- | ----- | ----- | -----
A |	97 |	94 | 	90
B |	87 |	84 |	80
C |	77 |	74 |	70
D |	67 |	64 |	61
F |	<61 | |

Interpretation of this table: 

- A grade of 85 will receive a B. 
- A grade of 77 will receive a C+. 
- A grade of 70 will receive a C-. 
- Anything below a 61 will receive an F. 

### Homework

Approximately 8-12 homework assignments will be made over the course of the semester. You will have one week to work on each of the assignments. The only way to learn statistics is to practice working problems, and homework is therefore an essential part of the course. Homework must be submitted in the file format specified (usually quarto documents in a github repository), and should run or compile as submitted.

### Perusall Assignments

Approximately weekly reading will be assigned using Perusall, which allows you to annotate the reading with questions and comments and to see your classmates comments. These reading assignments are intended to expose you to a wide array of topics about programming, statistics, data science, ethics, and reproducibility. 

Note: Perusall is something I haven't tried before; I've added it to replace online discussions about the same reading materials. I'm hopefull that it will be less awkward than discussion boards, but we will re-evaluate the use of Perusall during the semester to ensure that it works for a majority of the class.

Perusall Assignments will be due weekly on Fridays at 8pm unless otherwise announced.

### Textbook Quizzes

This class uses a flipped classroom model, which assumes that you read the material and/or watch the videos before class so that you are prepared to apply the material during in-class activities. 

To ensure that you are doing the reading and thus are prepared for class, there are low-stakes quizzes to accompany most textbook chapters; these quizzes will highlight some important items to remember from each chapter.

These quizzes will be due at 12pm on class days (if there are 2 textbook chapters assigned for the week, one quiz will be due on Tuesday and one will be due on Thursday). 

### General Evaluation Criteria

In every assignment, discussion, and written component of this class, you are expected to demonstrate that you are intellectually engaging with the material. I will evaluate you based on this engagement, which means that technically correct but low effort answers which do not demonstrate engagement or understanding will receive no credit.

When you answer questions in this class, your goal is to show that you either understand the material or are actively engaging with it. If you did not achieve this goal, then your answer is incomplete, regardless of whether or not it is technically correct. This is not to encourage you to add unnecessary complexity to your answer - simple, elegant solutions are always preferable to unwieldly, complex solutions that accomplish the same task.

While this is not an English class, grammar and spelling are important, as is your ability to communicate technical information in writing; both of these criteria will be used in addition to assignment-specific rubrics to evaluate your work.

### Late Policy

Late assignments will be accepted only under extenuating circumstances, and only if you have contacted me **prior** to the assignment due date and received permission to hand the assignment in late. I reserve the right not to grade any assignments received after the assignment due date.

## Attendance

You are expected to attend class and/or participate virtually. Consistent, repeated failure to attend class or actively participate in the online portions of the course will affect the participation portion of your grade.

If you are feeling ill, please **do not come to class**. Instead, review the material and work on the homework assignment, and then schedule an appointment with me to meet virtually.


## Expectations

You can expect me to:

- reply to emails within 48 hours during the week (72 hours on weekends)
- be available in class to assist with assignments
- be available by appointment for additional help or discussion

I expect you to:

- Read the module material and watch any videos before coming to class
- Engage with the material and your classmates during class
- Seek help when you do not understand the material
- Communicate promptly if you anticipate that you will have trouble meeting deadlines or participating in a portion of the course.
- Do your own troubleshooting before contacting me for help (and mention things you've already tried when you do ask for help!)
- Be respectful and considerate of everyone in the class


### Make Mistakes!

Programming is the process of making a series of silly or stupid mistakes, and then slowly fixing each mistake (while adding a few more). The only way to know how to fix these mistakes (and avoid them in the future) is to make them. (Sometimes, you have to make the same mistake a few dozen times before you can avoid it in the future). At some point during the class, you will find that you've spent 30 minutes staring at an error caused by a typo, a space, a parenthesis in the wrong place. You may ask for help debugging this weird error, only to have someone immediately point out the problem... it is always easier to see these things in someone else's code. This is part of programming, it is normal, and you shouldn't feel embarrassed or sorry (unless you put no effort into troubleshooting the problem before you asked for help)

If you manage to produce an error I haven't seen before, then congratulations. You have achieved something special, and that achievement should be celebrated. Each new and bizarre error is an opportunity to learn a bit more about the programming language, the operating system, or the interaction between the two.

## Face Coverings

I have medical issues and will wear a face covering during our class meetings; I ask that you also wear a face covering during class to reduce the impact of COVID 19, flu, and other circulating illnesses on class attendance. 

## Inclement Weather

If in-person classes are canceled, you will be notified of the instructional continuity plan for this class by Canvas Announcement. In most circumstances where there is power in the Lincoln area, we will continue to hold class via Zoom. 

## Academic Integrity and Class Conduct

You will be engaging with your classmates and me through in-person discussions, zoom meetings, and collaborative activities. It is expected that everyone will engage in these interactions civilly and in good faith. Discussion and disagreement are important parts of the learning process, but it is important that mutual respect prevail. Individuals who detract from an atmosphere of civility and respect will be removed from the conversation.

Students are expected to adhere to guidelines concerning academic dishonesty outlined in [Article III B.1 of the University's Student Code of Conduct](http://stuafs.unl.edu/dos/code). The Statistics Department [academic integrity and grade appeal policy is available here](https://statistics.unl.edu/grade-appeals-and-academic-integrity-policy).

You must be able to explain how the logic works for any code you turn in. This means that code you obtained from e.g. StackOverflow is fine to use if you can explain it and modify it for the purposes of this class, but if you cannot explain your code you will not get credit for the assignment. This is in line with what is generally considered acceptable behavior in programming - reuse is fine (subject to the code's license) but you must be able to fully explain and modify any code you did not write yourself. 

# Required University Information

See \url{https://executivevc.unl.edu/academic-excellence/teaching-resources/course-policies}.

