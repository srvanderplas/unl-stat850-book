# Data Transformations {#sec-data-transformations}

## Module Objectives {#module6-objectives .unnumbered}

Broadly, your objective while reading this chapter is to be able to identify datasets which have "messy" formats and determine a sequence of operations to transition the data into "tidy" format. To do this, you should be master the following concepts:

-   Determine what data format is necessary to generate a desired plot or statistical model
-   Join and split data columns using string operations
-   Understand the differences between "wide" and "long" format data and how to transition between the two structures
-   Understand relational data formats and how to use data joins to assemble data from multiple tables into a single table.

## Tidy and Messy Data

### Motivating Example

Consider the spreadsheet screenshot in @fig-human-readable.

![Spreadsheet intended for human consumption, from @mccallumBadDataHandbook2013 (Chapter 3)](images/data-transformations/Data-human-consumption.png){#fig-human-readable}

This spreadsheet shows New Zealand High School certificate achievement levels for a boys-only school. Typically, students would get level 1 in year 11, level 2 in year 12, and level 3 in year 13, but it is possible for students to gain multiple levels in a single year. This data is organized to show the number of students gaining each type of certification (broken out by gender) across each of the 3 years. There are many blank cells that provide ample space to see the data, and all of the necessary variables are represented: there are essentially three 2x3 tables showing the number of students attaining each NCEA level in each year of school. If all of the information is present in this table, is there really a problem? Perhaps not if the goal is just to display the data, but analyzing this data effectively, or plotting it in a way that is useful, requires some restructuring. @fig-machine-readable shows a restructured version of this data in a more compact rectangular format.

![Spreadsheet reorganized for data analysis](images/data-transformations/Data-machine-consumption.png){#fig-machine-readable}

In @fig-machine-readable, each column contains one variable: Year, gender, level, and total number of students. Each row contains one observation. We still have 18 data points, but this format is optimized for statistical analysis, rather than to display for (human) visual consumption. We will refer to this restructured data as "tidy" data: it has a single column for each variable and a single row for each observation.

### Defining Tidy data

The illustrations below are lifted from an [excellent blog post](https://www.openscapes.org/blog/2020/10/12/tidy-data/) [@lowndesTidyDataEfficiency2020] about tidy data; they're reproduced here because

1.  they're beautiful and licensed as CCA-4.0-by, and
2.  they might be more memorable than the equivalent paragraphs of text without illustration.

Most of the time, data does not come in a format suitable for analysis. Spreadsheets are generally optimized for data entry or viewing, rather than for statistical analysis:

-   Tables may be laid out for easy data entry, so that there are multiple observations in a single row
-   It may be visually preferable to arrange columns of data to show multiple times or categories on the same row for easy comparison

When we analyze data, however, we care much more about the fundamental structure of observations: discrete units of data collection. Each observation may have several corresponding variables that may be measured simultaneously, but fundamentally each discrete data point is what we are interested in analyzing.

The structure of **tidy data** reflects this preference for keeping the data in a fundamental form: each observation is in its own row, any observed variables are in single columns. This format is inherently rectangular, which is also important for statistical analysis - our methods are typically designed to work with matrices of data.

![Tidy data format, illustrated.](https://www.openscapes.org/img/blog/tidydata/tidydata_1.jpg){#fig-tidy-data-definition}

![An illustration of the principle that every messy dataset is messy in its own way.](https://www.openscapes.org/img/blog/tidydata/tidydata_2.jpg)

The preference for tidy data has several practical implications: it is easier to reuse code on tidy data, allowing for analysis using a standardized set of tools (rather than having to build a custom tool for each data analysis job).

![Tidy data is easier to manage because the same tools and approaches apply to multiple datasets.](https://www.openscapes.org/img/blog/tidydata/tidydata_3.jpg)

In addition, standardized tools for data analysis means that it is easier to collaborate with others: if everyone starts with the same set of assumptions about the dataset, you can borrow methods and tools from a collaborator's analysis and easily apply them to your own dataset.

::: {#fig-tidy-data-advantages layout-ncol="2"}
![Collaboration with tidy data.](https://www.openscapes.org/img/blog/tidydata/tidydata_4.jpg){fig-alt="Two tidyverse monsters collaborating on a tidy dataset using similarly-shaped tools."}

![Tidy data enables standardized workflows.](https://www.openscapes.org/img/blog/tidydata/tidydata_5.jpg){fig-alt="A tidy data analysis conveyor belt, with new data loaded onto the conveyor that is sequentially wrangled, visualized, modeled, and leaves the conveyor belt as a complete analysis."}

Tidy data makes it easier to collaborate with others and analyze new data using standardized workflows.
:::

::: callout-warning
### Examples: Messy Data {.unnumbered}

```{r tidypkgs, message = F, include = F}
library(dplyr) # Data wrangling
library(tidyr) # Data rearranging
library(tibble) # data table
```

These datasets all display the same data: TB cases documented by the WHO in Afghanistan, Brazil, and China, between 1999 and 2000. There are 4 variables: country, year, cases, and population, but each table has a different layout.

::: panel-tabset
#### Table 1 {.unnumbered}

```{r tidy1, echo = F}
knitr::kable(table1, caption = "Table 1")
```

Here, each observation is a single row, each variable is a column, and everything is nicely arranged for e.g. regression or statistical analysis. We can easily compute another measure, such as cases per 100,000 population, by taking cases/population \* 100000 (this would define a new column).

#### 2 {.unnumbered}

```{r tidy2, echo = F}
knitr::kable(table2, caption = "Table 2")
```

Here, we have 4 columns again, but we now have 12 rows: one of the columns is an indicator of which of two numerical observations is recorded in that row; a second column stores the value. This form of the data is more easily plotted in e.g. ggplot2, if we want to show lines for both cases and population, but computing per capita cases would be much more difficult in this form than in the arrangement in table 1.

#### 3 {.unnumbered}

```{r tidy3, echo = F}
knitr::kable(table3, caption = "Table 3")
```

This form has only 3 columns, because the rate variable (which is a character) stores both the case count and the population. We can't do *anything* with this format as it stands, because we can't do math on data stored as characters. However, this form might be easier to read and record for a human being.

#### 4 {.unnumbered}

```{r tidy4, echo = F}
knitr::kable(table4a, caption = "Table 4a")
knitr::kable(table4b, caption = "Table 4b")
```

In this form, we have two tables - one for population, and one for cases. Each year's observations are in a separate column. This format is often found in separate sheets of an excel workbook. To work with this data, we'll need to transform each table so that there is a column indicating which year an observation is from, and then merge the two tables together by country and year.

#### 5 {.unnumbered}

```{r tidy5, echo = F}
knitr::kable(table5, caption = "Table 5")
```

Table 5 is very similar to table 3, but the year has been separated into two columns - century, and year. This is more common with year, month, and day in separate columns (or date and time in separate columns), often to deal with the fact that spreadsheets don't always handle dates the way you'd hope they would.
:::
:::

::: callout-tip
### Try it out: Classifying Messy Data

::: panel-tabset
#### Problem

For each of the datasets in the previous example, determine whether each table is tidy. If it is not, identify which rule or rules it violates.

What would you have to do in order to compute a standardized TB infection rate per 100,000 people?

#### Table 1 {.unnumbered}

```{r tidy1-2, echo = F}
knitr::kable(table1, caption = "Table 1")
```

This is tidy data. Computing a standardized infection rate is as simple as creating the variable rate = cases/population\*100,000.

#### 2 {.unnumbered}

```{r tidy2-2, echo = F}
knitr::kable(table2, caption = "Table 2")
```

Each variable does not have its own column (so a single year's observation of one country actually has 2 rows). Computing a standardized infection rate requires moving cases and population so that each variable has its own column, and then you can proceed using the process in 1.

#### 3 {.unnumbered}

```{r tidy3-2, echo = F}
knitr::kable(table3, caption = "Table 3")
```

Each value does not have its own cell (and each variable does not have its own column). In Table 3, you'd have to separate the numerator and denominator of each cell, convert each to a numeric variable, and then you could proceed as in 1.

#### 4 {.unnumbered}

```{r tidy4-2, echo = F}
knitr::kable(table4a, caption = "Table 4a")
knitr::kable(table4b, caption = "Table 4b")
```

There are multiple observations in each row because there is not a column for year. To compute the rate, you'd need to "stack" the two columns in each table into a single column, add a year column that is 1999, 1999, 1999, 2000, 2000, 2000, and then merge the two tables. Then you could proceed as in 1.

#### 5 {.unnumbered}

```{r tidy5-2, echo = F}
knitr::kable(table5, caption = "Table 5")
```

Each variable does not have its own column (there are two columns for year, in addition to the issues noted in table3). Computing the rate would be similar to table 3; the year issues aren't actually a huge deal unless you plot them, at which point 99 will seem to be bigger than 00 (so you'd need to combine the two year columns together first).
:::
:::

It is actually impossible to have a table that violates only one of the rules of tidy data - you have to violate at least two. So a simpler way to state the rules might be:

1.  Each dataset goes into its own table (or tibble, if you are using R)
2.  Each variable gets its own column

::: callout-note
## Additional reading

@internationalbusinessmachinesRisksUsingSpreadsheets2018 - IBM SPSS ad that talks about the perils of spreadsheets

@obeirneHorrorStories2020 - assembled news stories involving spreadsheet mishaps
:::

By the end of this chapter, you will have the skills needed to wrangle the most common "messy" data sets into "tidy" form.

## String operations

Nearly always, when multiple variables are stored in a single column, they are stored as character variables. There are many different "levels" of working with strings in programming, from simple find-and-replaced of fixed (constant) strings to regular expressions, which are extremely powerful (and extremely complicated).

> Some people, when confronted with a problem, think "I know, I'll use regular expressions." Now they have two problems. - Jamie Zawinski

![Alternately, the xkcd version of the above quote](https://imgs.xkcd.com/comics/perl_problems.png)

The [stringr cheatsheet](https://github.com/rstudio/cheatsheets/blob/main/strings.pdf) by RStudio may be helpful as you complete tasks related to this section - it may even be useful in Python as the 2nd page has a nice summary of regular expressions.


+------------------------------------------------------------+------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------+
| Task                                                       | R                                                                                              | Python                                                                                     |
+============================================================+================================================================================================+============================================================================================+
| Replace `pattern` with `replacement`                       | base: `gsub(pattern, replacement, x)`                                                          | pandas: `x.str.replace(pattern, replacement)` (not vectorized over pattern or replacement) |
|                                                            |                                                                                                |                                                                                            |
|                                                            | stringr: `str_replace(x, pattern, replacement)` and `str_replace_all(x, pattern, replacement)` |                                                                                            |
+------------------------------------------------------------+------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------+
| Convert case                                               | base: `tolower(x)`, `toupper(x)`                                                               | pandas: `x.str.lower()`, `x.str.upper()`                                                   |
|                                                            |                                                                                                |                                                                                            |
|                                                            | stringr: `str_to_lower(x)`, `str_to_upper(x)` , `str_to_title(x)`                              |                                                                                            |
+------------------------------------------------------------+------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------+
| Strip whitespace from start/end                            | base: `trimws(x)`                                                                              | pandas: `x.str.strip()`                                                                    |
|                                                            |                                                                                                |                                                                                            |
|                                                            | stringr: `str_trim(x)` , `str_squish(x)`                                                       |                                                                                            |
+------------------------------------------------------------+------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------+
| Pad strings to a specific length                           | base: `sprintf(format, x)`                                                                     | pandas: `x.str.pad()`                                                                      |
|                                                            |                                                                                                |                                                                                            |
|                                                            | stringr: `str_pad(x, …)`                                                                       |                                                                                            |
+------------------------------------------------------------+------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------+
| Test if the string contains a pattern                      | base: `grep(pattern, x)` or `grepl(pattern, x)`                                                | pandas: `x.str.contains(pattern)`                                                          |
|                                                            |                                                                                                |                                                                                            |
|                                                            | stringr: `str_detect(x, pattern)`                                                              |                                                                                            |
+------------------------------------------------------------+------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------+
| Count how many times a pattern appears in the string       | base: `gregexpr(pattern, x)` + `sapply` to count length of the returned list                   | pandas: `x.str.count(pattern)`                                                             |
|                                                            |                                                                                                |                                                                                            |
|                                                            | stringi: `stri_count(x, pattern)`                                                              |                                                                                            |
|                                                            |                                                                                                |                                                                                            |
|                                                            | stringr: `str_count(x, pattern)`                                                               |                                                                                            |
+------------------------------------------------------------+------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------+
| Find the first appearance of the pattern within the string | base: `regexpr(pattern, x)`                                                                    | pandas: `x.str.find(pattern)`                                                              |
|                                                            |                                                                                                |                                                                                            |
|                                                            | stringr: `str_locate(x, pattern)`                                                              |                                                                                            |
+------------------------------------------------------------+------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------+
| Find all appearances of the pattern within the string      | base: `gregexpr`                                                                               | pandas: `x.str.findall(pattern)`                                                           |
|                                                            |                                                                                                |                                                                                            |
|                                                            | stringr: `str_locate_all(x, pattern)`                                                          |                                                                                            |
+------------------------------------------------------------+------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------+
| Detect a match at the start/end of the string              | base: use regular expr.                                                                        | pandas: `x.str.startswith(pattern)` , `x.str.endswith(pattern)`                            |
|                                                            |                                                                                                |                                                                                            |
|                                                            | stringr: `str_starts(x, pattern)` ,`str_ends(x, pattern)`                                      |                                                                                            |
+------------------------------------------------------------+------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------+
| Subset a string from index a to b                          | base: `substr(x, a, b)`                                                                        | pandas: `x.str.slice(a, b, step)`                                                          |
|                                                            |                                                                                                |                                                                                            |
|                                                            | stringr: `str_sub(x, a, b)`                                                                    |                                                                                            |
+------------------------------------------------------------+------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------+
| Convert string encoding                                    | base: `iconv(x, encoding)`                                                                     | pandas: `x.str.encode(encoding)`                                                           |
|                                                            |                                                                                                |                                                                                            |
|                                                            | stringr: `str_conv(x, encoding)`                                                               |                                                                                            |
+------------------------------------------------------------+------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------+

: Table of string functions in R and python. `x` is the string or vector of strings, `pattern` is a pattern to be found within the string, `a` and `b` are indexes, and `encoding` is a string encoding, such as UTF8 or ASCII. {#tbl-string-function}

In @tbl-string-function, multiple functions are provided for e.g. common packages and situations. Pandas methods are specifically those which work in some sort of vectorized manner. Base methods (in R) do not require additional packages, where stringr methods require the `stringr` package, which is included in the tidyverse^[Many functions from `stringr` have somewhat faster functional equivalents in the `stringi` package, but the `stringi` package has a less "tidy" API, so it may be worth the slight slowdown to use `stringr` if your data isn't huge because your code will be more readable.].

### Converting strings to numbers {.unnumbered}

One of the most common tasks when reading in and tidying messy data is that numeric-ish data can come in many forms that are read (by default) as strings. The data frame below provides an example of a few types of data which may be read in in unexpected ways. How do we tell R or Python that we want all of these columns to be treated as numbers?

```{python, echo = F}
#| label: tbl-parse-numbers
#| tbl-cap: Different "messy" number formats
#| output: asis

import pandas as pd
import numpy as np
from IPython.display import Markdown
from tabulate import tabulate

df = pd.DataFrame({
    'int_col': [1,2,3,4],
    'float_col': [1.1,1.2,1.3,4.7],
    'mix_col': ['a', 2, 3, 4],
    'missing_col': [1.0, 2, 3, np.nan],
    'money_col': ['£1,000.00','£2,400.00','£2,400.00','£2,400.00'],
    'eu_numbers': ['1.000.000,00', '2.000.342,00', '3.141,59', '34,25'],
    'boolean_col': [True, False, True, True],
    'custom': ['Y', 'Y', 'N', 'N']
  })

print(tabulate(df, headers = list(df.columns)))
df.to_csv("data/number-formats.csv", index = False, quoting = 1)
```

```{r, echo = F, include = F}
library(reticulate)
df <- py$df
```

Note that [numbers](https://docs.oracle.com/cd/E19455-01/806-0169/overview-8/index.html), currencies, dates, and times are written differently based on what country you're in [@ashourConciseGuideNumber2022]. In computer terms, this is the "locale", and it affects everything from how your computer formats the date/time to what character set it will try to use to display things [@LocaleComputerSoftware2022]. 
[If you've never had to deal with the complexities of working on a laptop designed for one country using another country's conventions, know that it isn't necessarily the easiest thing to do.]{.aside}

::: {.callout-note collapse="true"}
##### Optional: Locales {.unnumbered}

###### Find your locale {.unnumbered}

-   <i class="fa-brands fa-windows"></i> Type [`Get-WinSystemLocale`](https://docs.microsoft.com/en-us/powershell/module/international/get-winsystemlocale?view=windowsserver2022-ps#syntax) into your CMD or powershell terminal.
-   <i class="fa-brands fa-apple"></i> (10.4 and later) and <i class="fa-brands fa-linux"></i> Type `locale` into your terminal

###### Get set up to work with locales {.unnumbered}

While this isn't required, it may be useful and is definitely good practice if you're planning to work with data generated internationally.

[This article](https://herrmann.tech/en/blog/2021/02/05/how-to-deal-with-international-data-formats-in-python.html) tells you how to set things up in linux <i class="fa-brands fa-linux"></i>. The biggest difference in other OS is going to be how to install new locales, so here are some instructions on that for other OS.

-   <i class="fa-brands fa-windows"></i> [Installing languages](https://support.microsoft.com/en-us/windows/install-a-language-for-windows-ccd853d3-9ecd-7da7-9ef0-72b4a055410a)
-   <i class="fa-brands fa-apple"></i> [Change locales](https://9to5mac.com/2018/08/09/mac-how-to-change-language-and-region/). Installing or creating new locales seems to be [more complicated](https://stackoverflow.com/questions/9991603/add-a-locale-in-mac-osx), and since I do not have a mac, I can't test this out easily myself.
:::

We'll use @tbl-parse-numbers to explore different string operations focused specifically on converting strings to numbers. 

::: panel-tabset
##### Get the data: Python {.unnumbered}

```{python, eval = F}
import pandas as pd
df = pd.read_csv("https://raw.githubusercontent.com/srvanderplas/unl-stat850/main/data/number-formats.csv")
```

##### R {.unnumbered}

```{r, eval = F}
df <- read.csv("https://raw.githubusercontent.com/srvanderplas/unl-stat850/main/data/number-formats.csv", colClasses = "character")
```

By default, R tries to outsmart us and read the data in as numbers. I've disabled this behavior by setting `colClasses='character'` so that you can see how these functions work... but in general, R seems to be a bit more willing to try to guess what you want. This can be useful, but can also be frustrating when you don't know how to disable it.
:::

::: callout-caution
##### Converting Columns Using Your Best Guess {.unnumbered}

Both R and Python have ways to "guess" what type a column is and read the data in as that type. When we initially read in the data above, I had to explicitly disable this behavior in R. If you're working with data that is already read in, how do you get R and Python to guess what type something is?

::: panel-tabset
###### R

Here, R gets everything "right" except the eu_numbers, money_col, and custom cols, which makes sense - these contain information that isn't clearly numeric or doesn't match the default numeric formatting on my machine (which is using en_US.UTF-8 for almost everything). If we additionally want R to handle `mix_col`, we would have to explicitly convert to numeric, causing the a to be converted to `NA`

```{r guess-type-conversion-r}
library(dplyr)
library(readr)
df_guess <- type_convert(df)
str(df_guess)
```

The `type_convert` function has a `locale` argument; `readr` includes a `locale()` function that you can pass to `type_convert` that allows you to define your own locale. Because we have numeric types structured from at least two locales in this data frame, we would have to specifically read the data in specifying which columns we wanted read with each locale.

```{r guess-type-conversion-r-locale}
library(dplyr)
library(readr)
fixed_df <- type_convert(df) 
fixed_df2 <- type_convert(df, locale = locale(decimal_mark = ',', grouping_mark = '.'))
# Replace EU numbers col with the type_convert results specifying that locale
fixed_df$eu_numbers = fixed_df$eu_numbers
str(fixed_df)
```

###### Python

Similarly, Python does basically the same thing as R: mix_col, money_col, and custom are all left as strings, while floats, integers, and logical values are handled correctly.

```{python guess-type-conversion-py}
fixed_df = df.infer_objects()
fixed_df.dtypes
```

As in R, we can set the locale in Python to change how things are read in.

```{python guess-type-conversion-py-locale}
from babel.numbers import parse_decimal

# Convert eu_numbers column specifically
fixed_df['eu_numbers'] = fixed_df['eu_numbers'].apply(lambda x: parse_decimal(x, locale = 'it'))
fixed_df['eu_numbers'] = pd.to_numeric(fixed_df['eu_numbers'])
fixed_df.dtypes
```
:::
:::


::: callout-caution
##### Converting Columns Directly {.unnumbered}

Obviously, we can also convert some strings to numbers using type conversion functions that we discussed in @sec-type-conversions. This is fairly easy in R, but a bit more complex in Python, because Python has several different types of 'missing' or NA variables that are not necessarily compatible.

::: panel-tabset
###### R

Here, we use the `across` helper function from dplyr to convert all of the columns to numeric. Note that the last 3 columns don't work here, because they contain characters R doesn't recognize as numeric characters.

```{r direct-type-conversion-r}
library(dplyr)

df_numeric <- mutate(df, across(everything(), as.numeric))
str(df_numeric)
```

###### Python

```{python direct-type-conversion-py}
df_numeric = df.apply(pd.to_numeric, errors='coerce')
df_numeric.dtypes
```
:::
:::

::: callout-caution
##### Example: Converting Y/N data

The next thing we might want to do is convert our `custom` column so that it has 1 instead of Y and 0 instead of N. There are several ways we can handle this process: 

- We could use factors/categorical variables, which have numeric values "under the hood", but show up as labeled. 
- We could (in this particular case) test for equality with "Y", but this approach would not generalize well if we had more than 2 categories. 
- We could take a less nuanced approach and just find-replace and then convert to a number. 

Some of these solutions are more kludgy than others, but I've used all 3 approaches when dealing with categorical data in the past, depending on what I wanted to do with it afterwards.

::: panel-tabset
###### R

```{r conversion-find-replace-r}
library(stringr) # work with strings easily
fixed_df = fixed_df %>%
  mutate(
    # factor approach
    custom1 = factor(custom, levels = c("N", "Y"), labels = c("Y", "N")),
    # test for equality
    custom2 = (custom == "Y"),
    # string replacement
    custom3 = str_replace_all(custom, c("Y" = "1", "N" = "0")) %>%
      as.numeric()
  )

str(fixed_df)
```

###### Python

We've already done a brief demonstration of string methods in Python when we trimmed off the £ character. In this situation, it's better to use the pandas `replace` method, which allows you to pass in a list of values and a list of replacements.

```{python conversion-find-replace-py}
# Categorical (factor) approach
fixed_df['custom1'] = fixed_df['custom'].astype("category") # convert to categorical variable
# Equality/boolean approach
fixed_df['custom2'] = fixed_df['custom'] == "Y"
# string replacement
fixed_df['custom3'] = fixed_df['custom'].replace(["Y", "N"], ["1", "0"]).astype("int")

fixed_df.dtypes
```
:::

:::


### Using find and replace

Another way to fix some issues is to just find-and-replace the problematic characters. This is not always the best solution[^data-transformations-1], and may introduce bugs if you use the same code to analyze new data with characters you haven't anticipated, but in so many cases it's also the absolute easiest, fastest, simplest way forward and easily solves many different problems.

[^data-transformations-1]: It's particularly hackish when you're working with locale-specific settings [@herrmannHowDealInternational2021], and in many cases you can handle locale issues much more elegantly.

I'll show you how to correct all of the issues reading in the data using solutions shown above, but please do consider reading @herrmannHowDealInternational2021 so that you know why find-and-replace isn't (necessarily) the best option for locale-specific formatting.


::: callout-caution
##### Example: find and replace

Let's start with the money column.

::: panel-tabset
###### R

In R, parse_number() handles the money column just fine - the pound sign goes away and we get a numeric value. This didn't work by default with type_convert, but as long as we `mutate` and tell R we expect a number, things work well. Then, as we did above, we can specify the locale settings so that decimal and grouping marks are handled correctly even for countries which use ',' for decimal and '.' for thousands separators.

```{r guess-type-conversion-r-money}
fixed_df = df %>%
  type_convert() %>% # guess everything
  mutate(money_col = parse_number(money_col),
         eu_numbers = parse_number(eu_numbers, 
                                   locale = locale(decimal_mark = ',', 
                                                   grouping_mark = '.')))
```

###### Python

In python, a similar approach doesn't work out, because the pound sign is not handled correctly.

```{python guess-type-conversion-py-money1, error = T}
from babel.numbers import parse_decimal

fixed_df = df.infer_objects()

# Convert eu_numbers column
fixed_df['eu_numbers'] = fixed_df['eu_numbers'].apply(lambda x: parse_decimal(x, locale = 'it'))
fixed_df['eu_numbers'] = pd.to_numeric(fixed_df['eu_numbers'])

# Convert money_col
fixed_df['money_col'] = fixed_df['money_col'].apply(lambda x: parse_decimal(x, locale = 'en_GB'))

fixed_df.dtypes
```

```{python guess-type-conversion-py-money2}
# Remove £ from string
fixed_df['money_col'] = fixed_df['money_col'].str.removeprefix("£")
# Then parse the number
fixed_df['money_col'] = fixed_df['money_col'].apply(lambda x: parse_decimal(x))
# Then convert to numeric
fixed_df['money_col'] = pd.to_numeric(fixed_df['money_col'])

fixed_df.dtypes
```
:::

:::

::: callout-caution

#### Example: Locale find-and-replace

We could also handle the locale  issues using find-and-replace, if we wanted to...

::: panel-tabset
###### R

Note that `str_remove` is shorthand for `str_replace(x, pattern, "")`. 
There is a little bit of additional complexity in switching "," for "." and vice versa - we have to change "," to something else first, so that we can replace "." with ",". This is *not* elegant but it does work. It also doesn't generalize - it will mess up numbers formatted using the US/UK convention, and it won't handle numbers formatted using other conventions from other locales.

```{r find-replace-locale-r}
fixed_df = df %>%
  type_convert() %>% # guess everything
  mutate(money_col = str_remove(money_col, "£") %>% parse_number(),
         eu_numbers = str_replace_all(eu_numbers, 
                                      c("," = "_", 
                                        "\\." = ",", 
                                        "_" = ".")) %>%
           parse_number())
```

###### Python

```{python find-replace-locale-py, error = T}
from babel.numbers import parse_decimal

fixed_df = df.infer_objects()

# Convert eu_numbers column: 
# Replace . with nothing (remove .), then
# Replace , with .
fixed_df['eu_numbers'] = fixed_df['eu_numbers'].\
str.replace('\.', '').\
str.replace(',', '.')
fixed_df['eu_numbers'] = pd.to_numeric(fixed_df['eu_numbers'])

# Convert money_col
fixed_df['money_col'] = fixed_df['money_col'].\
str.removeprefix("£").\
str.replace(',', '')
fixed_df['money_col'] = pd.to_numeric(fixed_df['money_col'])

fixed_df.dtypes
fixed_df
```

:::

:::


### Separating multi-variable columns

Another common situation is to have multiple variables in one column. This can happen, for instance, when conducting a factorial experiment: Instead of having separate columns for each factor, researchers sometimes combine several different factors into a single label for a condition to simplify data entry.

In pandas, we use `x.str.split()` to split columns in a DataFrame, in R we use the `tidyr` package's `separate` function.

::: callout-caution
#### Example: Separating columns

We'll use the `table3` object included in `dplyr` for this example. You can load it in R and then load the `reticuate` package to be able to access the object in python as `r.table3`. 

::: panel-tabset

##### Picture the operation

![We want to separate the rate column into two new columns, cases and population.](images/data-transformations/tidyr_separate.png){fig-alt="An image showing table 3 from the messy data examples, with the rate column containing data formatted as xxx/yyy. The picture shows the transition to a similarly structured data with two new columns: cases, which contains the xxx data, and pop, which contains the yyy data."}

##### R

```{r separate-cols-r}
library(dplyr)
library(tidyr)
library(reticulate) # so we can access table3 in python
data(table3)
separate(table3, rate, into = c('cases', 'pop'), sep = "/", remove = F)
```

##### Python

```{python separate-cols-py}
table3 = r.table3
table3[['cases', 'pop']] = table3.rate.str.split("/", expand = True)
table3
```

This uses python's multiassign capability. Python can assign multiple things at once if those things are specified as a sequence (e.g. cases, pop). In this case, we split the rate column and assign two new columns, essentially adding two columns to our data frame and labeling them at the same time.

:::

:::



### Joining columns
It's also not uncommon to need to join information stored in two columns into one column. A good example of a situation in which you might need to do this is when we store first and last name separately and then need to have a 'name' column that has both pieces of information together.


::: callout-caution
#### Example: Joining columns

We'll use the `table3` object included in `dplyr` for this example. You can load it in R and then load the `reticuate` package to be able to access the object in python as `r.table3`. 

::: panel-tabset

##### Picture the operation

![We want to join the century and year columns into a new column, yyyy.](images/data-transformations/tidyr_unite.png){fig-alt="An image showing table 5 from the messy data examples, with century and year columns. The picture shows the transition to a similarly structured data set with a single column, year, which contains the century and the year pasted together as a single number."}

##### R

```{r unite-cols-r}
library(dplyr)
library(tidyr)
library(reticulate) # so we can access table3 in python
data(table5)
unite(table5, col = yyyy, c(century, year), sep = "", remove = F) %>%
  # convert all columns to sensible types
  readr::type_convert()
```

##### Python

```{python unite-cols-py}
import pandas as pd

table5 = r.table5
# Concatenate the two columns with string addition
table5['yyyy'] = table5.century + table5.year
# convert to number
table5['yyyy'] = pd.to_numeric(table5.yyyy)
table5
```

:::

:::

### Regular Expressions

Matching exact strings is easy - it's just like using find and replace.

```{r regular-expressions}
human_talk <- "blah, blah, blah. Do you want to go for a walk?"
dog_hears <- str_extract(human_talk, "walk")
dog_hears
```

But, if you can master even a small amount of regular expression notation, you'll have exponentially more power to do good (or evil) when working with strings. You can get by without regular expressions if you're creative, but often they're much simpler.


::: {.callout-note collapse="true"}

#### Optional: Short Regular Expressions Primer

You may find it helpful to follow along with this section using this [web app](https://spannbaueradam.shinyapps.io/r_regex_tester/) built to test R regular expressions for R. A similar application for Perl compatible regular expressions (used by SAS and Python) can be found [here](https://regex101.com/). The subset of regular expression syntax we're going to cover here is fairly limited (and common to SAS, Python, and R, with a few adjustments), but [you can find regular expressions to do just about anything string-related](https://stackoverflow.com/questions/tagged/regex?tab=Votes). As with any tool, there are situations where it's useful, and situations where you should not use a regular expression, no matter how much you want to.

Here are the basics of regular expressions:

-   `[]` enclose sets of characters\
    Ex: `[abc]` will match any single character `a`, `b`, `c`
    -   `-` specifies a range of characters (`A-z` matches all upper and lower case letters)
    -   to match `-` exactly, precede with a backslash (outside of `[]`) or put the `-` last (inside `[]`)
-   `.` matches any character (except a newline)
-   To match special characters, escape them using `\` (in most languages) or `\\` (in R). So `\.` or `\\.` will match a literal `.`, `\$` or `\\$` will match a literal `$`.

::: panel-tabset
#### R {.unnumbered}

```{r phone-strings}
num_string <- "phone: 123-456-7890, nuid: 12345678, ssn: 123-45-6789"

ssn <- str_extract(num_string, "[0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9][0-9][0-9]")
ssn
```

#### Python {.unnumbered}

In python, a regular expression is indicated by putting the character 'r' right before the quoted expression. This tells python that any backslashes in the string should be left alone -- if R had that feature, we wouldn't have to escape all the backslashes!

```{python phone-strings-py}
import re

num_string = "phone: 123-456-7890, nuid: 12345678, ssn: 123-45-6789"

ssn = re.search(r"[0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9][0-9][0-9]", num_string)
ssn
```
:::

Listing out all of those numbers can get repetitive, though. How do we specify repetition?

-   `*` means repeat between 0 and inf times
-   `+` means 1 or more times
-   `?` means 0 or 1 times -- most useful when you're looking for something optional
-   `{a, b}` means repeat between `a` and `b` times, where `a` and `b` are integers. `b` can be blank. So `[abc]{3,}` will match `abc`, `aaaa`, `cbbaa`, but not `ab`, `bb`, or `a`. For a single number of repeated characters, you can use `{a}`. So `{3, }` means "3 or more times" and `{3}` means "exactly 3 times"

::: panel-tabset
#### R {.unnumbered}

```{r regular-expression-banana}
library(stringr)
str_extract("banana", "[a-z]{1,}") # match any sequence of lowercase characters
str_extract("banana", "[ab]{1,}") # Match any sequence of a and b characters
str_extract_all("banana", "(..)") # Match any two characters
str_extract("banana", "(..)\\1") # Match a repeated thing
```

```{r regular-expression-phone-ssn}
num_string <- "phone: 123-456-7890, nuid: 12345678, ssn: 123-45-6789, bank account balance: $50,000,000.23"

ssn <- str_extract(num_string, "[0-9]{3}-[0-9]{2}-[0-9]{4}")
ssn
phone <- str_extract(num_string, "[0-9]{3}.[0-9]{3}.[0-9]{4}")
phone
nuid <- str_extract(num_string, "[0-9]{8}")
nuid
bank_balance <- str_extract(num_string, "\\$[0-9,]+\\.[0-9]{2}")
bank_balance
```

#### Python {.unnumbered}


```{python regular-expression-banana-py}
import re
re.search(r"[a-z]{1,}", "banana") # match any sequence of lowercase characters
re.search(r"[ab]{1,}", "banana") # Match any sequence of a and b characters
re.findall(r"(..)", "banana") # Match any two characters
re.search(r"(..)\1", "banana") # Match a repeated thing
```

```{python regular-expression-phone-ssn-py}
num_string = "phone: 123-456-7890, nuid: 12345678, ssn: 123-45-6789, bank account balance: $50,000,000.23"

ssn = re.search(r"[0-9]{3}-[0-9]{2}-[0-9]{4}", num_string)
ssn
phone = re.search(r"[0-9]{3}.[0-9]{3}.[0-9]{4}", num_string)
phone
nuid = re.search(r"[0-9]{8}", num_string)
nuid
bank_balance = re.search(r"\$[0-9,]+\.[0-9]{2}", num_string)
bank_balance
```

:::

There are also ways to "anchor" a pattern to a part of the string (e.g. the beginning or the end)

-   `^` has multiple meanings:
    -   if it's the first character in a pattern, `^` matches the beginning of a string
    -   if it follows `[`, e.g. `[^abc]`, `^` means "not" - for instance, "the collection of all characters that aren't a, b, or c".
-   `$` means the end of a string

Combined with pre and post-processing, these let you make sense out of semi-structured string data, such as addresses.

::: panel-tabset
#### R {.unnumbered}

```{r regular-expression-addresses}
address <- "1600 Pennsylvania Ave NW, Washington D.C., 20500"

house_num <- str_extract(address, "^[0-9]{1,}")

 # Match everything alphanumeric up to the comma
street <- str_extract(address, "[A-z0-9 ]{1,}")
street <- str_remove(street, house_num) %>% str_trim() # remove house number

city <- str_extract(address, ",.*,") %>% str_remove_all(",") %>% str_trim()

zip <- str_extract(address, "[0-9-]{5,10}$") # match 5 and 9 digit zip codes
```

#### Python {.unnumbered}

Python match objects contain 3 things: `.span()`, which has the start and end positions of the match, `.string`, which contains the original string passed into the function, and `.group()`, which contains the actual matching portion of the string.

```{python regular-expression-addresses-py}
address = "1600 Pennsylvania Ave NW, Washington D.C., 20500"

house_num = re.search(r"^[0-9]{1,}", address).group()

# Match everything alphanumeric up to the comma
street = re.search(r"[A-z0-9 ]{1,}", address).group()
street = street.replace(house_num, "").strip() # remove house number

city = re.search(",.*,", address).group().replace(",", "").strip()

zip = re.search(r"[0-9-]{5,10}$", address).group() # match 5 and 9 digit zip codes
```

:::

-   `()` are used to capture information. So `([0-9]{4})` captures any 4-digit number
-   `a|b` will select a or b.

If you've captured information using (), you can reference that information using backreferences. In most languages, those look like this: `\1` for the first reference, `\9` for the ninth. In R, backreferences are `\\1` through `\\9`. 

::: panel-tabset
#### R {.unnumbered}

In R, the `\` character is special, so you have to escape it. So in R, `\\1` is the first reference, and `\\2` is the second, and so on.

```{r regular-expression-fancier-r}
phone_num_variants <- c("(123) 456-7980", "123.456.7890", "+1 123-456-7890")
phone_regex <- "\\+?[0-9]{0,3}? ?\\(?([0-9]{3})?\\)?.?([0-9]{3}).?([0-9]{4})"
# \\+?[0-9]{0,3} matches the country code, if specified, 
#    but won't take the first 3 digits from the area code 
#    unless a country code is also specified
# \\( and \\) match literal parentheses if they exist
# ([0-9]{3})? captures the area code, if it exists
# .? matches any character
# ([0-9]{3}) captures the exchange code
# ([0-9]{4}) captures the 4-digit individual code

str_extract(phone_num_variants, phone_regex)
str_replace(phone_num_variants, phone_regex, "\\1\\2\\3")
# We didn't capture the country code, so it remained in the string

human_talk <- "blah, blah, blah. Do you want to go for a walk? I think I'm going to treat myself to some ice cream for working so hard. "
dog_hears <- str_extract_all(human_talk, "walk|treat")
dog_hears
```

#### Python {.unnumbered}

```{python regular-expression-fancier-py}
phone_num_variants = pd.Series(["(123) 456-7980", "123.456.7890", "+1 123-456-7890"])
phone_regex = re.compile("\+?[0-9]{0,3}? ?\(?([0-9]{3})?\)?.?([0-9]{3}).?([0-9]{4})")
# \+?[0-9]{0,3} matches the country code, if specified, 
#    but won't take the first 3 digits from the area code 
#    unless a country code is also specified
# \( and \) match literal parentheses if they exist
# ([0-9]{3})? captures the area code, if it exists
# .? matches any character
# ([0-9]{3}) captures the exchange code
# ([0-9]{4}) captures the 4-digit individual code

res = phone_num_variants.str.findall(phone_regex)
res2 = phone_num_variants.str.replace(phone_regex, "\\1\\2\\3")
# We didn't capture the country code, so it remained in the string

human_talk = "blah, blah, blah. Do you want to go for a walk? I think I'm going to treat myself to some ice cream for working so hard. "
dog_hears = re.findall(r"walk|treat", human_talk)
dog_hears
```

:::

Putting it all together, we can test our regular expressions to ensure that they are specific enough to pull out what we want, while not pulling out other similar information:

::: panel-tabset
#### R {.unnumbered}

```{r regex-r-version-of-sas}
strings <- c("abcdefghijklmnopqrstuvwxyzABAB",
"banana orange strawberry apple",
"ana went to montana to eat a banana",
"call me at 432-394-2873. Do you want to go for a walk? I'm going to treat myself to some ice cream for working so hard.",
"phone: (123) 456-7890, nuid: 12345678, bank account balance: $50,000,000.23",
"1600 Pennsylvania Ave NW, Washington D.C., 20500")

phone_regex <- "\\+?[0-9]{0,3}? ?\\(?([0-9]{3})?\\)?.?([0-9]{3}).([0-9]{4})"
dog_regex <- "(walk|treat)"
addr_regex <- "([0-9]*) ([A-z0-9 ]{3,}), ([A-z\\. ]{3,}), ([0-9]{5})"
abab_regex <- "(..)\\1"

tibble(
  text = strings,
  phone = str_detect(strings, phone_regex),
  dog = str_detect(strings, dog_regex),
  addr = str_detect(strings, addr_regex),
  abab = str_detect(strings, abab_regex))
```

#### Python {.unnumbered}


```{python regex-py-version-of-sas}
strings = pd.Series(["abcdefghijklmnopqrstuvwxyzABAB",
"banana orange strawberry apple",
"ana went to montana to eat a banana",
"call me at 432-394-2873. Do you want to go for a walk? I'm going to treat myself to some ice cream for working so hard.",
"phone: (123) 456-7890, nuid: 12345678, bank account balance: $50,000,000.23",
"1600 Pennsylvania Ave NW, Washington D.C., 20500"])

phone_regex = re.compile(r"\(?([0-9]{3})?\)?.?([0-9]{3}).([0-9]{4})")
dog_regex = re.compile(r"(walk|treat)")
addr_regex = re.compile(r"([0-9]*) ([A-z0-9 ]{3,}), ([A-z\\. ]{3,}), ([0-9]{5})")
abab_regex = re.compile(r"(..)\1")

pd.DataFrame({
  "text": strings,
  "phone": strings.str.contains(phone_regex),
  "dog": strings.str.contains(dog_regex),
  "addr": strings.str.contains(addr_regex),
  "abab": strings.str.contains(abab_regex)})
```

:::

:::



## Pivot operations

It's fairly common for data to come in forms which are convenient for either human viewing or data entry. Unfortunately, these forms aren't necessarily the most friendly for analysis. 

![](https://raw.githubusercontent.com/kelseygonzalez/tidyexplain/master/images/static/png/original-dfs-tidy.png)

The two operations we'll learn here are wide -> long and long -> wide. 

![](https://raw.githubusercontent.com/kelseygonzalez/tidyexplain/wider_longer/images/tidyr-pivot_wider_longer.gif)

This animation uses the R functions pivot_wider() and pivot_longer() [Animation source](https://github.com/kelseygonzalez/tidyexplain/tree/wider_longer), but the concept is the same in both R and python. 


### Longer

In many cases, the data come in what we might call "wide" form - some of the column names are not names of variables, but instead, are themselves values of another variable. 


::: panel-tabset

#### Picture the Operation

Tables 4a and 4b are good examples of data which is in "wide" form and should be in long(er) form: the years, which are variables, are column names, and the values are cases and population respectively.  

```{r longer-pivot-demo}
table4a
table4b
```

The solution to this is to rearrange the data into "long form": to take the columns which contain values and "stack" them, adding a variable to indicate which column each value came from. To do this, we have to duplicate the values in any column which isn't being stacked (e.g. country, in both the example above and the image below). 

![A visual representation of what the pivot_longer operation looks like in practice.](images/data-transformations/tidyr_pivot_longer.png){fig-alt="A wide-to-long transformation operation, where the values of the id variables are repeated for each column which is used as a key; the values in each column are moved into a value column. There is a row of data in the transformed data frame for each combination of id variables and key variables."}

Once our data are in long form, we can (if necessary) separate values that once served as column labels into actual variables, and we'll have tidy(er) data. 


#### R

```{r tidyr-pivot-longer-demo2}
tba <- table4a %>% 
  pivot_longer(-country, names_to = "year", values_to = "cases")
tbb <- table4b %>% 
  pivot_longer(-country, names_to = "year", values_to = "population")

# To get the tidy data, we join the two together (see Table joins below)
left_join(tba, tbb, by = c("country", "year")) %>%
  # make year numeric b/c it's dumb not to
  mutate(year = as.numeric(year))

```

The columns are moved to a variable with the name passed to the argument "names_to" (hopefully, that is easy to remember), and the values are moved to a variable with the name passed to the argument "values_to" (again, hopefully easy to remember). 

We identify ID variables (variables which we don't want to pivot) by not including them in the pivot statement. We can do this in one of two ways:

- select only variables we want to pivot: `pivot_longer(table4a, cols = `1999`:`2000`, names_to = "year", values_to = "cases")`
- select variables we don't want to pivot, using `-` to remove them. (see above, where `-country` excludes country from the pivot operation)

Which option is easier depends how many things you're pivoting (and how the columns are structured). 

If we wanted to avoid the table join, we could do this process another way: first, we would add a column to each tibble called id with values "cases" and "population" respectively. Then, we could bind the two tables together by row (so stack them on top of each other). We could then do a wide-to-long pivot, followed by a long-to-wide pivot to get our data into tidy form. 

```{r tidyr-pivot-longer-id}
# Create ID columns
table4a.x <- table4a %>% mutate(id = "cases")
table4b.x <- table4b %>% mutate(id = "population")
# Create one table
table4 <- bind_rows(table4a.x, table4b.x)

table4_long <- table4 %>%
  # rearrange columns
  select(country, id, `1999`, `2000`) %>%
  # Don't pivot country or id
  pivot_longer(-c(country:id), names_to = "year", values_to = "count")

# Intermediate fully-long form
table4_long

# make wider, with case and population columns
table4_tidy <- table4_long %>%
  pivot_wider(names_from = id, values_from = count)

table4_tidy
```

#### Python

In Pandas, `pandas.melt(...)` takes `id_vars`, `value_vars`, `var_name`, and `value_name`. Otherwise, it functions nearly exactly the same as `pivot_longer`; the biggest difference is that column selection works differently in python than it does in the tidyverse.

As in R, we can choose to either do a melt/pivot_longer operation on each table and then join the tables together, or we can concatenate the rows and do a melt/pivot_longer operation followed by a pivot/pivot_wider operation.

```{python pivot-longer-py2}
import pandas as pd

# Get tables from R
table4a = r.table4a
table4b = r.table4b

tba = pd.melt(table4a, id_vars = ['country'], value_vars = ['1999', '2000'], var_name = 'year', value_name = 'cases')
tbb = pd.melt(table4b, id_vars = ['country'], value_vars = ['1999', '2000'], var_name = 'year', value_name = 'population')

# To get the tidy data, we join the two together (see Table joins below)
table4_tidy = pd.merge(tba, tbb, on = ["country", "year"], how = 'left')

```

Here's the melt/pivot_longer + pivot/pivot_wider version:

```{python pivot-longer-py}
import pandas as pd

# Get tables from R
table4a = r.table4a
table4b = r.table4b

table4a['id'] = "cases"
table4b['id'] = "population"

table4 = pd.concat([table4a, table4b])

# Fully long form
table4_long = pd.melt(table4, id_vars = ['country', 'id'], value_vars = ['1999', '2000'], var_name = 'year', value_name = 'count')

# Tidy form - case and population columns
table4_tidy2 = pd.pivot(table4_long, index = ['country', 'year'], columns = ['id'], values = 'count')
# reset_index() gets rid of the grouped index
table4_tidy2.reset_index()

```

:::

### Wider


While it's very common to need to transform data into a longer format, it's not that uncommon to need to do the reverse operation. When an observation is scattered across multiple rows, your data is too long and needs to be made wider again.  

::: panel-tabset

#### Picture the Operation

Table 2 is an example of a table that is in long format but needs to be converted to a wider layout to be "tidy" - there are separate rows for cases and population, which means that a single observation (one year, one country) has two rows. 

![A visual representation of what the pivot_wider operation looks like in practice.](images/data-transformations/tidyr_pivot_wider.png){fig-alt="An illustration of the transition from long data to wide data. In the long data frame, there are alternating rows of cases and populations, with corresponding counts. In the wide data frame, for each combination of id variables country and year, there are two columns: cases, and pop, each with corresponding values. That is, the key variables (cases, pop) in the long data frame become columns in the wide data frame."}


#### R

```{r pivot-wider-demo}
table2 %>%
  pivot_wider(names_from = type, values_from = count)
```

#### Python

```{python pivot-wider-py}
table2 = r.table2

pd.pivot(table2, index = ['country', 'year'], columns = ['type'], values = 'count').reset_index()
```

:::

::: callout-tip
### Try it Out!

In the next section, we'll be using the WHO surveillance of disease incidence data ([link](https://immunizationdata.who.int/)). I originally wrote this using data from 2020, but the WHO has since migrated to a new system and now provides their data in a much tidier long form ([Excel link](http://www.who.int/entity/immunization/monitoring_surveillance/data/incidence_series.xls)). For demonstration purposes, I'll continue using the messier 2020 data, but the link is no longer available on the WHO's site. 

It will require some preprocessing before it's suitable for a demonstration. I'll do some of it, but in this section, you're going to do the rest.

::: panel-tabset 

#### Preprocessing

You don't have to understand what this code is doing just yet.

```{r tryitout-who-surveillance}
library(readxl)
library(purrr) # This uses the map() function as a replacement for for loops. 
# It's pretty sweet

sheets <- excel_sheets("data/incidence_series.xls")
sheets <- sheets[-c(1, length(sheets))] # get rid of 1st and last sheet name

# This command says "for each sheet, read in the excel file with that sheet name"
# map_df means paste them all together into a single data frame
disease_incidence <- map_df(sheets, ~read_xls(path ="data/incidence_series.xls", sheet = .))

# Alternately, we could write a loop:
disease_incidence2 <- tibble() # Blank data frame
for (i in 1:length(sheets)) {
  disease_incidence2 <- bind_rows(
    disease_incidence2, 
    read_xls(path = "data/incidence_series.xls", sheet = sheets[i])
  )
}

# export for Python (and R, if you want)
readr::write_csv(disease_incidence, file = "data/who_disease_incidence.csv")
```


#### Problem

Download the exported data [here](data/who_disease_incidence.csv) and import it into Python and R. Transform it into long format, so that there is a year column. You should end up with a table that has dimensions of approximately 6 columns and 83,000 rows (or something close to that). 

Can you make a line plot of cases of measles in Bangladesh over time?

```{r print-data}
head(disease_incidence)
```

#### R solution

```{r tryitout-surveillance-cleaning}
who_disease <- read_csv("data/who_disease_incidence.csv", na = ".")

who_disease_long <- who_disease %>%
  pivot_longer(matches("\\d{4}"), names_to = "year", values_to = "cases") %>%
  rename(Country = Cname) %>%
  mutate(Disease = str_replace(Disease, "CRS", "Congenital Rubella"),
         year = as.numeric(year))

filter(who_disease_long, Country == "Bangladesh", Disease == "measles") %>%
  ggplot(aes(x = year, y = cases)) + geom_line()
```

#### Python solution

```{python tryitout-surveillance-cleaning-py}
import pandas as pd
from plotnine import *

who_disease = pd.read_csv("data/who_disease_incidence.csv", na_values = ['NA', 'NaN'])
who_disease_long = pd.melt(who_disease, id_vars = ['WHO_REGION', 'ISO_code', 'Cname', 'Disease'], var_name = 'year', value_name = 'cases')
# Rename cname to country
who_disease_long = who_disease_long.rename(columns={"Cname": "Country"})
who_disease_long.replace("CRS", "Congenital Rubella")
who_disease_long['year'] = pd.to_numeric(who_disease_long['year'])

tmp = who_disease_long.query("Country=='Bangladesh' & Disease == 'measles'")
ggplot(tmp, aes(x = "year", y = "cases")) + geom_line()
```

:::

:::


::: callout-note
## Other resources

@doughertyCleanMessyData2021 - very nice task-oriented chapter that's below the level addressed in this course but still useful
:::

## References
