[
["docs-reports.html", "Module 10 Documents and Reports Module Objectives 10.1 Literate Programming, knitr, and rmarkdown 10.2 A Very Brief Introduction to LaTeX 10.3 Slides 10.4 Posters 10.5 Other options", " Module 10 Documents and Reports Module Objectives Create presentation slides in LaTeX and rmarkdown Create posters in LaTeX and rmarkdown Create a CV in LaTeX and/or rmarkdown 10.1 Literate Programming, knitr, and rmarkdown Literate programming is a programming method where you explain the code in natural language (e.g. English) in roughly the same space that you write the code (in a programming language). This solves two problems: code isn’t always clear as to what its goals are, and natural language descriptions of algorithms aren’t always clear enough to contain the details of how something is actually implemented. The knitr and Rmarkdown packages are both implementations of literate programming (and the two packages tend to overlap a bit, because both were written by the same author, Yihui Xie). knitr is primarily focused on the creation of Rnw (r no weave) files, which are essentially LaTeX files with R code inside. Rnw files are compiled into pdfs. rmarkdown uses Rmd or Rmarkdown files, which can then be compiled into many different formats: pdf, html, markdown, Microsoft Word. One major advantage of knitr and Rmarkdown from a practical perspective is that it largely removes the need to keep track of graphs and charts when you’re writing a paper, making a presentation, etc. The charts and tables based on your method automatically update when the document is recompiled. If you’re not reading this chapter early, you’ve been using Rmarkdown for the entire semester to submit your homework. Hopefully that’s been fairly easy. In this chapter, we’re going to explore some other applications of literate programming: creating slides, posters, PDF documents, and more. 10.2 A Very Brief Introduction to LaTeX LaTeX is a document preparation utility that attempts to take the focus off of layout (so you don’t have to spend 30 minutes trying to get the page break in the right place in e.g. Word) and bibliographic details. I’m not convinced LaTeX succeeds at freeing you from layout concerns, but it’s certainly true that it is much more powerful than Word for layout purposes. The philosophy of LaTeX is that presentation shouldn’t get in the way of content: you should be able to change the presentation formatting systematically, without having to mess with the content. This allows you to switch templates easily, make document-wide changes in a single command, and more. In Rstudio, copy the text in the document below, paste it into a text file in the editor window, and name it test.tex. You should see a Compile PDF button show up at the top of the document. Click that button to compile the document. \\documentclass{article} % this tells LaTeX what type of document to make % Note, comments are prefaced by a % sign. If you need to type the actual symbol % you will have to escape it with \\%. \\begin{document} Hello \\LaTeX! \\end{document} Most commonly, you’ll use the article document class for papers, and beamer for presentations and posters. Other useful classes include moderncv (for CVs) and book, as well as the LaTeX class maintained by the UNL math department for thesis formatting. Note that by changing the extension of any .tex file to .Rnw, you can easily add R code chunks to a LaTeX file. There are several types of latex commands: Declarations: statements like \\documentclass, \\usepackage or \\small, which are stated once and take effect until further notice. Environments: statements with matching \\begin{xxx} and \\end{xxx} clauses that define a block of the document which is treated differently. Common environments include figures and tables. Special characters: another type of command that don’t define formatting or structure, but may print special characters, e.g. \\% to print a literal % character. Both declarations and environments may come with both optional and required arguments. Required arguments are placed in {...} brackets, while optional arguments are placed in [...] brackets. You can, for instance, start your document with \\documentclass[12pt]{article} to specify the base font size. One of the most useful features in LaTeX is math mode, which you can enter by enclosing text in $...$ (for inline statements), $$...$$ (for statements on their own line), or using other environments like \\begin{array}...\\end{array} that come in math-specific packages. Once in math mode, you can use math symbol commands to get characters like \\(\\theta, \\pi, \\sum, \\int, \\infty\\), and more. Try it out With any document creation software, the easiest way to learn how to do it is to find a sample document, tinker with it, see if you can make things the way you want them to be, and then google the errors when you inevitably screw something up. Take the sample document up above and see if you can do the following tasks: (I’ve linked to documentation that may be useful) Add an image Add the quadratic formula and the PDF of a normal distribution to the document In extremely large text, print LaTeX using the \\LaTeX command In extremely small, italic text, print your name Solution \\documentclass{article} % this tells LaTeX what type of document to make % Add the graphicx package so that we can include images \\usepackage{graphicx} \\begin{document} Hello \\LaTeX! % Include a figure \\begin{figure}[h] \\centering \\includegraphics[width=.5\\textwidth]{../image/IllusoryContour.png} \\caption{Illusory contour image} \\end{figure} % Add the quadratic formula and the normal PDF to the document $y = ax^2 + bx + c$ can be solved to get $$x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a}$$ The PDF of a normal distribution is $$f(x | \\mu, \\sigma) = \\frac{1}{\\sigma\\sqrt{2\\pi}} e^{-\\frac{(x - \\mu)^2}{2\\sigma^2}}$$ % In extremely large text, print \\LaTeX \\Huge\\LaTeX % In extremely small italic text, print your name \\tiny\\emph{Your name} \\end{document} You can see the compiled pdf here. 10.2.1 Knitr R code chunks are embedded in LaTeX documents using: % start of chunk &lt;&lt;chunk-name, ...options...&gt;&gt;= @ % end of chunk How this works To compile a Rnw document, knitr first runs all of the R code, generating any figures or tables or text output for each chunk. For each chunk, knitr replaces the chunk code with LaTeX code to include the results; the result of this operation is saved to a tex file. Once the tex file is created, knitr compiles the tex file into a pdf. 10.3 Slides 10.3.1 Beamer (LaTeX) and knitr Beamer is a powerful LaTeX class which allows you to create slides. The only change necessary to turn a beamer slide deck into a knitr slide deck is to add fragile as an option to any slide with verbatim content. Try it out Download and compile beamer-demo.Rnw. What happens when you remove the [fragile] from each frame declaration? Can you change the theme of the presentation? Add another slide, and on that slide, show an appropriate style ggplot2 graph of the distribution of board game ratings, reading in the board game ratings using the following code: board_games &lt;- readr::read_csv(&quot;https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-03-12/board_games.csv&quot;) 10.3.2 xaringan 10.4 Posters 10.4.1 Beamer (LaTeX) and knitr 10.4.2 Pagedown 10.4.3 xaringan 10.4.4 pagedown 10.5 Other options Jupyter with SAS "]
]
