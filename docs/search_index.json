[
["index.html", "Stat 850: Computing Tools for Statisticians Introduction", " Stat 850: Computing Tools for Statisticians Susan Vanderplas 2020-05-29 Introduction "],
["tools.html", "Module 1 Tools for Statistical Computing 1.1 Course Outline 1.2 R and RStudio 1.3 SAS 1.4 LaTeX 1.5 Version Control with Git", " Module 1 Tools for Statistical Computing This course requires that you have the following software installed on your machine: git SAS 9.4 (or later) R (3.5 or higher) RStudio LaTeX You will also need to sign up for a GitHub account This chapter will provide instructions for how to install and configure these programs (or how to obtain them), but first, it may be useful to get a “big picture” overview of how the course is structured 1.1 Course Outline The goal of this class is to expose you to basic computing skills in R and SAS, which are two of the more common languages for statistical computing (python is the 3rd most common, and is particularly popular in data science and machine learning, but will not be explicitly taught in this class.) SAS is another extensively used statistical programming language. … 1.2 R and RStudio R is a statistical computing language which originated as an open-source clone of Bell labs S computing language. S was inspired by Scheme, but also has features which are similar to Lisp. It is a scripting language (you don’t have to compile the code before it runs) and is natively accessed using a command-line prompt. One feature of R that is relatively unique is that it uses vector-based math, which means that mathematical operations on vectors occur for the entire vector without having to use loops to iterate through the vector line-by-line. R is optimized for working on data: unlike more general-purpose programming languages such as Python, R was built with the idea of facilitating data analysis. As a result, data structures in R tend to be more natural for statistical work. From a computer science perspective, though, R seems like an extremely odd language because the design choices that make data analysis easier are unconventional for more general-purpose languages. RStudio is an integrated development environment for R. Basically, it adds a pretty graphical layer on top of R, providing an easy way to develop R code, evaluate that code, and keep track of all of the variables which are available in the computing environment. RStudio contains integrations which provide syntax highlighting, code folding, basic checks (missing parentheses, etc.), and many other features. RStudio was designed around the idea of making R easier to use and making it easy to develop statistical software reproducibly. RStudio (the company) is responsible for adding many features to the R ecosystem which facilitate running statistical analyses and presenting the results in user-friendly ways. 1.2.1 Getting Set up: R 1.2.2 Getting Set up: RStudio 1.2.3 Exploring RStudio 1.3 SAS 1.4 LaTeX LaTeX purpose Overleaf vs. TexMaker and other GUIs For now, LaTeX is going to sit there under the hood and be used by other programs 1.5 Version Control with Git Explanation of why version control matters (phD comic) 1.5.1 Getting set up: git 1.5.2 Getting set up: github 1.5.3 Git and Github Explain the difference between the two "],
["intro-prog.html", "Module 2 Introduction to Statistical Programming Module Objectives Definitions Statistical Programming Languages 2.1 Variable types 2.2 Data structures 2.3 Control structures 2.4 Overgrown Calculators References and Links", " Module 2 Introduction to Statistical Programming The only way to learn how to program effectively is to take something that works, break it, and then fix it again. There’s plenty of theory and you should definitely learn that, but fundamentally, if you are not regularly breaking code, you’re probably not programming. Figure 2.1: This is basically the class summarized, in meme format. The goal for this chapter (and several chapters to come) is that you can modify example code and adapt it to the problem at hand. This is the best way to learn how to program, but it means you may break the code and not know how to fix it. If that happens, please try the following steps: Google the error and see if you can understand why it happened. Consult with a classmate to see if they can understand where things broke. Post to the discussion board and see if anyone in the class can understand where things broke. (When you do this, post all of the code relevant to the problem, and the error you’re getting, so that your classmates can replicate the problem) If you do not hopelessly break code during this chapter, then please do your best to help others who may not have previously programmed (or previously programmed in these languages). While writing this chapter, I came across about 10 errors in SAS that I’d never encountered before. If all else fails, while you’re waiting for someone to help you figure out what an error message means… try this approach. Module Objectives Identify variable types, data structures, and common reserved words in R and SAS Use control structures (loops and conditionals) effectively Use matrix algebra functionality in R and SAS to perform basic calculations More informally, the goal is to get familiar with the basics of each programming language. Definitions Many programming resources talk about 3, or 5, or 10 core concepts in any programming language. In this module, we’re going to discuss the generic concepts, and then how these concepts are implemented in R and SAS. Interestingly, the “core concepts” aren’t necessarily the same across lists. So, here is a consensus list of concepts which are generic across languages and usually important: Variables - a symbolic name or reference to some kind of information. In the expression a + b &gt; a, both a and b are variables. Variables may have a specific type (what data can be stored in the variable), scope (where the variable can be accessed), location (in memory). Here is a nice explanation of the difference between variables in programming and variables in math. Conditional statements (if statements) - These statements allow the program to handle information adaptively - if a statement is true, one set of instructions will be used, and if the statement is false, a different set of instructions will be used. Looping and iteration - An iteration is any time a sequence of steps is executed. Most languages have several different types of loops or iteration: for loops, which allow for the sequence of steps to be executed a specific number of times, while loops, which allow for the sequence of steps to be executed while a conditional statement is true, recursion, where a block of code calls itself. Data types and data structures - these concepts determine what information a variable can hold. Data types are lower-level, simple objects (floating-point numbers, integers, boolean T/F, characters, strings). Data structures may include lists (sequences of many objects) and vectors (sequences of many objects of the same type), dictionaries (a list of key-value pairs), objects (data structures which may hold multiple related pieces of information). Functions, or self-contained modules of code that accomplish a particular task. Syntax, the set of rules that define which combinations of symbols consist of correctly structured and interpretable commands in the language. Tools, the set of external programs which may help with development and writing code. Some common tools are IDEs (Integrated Development Environments), which may correct syntax and typos, organize files for you, allow you to keep track of which variables you have defined, and assist you with code organization and navigation. Other tools include compilers (which take human-written code and translate it into efficient machine code), version control systems (which help you track changes to code over time), debuggers, and documentation generators. Not all of these tools are necessary for all languages - scripting languages such as python and R do not require compilers by default, for instance. Sequence of commands: It’s important to have the right commands in the right order. Some recipes, like bread dough, are flexible, and you can add the ingredients in almost any order, but in other recipes, the order matters as much as the correct quantity of ingredients (try putting the cheese powder in before the noodles are boiled when making macaroni and cheese. Yuck.). Programming tends to be like these less flexible recipes. Statistical Programming Languages Having established the generic definitions of the concepts which apply to almost any programming language, we now must examine how R and SAS implement these concepts. R and SAS are both statistical programming languages - they are specifically designed to work with data, which means that they make compromises that other languages do not in order to make it easier to write code where the data (rather than the functions, classes, methods, or objects) are the primary concern. Both R and SAS have long histories. SAS in particular dates back to the 1960s, and has syntax which is unique compared to more modern languages such as C, python, Java, and R. R’s predecessor, S, dates back to 1976 and was designed for internal use at Bell Labs. The histories of both languages are useful in understanding why they are useful for their respective tasks, but are not essential for this course (so read them at your leisure). The biggest difference between R and SAS (at a fundamental level) is that R is a functional language - it consists mainly of functions, which can (and do) manipulate objects, including other functions. SAS, on the other hand, is a procedural language - most SAS programs follow a specific series of steps, known as “proc”s. Procs are essentially functions (or compositions of multiple functions), but in SAS, it is simpler to think of an analysis as a series of procedural steps; in R, there are steps, but they may be implemented in a more flexible way (depending on the analysis). Another interesting feature of SAS is that it’s really several languages - some commands work in PROC IML (interactive matrix language) but not in a DATA step. When looking for help in SAS, make sure you’re referencing the correct part of the language documentation. Basic Syntax and Cheatsheets SAS Cheatsheet (from another class like this) SAS Cheatsheet (by SAS) R Cheatsheet - this is a simplified cheat sheet offered by RStudio. R Cheatsheet (classic) SAS Programming for R Users (free book) I kept the classic R reference card by my computer for about 5 years, and referenced it at least once or twice a day for that entire period. There will be other cheat sheets and reference cards scattered through this book because if you can’t remember something’s name, you might be able to remember where it is on the reference card (or at least, that’s how I learned R). 2.1 Variable types Variable types are sufficiently different in R and SAS that we will cover R first, then SAS. 2.1.1 R In R, there are 4 commonly-used types: Type Description character holds text-based information: “abcd” or “3.24a” are examples of values which would be stored as characters in R logical holds binary information: 0/1, or FALSE/TRUE. Logical variables are stored as single bit information (e.g. either a 0 or 1), but display as TRUE and FALSE (which are reserved words and constants). It is possible to use the shorthand F and T, but be careful with this, because F and T are not reserved, and other information can be stored within them. integer holds (as you might expect) integers. Note that integers are handled differently than doubles (floating point numbers), but in general, R will implicitly convert integers to doubles to avoid common pitfalls with integer divison (which does not allow for decimals). double holds floating point numbers. By default, most numeric variables in R are doubles. You can test to see whether a variable holds a value of a specific type using the is.xxx() functions, which are demonstrated below. You can convert a variable of one type to another with as.xxx() functions. You can test what type a variable is using typeof(). Note that &lt;- is used for assigning a value to a variable. So the first line in the code below is read “x gets ‘R is awesome’” or “x is assigned the value ‘R is awesome’”. Demonstration of variable types: Character Variables x &lt;- &quot;R is awesome&quot; typeof(x) [1] &quot;character&quot; is.character(x) [1] TRUE is.logical(x) [1] FALSE is.integer(x) [1] FALSE is.double(x) [1] FALSE Logical Variables x &lt;- FALSE typeof(x) [1] &quot;logical&quot; is.character(x) [1] FALSE is.logical(x) [1] TRUE is.integer(x) [1] FALSE is.double(x) [1] FALSE Integer Variables x &lt;- 2 typeof(x) [1] &quot;double&quot; is.character(x) [1] FALSE is.logical(x) [1] FALSE is.integer(x) [1] FALSE is.double(x) [1] TRUE Wait, 2 is an integer, right? 2 is an integer, but in R, values are assumed to be doubles unless specified. So if we want R to treat 2 as an integer, we need to specify that it is an integer specifically. x &lt;- 2L # The L immediately after the 2 indicates that it is an integer. typeof(x) [1] &quot;integer&quot; is.character(x) [1] FALSE is.logical(x) [1] FALSE is.integer(x) [1] TRUE is.double(x) [1] FALSE is.numeric(x) [1] TRUE Double Variables x &lt;- 2.45 typeof(x) [1] &quot;double&quot; is.character(x) [1] FALSE is.logical(x) [1] FALSE is.integer(x) [1] FALSE is.double(x) [1] TRUE is.numeric(x) [1] TRUE Numeric Variables A fifth common “type”1, numeric is really the union of two types: integer and double, and you may come across it when using str() or mode(), which are similar to typeof() but do not quite do the same thing. The numeric category exists because when doing math, we can add an integer and a double, but adding an integer and a string is … trickier. Testing for numeric variables guarantees that we’ll be able to do math with those variables. is.numeric() and as.numeric() work as you would expect them to work. The general case of this property of a language is called implicit type conversion - that is, R will implicitly (behind the scenes) convert your integer to a double and then add the other double, so that the result is unambiguously a double. 2.1.1.1 Type Conversions R will generally work hard to seamlessly convert variables to different types. So, for instance, TRUE + 2 [1] 3 2L + 3.1415 [1] 5.1415 &quot;abcd&quot; + 3 Error in &quot;abcd&quot; + 3: non-numeric argument to binary operator This conversion doesn’t always work - there’s no clear way to make “abcd” into a number we could use in addition. So instead, R will issue an error. This error pops up frequently when something went wrong with data import and all of a sudden you just tried to take the mean of a set of string/character variables. Whoops. When you want to, you can also use as.xxx() to make the type conversion explicit. So, the analogue of the code above, with explicit conversions would be: as.double(TRUE) + 2 [1] 3 as.double(2L) + 3.1415 [1] 5.1415 as.numeric(&quot;abcd&quot;) + 3 Warning: NAs introduced by coercion [1] NA When we make our intent explicit (convert “abcd” to a numeric variable) we get an NA - a missing value. There’s still no easy way to figure out where “abcd” is on a number line, but our math will still have a result - NA + 3 is NA. If you are unsure what the type of a variable is, use the typeof() function to find out. w &lt;- &quot;a string&quot; x &lt;- 3L y &lt;- 3.1415 z &lt;- FALSE typeof(w) [1] &quot;character&quot; typeof(x) [1] &quot;integer&quot; typeof(y) [1] &quot;double&quot; typeof(z) [1] &quot;logical&quot; 2.1.2 SAS In SAS, there are two basic variable types: numeric and character variables. Thus, SAS does not differentiate between integers and floats or doubles. Functionally, though, the same basic operations can be performed in SAS. As with R, SAS does attempt to implicitly convert variable types, and will notify you that the conversion has taken place in the log file. SAS will attempt to implicitly convert variables when: a character value is assigned to a previously defined numeric variable a character value is used in arithmetic operations a character value is compared to a numeric value using a comparison operator (&lt;, &gt;, &lt;=, &gt;=) a character value is specified in a function that takes numeric arguments Note that implicit conversion does not occur in WHERE statements. (This will make more sense later, but is here for reference) If you want to manually convert a value, the INPUT statement can be used. Unlike in R, the INPUT statement has the ability to read numbers which are formatted differently. For instance proc printto log=&quot;saslog.log&quot; new; data set1; /* This tells SAS we&#39;re defining some variables */ x = 3; y = &#39;3.1415&#39;; z = x * y; /* this is arithmetic, so y will be converted */ x = &#39;3.14159&#39;; /* x previously had a number in it, */ /* so it will be converted to a number here */ zz = y&lt;=2; /* comparison operator: y will be converted */ put z; /* This prints the result to the log */ put x=; put zz=; run; Notice that in SAS, zz, which is the result of the logical statement y&lt;=2, is a numeric variable. The value 0 signifies that the comparison was false. SAS does not have a logical data type, it uses the numeric variable with 0:=FALSE, 1:=TRUE. NOTE: PROCEDURE PRINTTO used (Total process time): real time 0.00 seconds cpu time 0.00 seconds 7 data set1; /* This tells SAS we&#39;re defining some variables */ 8 x = 3; 9 y = &#39;3.1415&#39;; 10 z = x * y; 11 /* this is arithmetic, so y will be converted */ 12 x = &#39;3.14159&#39;; 13 /* x previously had a number in it, */ 14 /* so it will be converted to a number here */ 15 zz = y&lt;=2; 16 /* comparison operator: y will be converted */ 17 18 put z; /* This prints the result to the log */ 19 put x=; 20 put zz=; 21 run; NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column). 10:11 12:7 15:8 9.4245 x=3.14159 zz=0 NOTE: The data set WORK.SET1 has 1 observations and 4 variables. NOTE: DATA statement used (Total process time): real time 0.00 seconds cpu time 0.00 seconds Try it out: Variable types In R Create variables string, integer, decimal, and logical, with types that match the relevant variable names. string &lt;- integer &lt;- decimal &lt;- logical &lt;- Can you get rid of the error that occurs when this chunk is run? logical + decimal integer + decimal string + integer What happens when you add string to string? logical to logical? In SAS Create variables string1 and string2 that each have text/character values. “Bob” and “Jane” might be good options. How does logical operation work with actual character values? What happens if you use string1 and add 3 to it? Answers string &lt;- &quot;hi, I&#39;m a string&quot; integer &lt;- 4L decimal &lt;- 5.412 logical &lt;- TRUE logical + decimal [1] 6.412 integer + decimal [1] 9.412 as.numeric(string) + integer Warning: NAs introduced by coercion [1] NA &quot;abcd&quot; + &quot;defg&quot; Error in &quot;abcd&quot; + &quot;defg&quot;: non-numeric argument to binary operator TRUE + TRUE [1] 2 In R, adding a string to a string creates an error (“non-numeric argument to binary operator”). Adding a logical to a logical, e.g. TRUE + TRUE, results in 2, which is a numeric value. proc printto log=&quot;saslog.log&quot; new; data set1; string1 = &#39;Bob&#39;; string2 = &#39;Jane&#39;; x = string1 &lt; string2; put x=; /* This prints the result to the log */ run; NOTE: PROCEDURE PRINTTO used (Total process time): real time 0.00 seconds cpu time 0.00 seconds 8 data set1; 9 string1 = &#39;Bob&#39;; 10 string2 = &#39;Jane&#39;; 11 x = string1 &lt; string2; 12 put x=; /* This prints the result to the log */ 13 run; x=1 NOTE: The data set WORK.SET1 has 1 observations and 3 variables. NOTE: DATA statement used (Total process time): real time 0.00 seconds cpu time 0.00 seconds 14 SAS will actually compare strings based on the first letter: Bob comes before Jane, so Bob &lt; Jane. proc printto log=&quot;saslog.log&quot; new; data set2; string1 = &#39;Bob&#39;; y = string1 + 3; put y=; run; NOTE: PROCEDURE PRINTTO used (Total process time): real time 0.00 seconds cpu time 0.00 seconds 8 data set2; 9 string1 = &#39;Bob&#39;; 10 y = string1 + 3; 11 put y=; 12 run; NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column). 10:7 NOTE: Invalid numeric data, string1=&#39;Bob&#39; , at line 10 column 7. y=. string1=Bob y=. _ERROR_=1 _N_=1 NOTE: Missing values were generated as a result of performing an operation on missing values. Each place is given by: (Number of times) at (Line):(Column). 1 at 10:15 NOTE: The data set WORK.SET2 has 1 observations and 2 variables. NOTE: DATA statement used (Total process time): real time 0.00 seconds cpu time 0.01 seconds 2.2 Data structures Data structures are more complex arrangements of information than single variables. Of primary interest in statistical programming are the following types of structures:   Homogeneous Heterogeneous 1d vector list 2d matrix data frame (R) or data set (SAS) nd array (R) In the table above, homogeneous means that all entries in the structure must be of the same type. Heterogeneous means that the entries are allowed to be of different types. Figuring out what to call these types with two languages is hard - in SAS, an array is a group of columns of a data set, but in R, it’s a multi-dimensional matrix. In this section, we’ll discuss the generic concepts relevant to both languages. The differences between the two languages will be discussed as appropriate. As there are more similarities than differences, it’s easier to do this in a single section rather than duplicating half of the content. 2.2.1 Homogeneous data structures (R and SAS) R does not have scalar types - even single-value variables are technically vectors of length 1. SAS does have scalar types. If we try to create a heterogeneous vector in R, using the concatenate function, c(), which combines scalar entries into a vector, what happens? c(1, 2, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;) [1] &quot;1&quot; &quot;2&quot; &quot;a&quot; &quot;b&quot; &quot;c&quot; Because there were 3 character entries, the entire vector is now a character vector. Watch Out This behavior can cause some errors - for instance, R does not read in numeric data formatted with commas as numeric data. You may thus get the result x &lt;- c(356, 452, &quot;1,325&quot;) mean(x) Warning in mean.default(x): argument is not numeric or logical: returning NA [1] NA If you are reading in data from a file, this will cause some issues - the whole column of data will be formatted as characters. Keep an eye out for errors of this type. 2.2.1.1 Indexing The 1, 2, and multi-dimensional homogeneous data types should be familiar from e.g. linear algebra and calculus. Single elements of a vector can be extracted using single square brackets, e.g. x[1] will get the first element of the vector x. In a matrix, elements are indexed as row, column, so to get the (2, 2) entry of a matrix x, you would use x[2,2]. This is extended for multi-dimensional arrays in R, with each dimension added, e.g. x[3,1,2] or x[4, 3, 2, 1]. To get a full row or column from a matrix (in both SAS and R) you would use x[1,] (get the first row) or x[,3] (get the 3rd column). To select multiple rows or columns from a matrix, you would use x[, c(1, 3)] in R or x[,{1 3}] in SAS - both options get the first and third column of the matrix, with all rows of data included. In both R and SAS, a:b where a and b are numbers will form a sequence from a to b by 1s. So 1:4 is 1, 2, 3, 4. This is often used to get a set of rows or columns: x[3:4, 1:2]. x &lt;- matrix(1:20, nrow = 5, byrow = T) # Create a matrix with values 1 to 20, 5 rows, and fill by row x [,1] [,2] [,3] [,4] [1,] 1 2 3 4 [2,] 5 6 7 8 [3,] 9 10 11 12 [4,] 13 14 15 16 [5,] 17 18 19 20 x[3:4, 1:2] [,1] [,2] [1,] 9 10 [2,] 13 14 # Gets a submatrix In SAS, the same basic code works (though matrix definition is a bit more manual). proc iml; /* Interactive Matrix Language */ x = {1 2 3 4 5, 6 7 8 9 10, 11 12 13 14 15, 16 17 18 19 20}; y = x[3:4, 1:2]; print x; /* Here, print is used instead of put */ print y; quit; /* exit proc IML */ x 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 y 11 12 16 17 Both R and SAS are 1-indexed languages, so the elements of a list or vector are indexed as 1, 2, 3, 4, …2 As R has logical vectors, it is possible to index a vector using a logical vector of the same length. Try it out # From project Euler # If we list all the natural numbers below 10 that are multiples of 3 or 5, # we get 3, 5, 6 and 9. The sum of these multiples is 23. # Find the sum of all the multiples of 3 or 5 below 1000. # Hint: The modulo operator, `%%`, gives the integer remainder of one number # divided by another. So `a %% b` gives the integer remainder when # dividing `a` by `b`. Modular division is often used to find multiples # of a number. Answers In R: x &lt;- 1:999 # all nums below 1000 m3 &lt;- (x %% 3) == 0 # multiple of 3 m5 &lt;- (x %% 5) == 0 # multiple of 5 m3or5 &lt;- m3 | m5 sum(x[m3or5]) [1] 233168 In SAS: data tmp; do x = 1 to 999; output; end; run; proc summary data=tmp; /* Summarize data */ where (mod(x, 3) = 0) | (mod(x, 5) = 0); /* Keep only obs where x is divisible by 3 or 5 */ var x; /* what variable we want the summary for */ output out=sum_x sum=; /* output sum_x to a new dataset */ run; proc print data = sum_x; /* print our sum_x dataset */ run; Obs TYPE FREQ x 1 0 466 233168 2.2.2 Heterogeneous data structures The heterogeneous data types are not much harder to grasp, as they’re mostly different ways to combine various homogeneous data types. Lists A list is, well, a list - a sequence of potentially different-typed values. Unlike when concatenating values, the list() command in R allows each value to keep its natural type. You can access elements of a list using [] (this will extract a subset of the list items) or [[]], which will extract a single item from the list. x &lt;- list(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, 1, 2, 3) x [[1]] [1] &quot;a&quot; [[2]] [1] &quot;b&quot; [[3]] [1] &quot;c&quot; [[4]] [1] 1 [[5]] [1] 2 [[6]] [1] 3 x[[3]] [1] &quot;c&quot; x[[4]] + x[[5]] [1] 3 x[1:2] # This will work [[1]] [1] &quot;a&quot; [[2]] [1] &quot;b&quot; x[[1:2]] # This won&#39;t work Error in x[[1:2]]: subscript out of bounds Some lists consist of named variables. These list components can be accessed either by index (as above) or by name, using the $ operator. Names which have spaces or special characters must be enclosed in backticks (next to the 1 on the keyboard). Named components can also be accessed using the [[ ]] operator. dog &lt;- list(name = &quot;Edison Vanderplas&quot;, age = 8, breed = &quot;Jack Russell Terrorist&quot;, `favorite toy` = &quot;a blue and orange stuffed duck. Or rawhide.&quot;, `link(video)` = &quot;https://youtu.be/zVeoQTOTIuQ&quot;) dog $name [1] &quot;Edison Vanderplas&quot; $age [1] 8 $breed [1] &quot;Jack Russell Terrorist&quot; $`favorite toy` [1] &quot;a blue and orange stuffed duck. Or rawhide.&quot; $`link(video)` [1] &quot;https://youtu.be/zVeoQTOTIuQ&quot; dog$name [1] &quot;Edison Vanderplas&quot; dog$breed [1] &quot;Jack Russell Terrorist&quot; dog$`favorite toy` [1] &quot;a blue and orange stuffed duck. Or rawhide.&quot; dog[[&quot;link(video)&quot;]] [1] &quot;https://youtu.be/zVeoQTOTIuQ&quot; Most complicated structures in R are lists. You should be able to access any of the pieces of a list using a combination of named references and indexing. You can get a sense of the structure of a list (or any other object) in R using the str() command. str(dog) List of 5 $ name : chr &quot;Edison Vanderplas&quot; $ age : num 8 $ breed : chr &quot;Jack Russell Terrorist&quot; $ favorite toy: chr &quot;a blue and orange stuffed duck. Or rawhide.&quot; $ link(video) : chr &quot;https://youtu.be/zVeoQTOTIuQ&quot; Lists can also contain other lists. When accessing a list-within-a-list, just add another index or name reference (see below). grocery_list &lt;- list( dairy = list(&quot;asiago&quot;, &quot;fontina&quot;, &quot;mozzarella&quot;, &quot;blue cheese&quot;), baking = list(&quot;flour&quot;, &quot;yeast&quot;, &quot;salt&quot;), canned_goods = list(&quot;pepperoni&quot;, &quot;pizza sauce&quot;, &quot;olives&quot;), meat = list(&quot;bacon&quot;, &quot;sausage&quot;, &quot;anchovies&quot;), veggies = list(&quot;bell pepper&quot;, &quot;onion&quot;, &quot;scallions&quot;, &quot;tomatoes&quot;, &quot;basil&quot;) ) ick &lt;- c(grocery_list[[4]][2:3], grocery_list$canned_goods[[3]]) ick [[1]] [1] &quot;sausage&quot; [[2]] [1] &quot;anchovies&quot; [[3]] [1] &quot;olives&quot; crust_ingredients &lt;- c(grocery_list$baking, &quot;water&quot;) crust_ingredients [[1]] [1] &quot;flour&quot; [[2]] [1] &quot;yeast&quot; [[3]] [1] &quot;salt&quot; [[4]] [1] &quot;water&quot; essential_toppings &lt;- c(grocery_list$dairy[3], grocery_list$canned_goods[2]) essential_toppings [[1]] [1] &quot;mozzarella&quot; [[2]] [1] &quot;pizza sauce&quot; yummy_toppings &lt;- c(grocery_list$dairy[c(1, 2, 4)], grocery_list$meat[1], grocery_list[[5]][c(3, 5)]) yummy_toppings [[1]] [1] &quot;asiago&quot; [[2]] [1] &quot;fontina&quot; [[3]] [1] &quot;blue cheese&quot; [[4]] [1] &quot;bacon&quot; [[5]] [1] &quot;scallions&quot; [[6]] [1] &quot;basil&quot; There are also lists in SAS IML which function similarly to lists in R. To create a named object in a list, precede the name with #. In SAS, the $ operator can be used to get items from a list, using either proc iml; grocery_list = [ #dairy = [&quot;asiago&quot;, &quot;fontina&quot;, &quot;mozzarella&quot;, &quot;blue cheese&quot;], #baking = [&quot;flour&quot;, &quot;yeast&quot;, &quot;salt&quot;], #canned = [&quot;pepperoni&quot;, &quot;pizza sauce&quot;, &quot;olives&quot;], #meat = [&quot;bacon&quot;, &quot;sausage&quot;, &quot;anchovies&quot;], #veggies= [&quot;bell pepper&quot;, &quot;onion&quot;, &quot;scallions&quot;, &quot;tomatoes&quot;, &quot;basil&quot;] ]; /* print only works on matrices and vectors */ /* so we&#39;ll cheat and load another library to print lists */ package load ListUtil; /* run ListPrint(grocery_list); */ /* This would print the thing, but it&#39;s long */ ick = [grocery_list$&quot;canned&quot;$3, grocery_list$4$2, grocery_list$4$3]; crust = grocery_list$&quot;baking&quot;; call ListAddItem(crust, &quot;water&quot;); /* add an item to a list */ essential_toppings = [grocery_list$&quot;dairy&quot;$3, grocery_list$&quot;canned&quot;$2]; yummy_toppings = [grocery_list$&quot;dairy&quot;$1, grocery_list$&quot;dairy&quot;$2, grocery_list$&quot;dairy&quot;$4, grocery_list$&quot;meat&quot;$1, grocery_list$5$3] ; /* The || is a concatenation operator, like c(). */ /* It is inefficient for large data sets */ run ListPrint(ick); run ListPrint(crust); run ListPrint(yummy_toppings); quit; ——— List = ick——— Item 1 olives Item 2 sausage Item 3 anchovies ——— List = crust——— Item 1 flour Item 2 yeast Item 3 salt Item 4 water ——— List = yummy_toppings——— Item 1 asiago Item 2 fontina Item 3 blue cheese Item 4 bacon Item 5 scallions Try it out Using the list of pizza toppings above as a starting point, make your own list of pizza toppings organized by grocery store section (approximately). Create your own vectors of yummy, essential, and ick toppings, using R and SAS. Data frames (R only) A data frame is a special type of list - one in which each element in the list is a vector of the same length. If you put these vectors side-by-side, you get a table of data that looks like a spreadsheet. When you examine the structure of a data frame, as shown below, you get each column shown in a row, with its type and the first few values in the column. The head() command shows the first 6 rows of a data frame (enough to see what’s there, not enough to overflow your screen). head(mtcars) ## A data frame included in base R mpg cyl disp hp drat wt qsec vs am gear carb Mazda RX4 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 Mazda RX4 Wag 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 Datsun 710 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 Hornet 4 Drive 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 Hornet Sportabout 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 Valiant 18.1 6 225 105 2.76 3.460 20.22 1 0 3 1 str(mtcars) &#39;data.frame&#39;: 32 obs. of 11 variables: $ mpg : num 21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ... $ cyl : num 6 6 4 6 8 6 8 4 4 6 ... $ disp: num 160 160 108 258 360 ... $ hp : num 110 110 93 110 175 105 245 62 95 123 ... $ drat: num 3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ... $ wt : num 2.62 2.88 2.32 3.21 3.44 ... $ qsec: num 16.5 17 18.6 19.4 17 ... $ vs : num 0 0 1 1 0 1 0 1 1 1 ... $ am : num 1 1 1 0 0 0 0 0 0 0 ... $ gear: num 4 4 4 3 3 3 3 4 4 4 ... $ carb: num 4 4 1 1 2 1 4 2 2 4 ... You can change column values or add new columns easily using assignment. It’s also easy to access specific columns to perform summary operations. Often, it is useful to know the dimensions of a data frame. The number of rows can be obtained by using nrow(df) and similarly, the columns can be obtained using ncol(df) (or, get both with dim()). There is also an easy way to get a summary of each column in the data frame, using summary(). mtcars$gpm &lt;- 1/mtcars$mpg # gpm is sometimes used to assess efficiency summary(mtcars$gpm) Min. 1st Qu. Median Mean 3rd Qu. Max. 0.02950 0.04386 0.05208 0.05423 0.06483 0.09615 summary(mtcars$mpg) Min. 1st Qu. Median Mean 3rd Qu. Max. 10.40 15.43 19.20 20.09 22.80 33.90 summary(mtcars) mpg cyl disp hp Min. :10.40 Min. :4.000 Min. : 71.1 Min. : 52.0 1st Qu.:15.43 1st Qu.:4.000 1st Qu.:120.8 1st Qu.: 96.5 Median :19.20 Median :6.000 Median :196.3 Median :123.0 Mean :20.09 Mean :6.188 Mean :230.7 Mean :146.7 3rd Qu.:22.80 3rd Qu.:8.000 3rd Qu.:326.0 3rd Qu.:180.0 Max. :33.90 Max. :8.000 Max. :472.0 Max. :335.0 drat wt qsec vs Min. :2.760 Min. :1.513 Min. :14.50 Min. :0.0000 1st Qu.:3.080 1st Qu.:2.581 1st Qu.:16.89 1st Qu.:0.0000 Median :3.695 Median :3.325 Median :17.71 Median :0.0000 Mean :3.597 Mean :3.217 Mean :17.85 Mean :0.4375 3rd Qu.:3.920 3rd Qu.:3.610 3rd Qu.:18.90 3rd Qu.:1.0000 Max. :4.930 Max. :5.424 Max. :22.90 Max. :1.0000 am gear carb gpm Min. :0.0000 Min. :3.000 Min. :1.000 Min. :0.02950 1st Qu.:0.0000 1st Qu.:3.000 1st Qu.:2.000 1st Qu.:0.04386 Median :0.0000 Median :4.000 Median :2.000 Median :0.05208 Mean :0.4062 Mean :3.688 Mean :2.812 Mean :0.05423 3rd Qu.:1.0000 3rd Qu.:4.000 3rd Qu.:4.000 3rd Qu.:0.06483 Max. :1.0000 Max. :5.000 Max. :8.000 Max. :0.09615 Missing variables in an R data frame are indicated with NA. Try it out The dataset state.x77 contains information on US state statistics in the 1970s. By default, it is a matrix, but we can easily convert it to a data frame, as shown below. data(state) state_facts &lt;- data.frame(state.x77) state_facts &lt;- cbind(state = row.names(state_facts), state_facts, stringsAsFactors = F) # State names were stored as row labels # Store them in a variable instead, and add it to the data frame row.names(state_facts) &lt;- NULL # get rid of row names head(state_facts) state Population Income Illiteracy Life.Exp Murder HS.Grad Frost Area 1 Alabama 3615 3624 2.1 69.05 15.1 41.3 20 50708 2 Alaska 365 6315 1.5 69.31 11.3 66.7 152 566432 3 Arizona 2212 4530 1.8 70.55 7.8 58.1 15 113417 4 Arkansas 2110 3378 1.9 70.66 10.1 39.9 65 51945 5 California 21198 5114 1.1 71.71 10.3 62.6 20 156361 6 Colorado 2541 4884 0.7 72.06 6.8 63.9 166 103766 How many rows and columns does it have? Can you find at least 3 ways to get that information? The Illiteracy column contains the percent of the population of each state that is illiterate. Calculate the number of people in each state who are illiterate, and store that in a new column called TotalNumIlliterate. Note: Population contains the population in thousands. Calculate the average population density of each state (population per square mile) and store it in a new column PopDensity. Using the R reference card, can you find functions that you can combine to get the state with the minimum population density? # 3 ways to get rows and columns str(state_facts) &#39;data.frame&#39;: 50 obs. of 9 variables: $ state : chr &quot;Alabama&quot; &quot;Alaska&quot; &quot;Arizona&quot; &quot;Arkansas&quot; ... $ Population: num 3615 365 2212 2110 21198 ... $ Income : num 3624 6315 4530 3378 5114 ... $ Illiteracy: num 2.1 1.5 1.8 1.9 1.1 0.7 1.1 0.9 1.3 2 ... $ Life.Exp : num 69 69.3 70.5 70.7 71.7 ... $ Murder : num 15.1 11.3 7.8 10.1 10.3 6.8 3.1 6.2 10.7 13.9 ... $ HS.Grad : num 41.3 66.7 58.1 39.9 62.6 63.9 56 54.6 52.6 40.6 ... $ Frost : num 20 152 15 65 20 166 139 103 11 60 ... $ Area : num 50708 566432 113417 51945 156361 ... dim(state_facts) [1] 50 9 nrow(state_facts) [1] 50 ncol(state_facts) [1] 9 # Illiteracy state_facts$TotalNumIlliterate &lt;- state_facts$Population * 1e3 * (state_facts$Illiteracy/100) # Population Density state_facts$PopDensity &lt;- state_facts$Population * 1e3/state_facts$Area # in people per square mile # minimum population state_facts$state[which.min(state_facts$PopDensity)] [1] &quot;Alaska&quot; Data Sets (SAS) The SAS data set structure is similar to a R data frame. This is a schematic of a data set as taken from the SAS documentation The biggest difference is that in SAS, missing values are indicated with .. SAS datasets also come with a description which is attached to the table. The descriptor portion of the data set records names of variables (and attributes), numbers of observations, and date/time stamps of creation and updates. /* Data source: http://blog.yhat.com/posts/7-funny-datasets.html */ data mathMJ; title &#39;Average math test scores under the influence of LSD&#39;; input Drugs Score; datalines; 1.17 78.93 2.97 58.20 3.26 67.47 4.69 37.47 5.83 45.65 6.00 32.92 6.41 29.97 ; /* Describe the dataset */ proc datasets; contents data = mathMJ; run; proc print data = mathMJ; run; Average math test scores under the influence of LSD Directory Libref WORK Engine V9 Physical Name /tmp/SAS_work13A5000017D3_silicon Filename /tmp/SAS_work13A5000017D3_silicon Inode Number 11276931 Access Permission rwx—— Owner Name susan File Size 4KB File Size (bytes) 4096 # Name Member Type File Size Last Modified 1 MATHMJ DATA 128KB 05/29/2020 10:35:32 2 SASMAC3 CATALOG 20KB 05/29/2020 10:35:32 Average math test scores under the influence of LSD Data Set Name WORK.MATHMJ Observations 7 Member Type DATA Variables 2 Engine V9 Indexes 0 Created 05/29/2020 10:35:32 Observation Length 16 Last Modified 05/29/2020 10:35:32 Deleted Observations 0 Protection Compressed NO Data Set Type Sorted NO Label Data Representation SOLARIS_X86_64, LINUX_X86_64, ALPHA_TRU64, LINUX_IA64 Encoding latin1 Western (ISO) Engine/Host Dependent Information Data Set Page Size 65536 Number of Data Set Pages 1 First Data Page 1 Max Obs per Page 4061 Obs in First Data Page 7 Number of Data Set Repairs 0 Filename /tmp/SAS_work13A5000017D3_silicon/mathmj.sas7bdat Release Created 9.0401M6 Host Created Linux Inode Number 11276941 Access Permission rw-rw-r– Owner Name susan File Size 128KB File Size (bytes) 131072 Alphabetic List of Variables and Attributes # Variable Type Len 1 Drugs Num 8 2 Score Num 8 Average math test scores under the influence of LSD Obs Drugs Score 1 1.17 78.93 2 2.97 58.20 3 3.26 67.47 4 4.69 37.47 5 5.83 45.65 6 6.00 32.92 7 6.41 29.97 2.3 Control structures 2.3.1 If statements If statements are just about as simple in programming as they are in real life. Figure 2.2: Source In general, the structure of an if statement is if (condition) then { # do something here } If the condition is true, the inner code will be executed. Otherwise, nothing happens. You can add an else statement that will execute if the condition is not true if (condition) then { # do something } else { # do a different thing } And in some languages, you can even have many sets of if statements: if (condition) { # do something } else if (condition 2) { # do something else } else { # do a third thing } Note that this could also be written (perhaps more clearly) as: if (condition) { # do something } else { if (condition 2) { # do something else } else { # do a third thing } } That is, condition 2 is only checked once it is known that condition is false. Often, programmers use logic flow maps, like the one shown below, to map out a logical sequence and ensure that every possible value is handled appropriately. If statement flow diagram, from wikimedia commons The syntax for conditional statements using if/then logic is shown below using an example where Santa must determine which members of a household will receive a toy for Christmas and which members will receive coal.3 Example In R: tmp &lt;- data.frame(name = c(&quot;Alex&quot;, &quot;Edison&quot;, &quot;Susan&quot;, &quot;Ryan&quot;), status = c(&quot;naughty&quot;, &quot;nice&quot;, NA, &quot;neutral&quot;), stringsAsFactors = F) # Santa&#39;s decision process if (tmp$status == &quot;naughty&quot;) { tmp$present &lt;- &quot;coal&quot; } else { tmp$present &lt;- &quot;toy&quot; } Warning in if (tmp$status == &quot;naughty&quot;) {: the condition has length &gt; 1 and only the first element will be used tmp name status present 1 Alex naughty coal 2 Edison nice coal 3 Susan &lt;NA&gt; coal 4 Ryan neutral coal What happened? When evaluating if statements, R does not evaluate each entry in the vector tmp$status separately. Instead, it takes the first value and issues a warning message. One option would be to use a loop, and examine each row in the data set separately. We’ll talk about loops in the next subsection. Another option is to use the ifelse() function, which is ifelse(condition, thing to do if condition is true, thing to do if condition is false) tmp$present &lt;- ifelse(tmp$status == &quot;naughty&quot;, &quot;coal&quot;, &quot;toy&quot;) tmp name status present 1 Alex naughty coal 2 Edison nice toy 3 Susan &lt;NA&gt; &lt;NA&gt; 4 Ryan neutral toy When R evaluates a missing value, (so ? NA == “naughty”), the result is NA. This is fine for us - if we don’t have data on whether someone is naughty or nice, maybe we don’t need to give them a present at all. But “neutral” is evaluated as getting a toy. Do we want that to happen? Maybe not. We might have to nest ifelse statements to solve this issue… tmp$present &lt;- ifelse(tmp$status == &quot;naughty&quot;, &quot;coal&quot;, ifelse(tmp$status == &quot;nice&quot;, &quot;toy&quot;, NA)) tmp name status present 1 Alex naughty coal 2 Edison nice toy 3 Susan &lt;NA&gt; &lt;NA&gt; 4 Ryan neutral &lt;NA&gt; In SAS: In a data step: data santa; input name $ status $; datalines; Edison nice Alex naughty Susan . Ryan neutral ; /* Modify santa_list and make a new dataset, present_list */ data presents; set santa; if status = &quot;naughty&quot; then present = &quot;coal&quot;; else present = &quot;toy&quot;; run; /* must end with run if no datalines option */ proc print data=presents; run; Obs name status present 1 Edison nice toy 2 Alex naughty coal 3 Susan toy 4 Ryan neutral toy Note that ., or missing data is handled the same as ‘nice’. That might not be what we wanted… this is the natural thing to do, right? data santa; input name $ status $; datalines; Edison nice Alex naughty Susan . Ryan neutral ; /* Modify santa_list and make a new dataset, present_list */ data presents; set santa; if status = &quot;naughty&quot; then present = &quot;coal&quot;; else (if status = &quot;nice&quot; then present = &quot;toy&quot; else present = .); run; /* must end with run if no datalines option */ proc print data=presents; run; SAS doesn’t handle nested if statements very well - they can be ambiguous. Instead, SAS documentation suggests using do; and end; to denote the start and end points of each if statement (like the {} in R). data santa; input name $ status $; datalines; Edison nice Alex naughty Susan . Ryan neutral ; data presents; set santa; if status = &quot;naughty&quot; then do; present = &quot;coal&quot;; end; else if status = &quot;nice&quot; then do; present = &quot;toy&quot;; end; else do; present = .; end; run; proc print data=presents; run; Obs name status present 1 Edison nice toy 2 Alex naughty coal 3 Susan . 4 Ryan neutral . Interestingly, if you set a character variable to be missing, SAS converts it to ‘.’. So, if we actually want to have the value be missing, we can set it to an empty string. data santa; input name $ status $; datalines; Edison nice Alex naughty Susan . Ryan neutral ; data presents; set santa; if status = &quot;naughty&quot; then do; present = &quot;coal&quot;; end; else if status = &quot;nice&quot; then do; present = &quot;toy&quot;; end; else do; present = &#39;&#39;; end; run; proc print data=presents; run; Obs name status present 1 Edison nice toy 2 Alex naughty coal 3 Susan 4 Ryan neutral Now things work the way we expected them to work. There are more complicated if-statement like control structures, such as switch statements, which can save time and typing. In the interests of simplicity, we will skip these for now, as any conditional can be implemented with sequences of if statements in the proper order. If you would like to read about switch statements, here are links to SAS case statement documentation and base R switch statement explanation and documentation. Try it out The sample() function selects a random sample of entries from a vector. Suppose we sample a random vector \\(x\\) with 10 entries. Write one or more if statements to fulfill the following conditions if \\(x\\) is divisible by 2, \\(y\\) should be positive; otherwise, it should be negative. if \\(x\\) is divisible by 3, \\(y\\) should have a magnitude of 2; otherwise, it should have a magnitude of 1. It may be helpful to define separate variables y_mag and y_sign and then multiply them afterwards. Once you have found the value of \\(y\\) compute \\(\\text{sum}(x * y)\\). You may use the following R and SAS code skeletons to set the problem up. set.seed(342502837) x &lt;- sample(1:50, size = 20, replace = F) # Conditional statements go here sum(x * y) [1] 1567.609 proc iml; call randseed(342502837); x = sample(1:50, 20)`; create sampledata from x [colname = &quot;x&quot;]; append from x; close; quit; data xy; set sampledata; /* Conditional statements go here */ /* Leave this so that the code below works */ res = x * y; run; proc summary data=xy; /* Summarize data */ var res; /* what variable we want the summary for */ output out=tmpsum sum=; /* output tmpsum to a new dataset */ run; proc print data = xy; /* print our original dataset to check result */ var x y res; sum res; run; proc print data = tmpsum; /* print our tmpsum dataset */ run; Solutions R Solution set.seed(342502837) x &lt;- sample(1:50, size = 20, replace = F) y_sign &lt;- ifelse(x %% 2 == 0, 1, -1) y_mag &lt;- ifelse(x %% 3 == 0, 2, 1) y &lt;- y_sign * y_mag sum(x * y) [1] 157 SAS Solution proc iml; call randseed(342502837); x = sample(1:50, 20)`; create sampledata from x [colname = &quot;x&quot;]; append from x; close; quit; data xy; set sampledata; y_sign = 0 * x; y_mag = 0 * x; /* Conditional statements go here */ if MOD(x, 2) = 0 then y_sign = 1; else y_sign = -1; if MOD(x, 3) = 0 then y_mag = 2; else y_mag = 1; y = y_sign * y_mag; res = x * y; run; proc summary data=xy; /* Summarize data */ var res; /* what variable we want the summary for */ output out=tmpsum sum=; /* output tmpsum to a new dataset */ run; proc print data = xy; /* print our original dataset to check result */ var x y res; sum res; run; proc print data = tmpsum; /* print our tmpsum dataset */ run; Obs x y res 1 44 1 44 2 42 2 84 3 1 -1 -1 4 7 -1 -7 5 42 2 84 6 13 -1 -13 7 27 -2 -54 8 19 -1 -19 9 41 -1 -41 10 16 1 16 11 6 2 12 12 44 1 44 13 26 1 26 14 48 2 96 15 22 1 22 16 15 -2 -30 17 40 1 40 18 1 -1 -1 19 27 -2 -54 20 13 -1 -13 235 Obs TYPE FREQ res 1 0 20 235 See this to understand how the print statement works and how to add column summary values. 2.3.2 Loops Often, we need to do a single task many times - for instance, we may need to calculate the average data value for each week, using daily data. Rather than typing out 52 different iterations of the same code, it is likely easier to type out one single block of code which contains the steps necessary to complete one instance of the task, and then leverage variables to ensure that each task is completed the correct number of times, using the correct inputs. Let us start with the most generic loop written in pseudocode (code that won’t work, but provides the general idea of the steps which are taken) loop_invocation(iteration variable, exit condition) { # Steps to repeat } We use the loop_invocation function to indicate what type of loop we use. We have at least one iteration variable that indicates where in the looping process we currently are. This may be an index (if we want to do something 500 times, it would take values from 1 to 500), or it may take a more complicated sequence of values (for instance, if we are testing convergence, we might put some sort of delta variable as the iteration variable). Most loops also have an explicit exit condition that is part of the loop invocation; more rarely, a loop may depend on break statements that cause the control flow of the code to exit. Without some sort of exit condition, our program would run forever, which is… not optimal. 2.3.2.1 Count controlled loops (FOR loops) In a for loop, the steps in the loop body repeat a specified number of times. That is, for each value in a sequence, the steps within the loop are repeated. Example: Santa and if/else + loops in R (plus some debugging strategies) For instance, suppose we want to revisit our R Santa example from the previous section. The original if/else code we wrote in R didn’t work, because R evaluates if statements using a single (scalar or vector of length 1) condition. If we add a loop around that code, we can evaluate only one row at a time. We need to check every row, so we’ll iterate over 1:nrow(tmp) - it’s better to get the upper bound from the data frame, rather than just using 4 - if we add another entry, the code will still work if we’re using nrow(tmp) to define how many iterations we need. We start by defining our data frame: tmp &lt;- data.frame(name = c(&quot;Alex&quot;, &quot;Edison&quot;, &quot;Susan&quot;, &quot;Ryan&quot;), status = c(&quot;naughty&quot;, &quot;nice&quot;, NA, &quot;neutral&quot;), stringsAsFactors = F) And then we add the basic loop syntax: for (i in 1:nrow(tmp)) { } For some reason, i is often used as the iteration variable (with j and k for nested loops). What this loop says is that i will first take on the value 1, then 2, then 3, then 4. On each iteration, i will advance to the next value in the vector of options we have provided. Now we need to add the middle part by adapting the conditional statement we used before so that it looks at only the ith row. I’ve also added the catch-all else condition that assigns NA for any value that isn’t “naughty” or “nice”. It’s good practice to initialize your variable (create a column for it) ahead of time and set the variable to a default value. tmp$present &lt;- NA # Initialize column and set to NA by default for (i in 1:nrow(tmp)) { # Santa&#39;s decision process if (tmp$status[i] == &quot;naughty&quot;) { tmp$present[i] &lt;- &quot;coal&quot; } else if (tmp$status[i] == &quot;nice&quot;) { tmp$present[i] &lt;- &quot;toy&quot; } else { tmp$present[i] &lt;- NA_character_ # use a special NA value that has # character type to avoid any issues } } Error in if (tmp$status[i] == &quot;naughty&quot;) {: missing value where TRUE/FALSE needed Well, that didn’t work! We can see that the loop stopped at i = 3 by printing out the value of i - because the loop failed, i will still contain the value which caused the loop to stop. i [1] 3 tmp[i,] # print tmp at that point name status present 3 Susan &lt;NA&gt; &lt;NA&gt; Combining this information with the error above, we can guess that R stopped evaluating the loop because the if statement returned NA (missing) instead of TRUE or FALSE. if/else statements in R can’t evaluate to NA, so we need to restructure our conditional statement - first, we’ll test for NA values, then, we can test for naughty and nice, and we’ll keep the catch-all statement at the bottom. We’ll test for an NA value using the function is.na(). tmp$present &lt;- NA # Initialize column and set to NA by default for (i in 1:nrow(tmp)) { # Santa&#39;s decision process if (is.na(tmp$status[i])) { tmp$present[i] &lt;- NA_character_ } else if (tmp$status[i] == &quot;naughty&quot;) { tmp$present[i] &lt;- &quot;coal&quot; } else if (tmp$status[i] == &quot;nice&quot;) { tmp$present[i] &lt;- &quot;toy&quot; } else { tmp$present[i] &lt;- NA_character_ } } tmp name status present 1 Alex naughty coal 2 Edison nice toy 3 Susan &lt;NA&gt; &lt;NA&gt; 4 Ryan neutral &lt;NA&gt; Now the if/else logic works exactly as intended. This is longer than the version using ifelse(), but it is perhaps more readable. In most cases in R and SAS, it is possible to write code without needing loops at all, because both languages are vector-based - they will often use vectorized functions which implicitly loop over each row without having to write a loop to do so. ifelse() is a vectorized version of if() {} else {}. Here is an example of the most basic for loop logic - printing the numbers 1 through 10 - in both R and SAS. SAS code is provided for both PROC IML and DATA steps. In R: # R Example loop for (i in 1:10) { print(i) } [1] 1 [1] 2 [1] 3 [1] 4 [1] 5 [1] 6 [1] 7 [1] 8 [1] 9 [1] 10 In SAS IML: /* SAS IML example loop */ proc iml; do i = 1 to 10; print i; end; /* This ends the loop definition */ quit; i 1 i 2 i 3 i 4 i 5 i 6 i 7 i 8 i 9 i 10 In SAS DATA: /* SAS DATA step example loop */ proc printto log=&quot;saslog.log&quot; new; /* to shows output log in bookdown */ data A; do i = 1 to 10; put i=; end; /* This ends the loop definition */ run; NOTE: PROCEDURE PRINTTO used (Total process time): real time 0.00 seconds cpu time 0.00 seconds 4 data A; 5 do i = 1 to 10; 6 put i=; 7 end; /* This ends the loop definition */ 8 run; i=1 i=2 i=3 i=4 i=5 i=6 i=7 i=8 i=9 i=10 NOTE: The data set WORK.A has 1 observations and 1 variables. NOTE: DATA statement used (Total process time): real time 0.00 seconds cpu time 0.01 seconds Another explanation of for loops is available at Khan Academy. While the most straighforward (and common) case of for-loop use in practice is to count from 1 to N, both R and SAS allow for loops to use other sequence structures. In R: R allows loops to occur over any vector… even randomly generated numbers, or nonnumeric vectors (say, a character vector of URLs). x &lt;- rnorm(5) # Generate 5 normal (0,1) samples for (i in x) { print(i^2) } [1] 4.500349 [1] 3.820737 [1] 2.656216 [1] 1.120775 [1] 2.10086 We can also iterate by non-integer values using seq(from = , to = , by = ) # This loop counts down in 1/2 units from 5 to 0 for (i in seq(5, 0, -.5)) { # do nothing } In SAS: We can iterate by non-integer values: proc printto log=&quot;saslog.log&quot; new; /* to shows output log in bookdown */ data A; y = 0; do i = 5 to 0 by -0.5; put i=; end; run; NOTE: PROCEDURE PRINTTO used (Total process time): real time 0.00 seconds cpu time 0.00 seconds 3 data A; 4 y = 0; 5 do i = 5 to 0 by -0.5; 6 put i=; 7 end; 8 run; i=5 i=4.5 i=4 i=3.5 i=3 i=2.5 i=2 i=1.5 i=1 i=0.5 i=0 NOTE: The data set WORK.A has 1 observations and 2 variables. NOTE: DATA statement used (Total process time): real time 0.00 seconds cpu time 0.00 seconds We can even add additional conditions: proc printto log=&quot;saslog.log&quot; new; /* to shows output log in bookdown */ data A; y = 0; do i = 5 to 0 by -0.5 while (i**2 &gt; 1); put i=; end; run; NOTE: PROCEDURE PRINTTO used (Total process time): real time 0.00 seconds cpu time 0.00 seconds 3 data A; 4 y = 0; 5 do i = 5 to 0 by -0.5 while (i**2 &gt; 1); 6 put i=; 7 end; 8 run; i=5 i=4.5 i=4 i=3.5 i=3 i=2.5 i=2 i=1.5 NOTE: The data set WORK.A has 1 observations and 2 variables. NOTE: DATA statement used (Total process time): real time 0.00 seconds cpu time 0.00 seconds Try it out In R: The beepr package plays sounds in R to alert you when your code has finished running (or just to annoy your friends and classmates). (Documentation) You can install the package using the following command: install.packages(&quot;beepr&quot;) (if you are using Linux you will also need to make sure one of paplay, aplay, or vlc is installed) Load the library and write a for loop which plays the 10 different sounds corresponding to integers 1 through 10. library(beepr) # load the beepr library beep(sound = 1) # sound is any integer between 1 and 10. It may be helpful to add the command Sys.sleep(5) into your loop to space out the noises so that they can be heard individually. In SAS: Write a for loop which will output the first 30 fibbonacci numbers. You can use the following code as a starting point: /* SAS IML example loop */ proc iml; current = 1; prev = 0; quit; R Solution: library(beepr) for (i in 1:10) { beep(sound = i) Sys.sleep(5) } SAS Solution: /* SAS IML example loop */ proc iml; current = 1; prev = 0; do i = 1 to 30; new = current + prev; prev = current; current = new; print current; end; /* This ends the loop definition */ quit; current 1 current 2 current 3 current 5 current 8 current 13 current 21 current 34 current 55 current 89 current 144 current 233 current 377 current 610 current 987 current 1597 current 2584 current 4181 current 6765 current 10946 current 17711 current 28657 current 46368 current 75025 current 121393 current 196418 current 317811 current 514229 current 832040 current 1346269 2.3.2.2 Condition-controlled loops (WHILE, DO WHILE) Frequently, we do not know how many times a loop will need to execute a priori. We might be converging on a value, and want to repeat the calculation until the new value is within an acceptably epsilon of the previous iteration. In these cases, it can be helpful to use a WHILE loop, which loops while the condition is true (another variant, the do-while loop, is similar, except that a do-while loop will always execute once, and checks the condition at the end of the iteration). If a WHILE loop condition is never falsified, the loop will continue forever. Thus, it is usually wise to include a loop counter as well, and a condition to terminate the loop if the counter value is greater than a certain threshold. Example: Let’s solve the Basel problem in R and SAS using WHILE loops - we’ll repeat the calculation until the value changes by less than 0.000001. The Basel problem is the problem of calculating the precise infinite summation \\[\\sum_{n=1}^\\infty \\frac{1}{n^2}\\] We’ll stick to calculating it computationally. In R: # Start out by defining your starting values outside of the loop i &lt;- 1 basel_value &lt;- 0 # initial guess prev_basel_value &lt;- -Inf # previous value while (abs(basel_value - prev_basel_value) &gt; 0.000001) { prev_basel_value &lt;- basel_value # update condition basel_value &lt;- basel_value + 1/i^2 i &lt;- i + 1 # Prevent infinite loops if (i &gt; 1e6) { break } # Monitor the loop to know that it&#39;s behaving if (i %% 200 == 0) { print(c(&#39;i = &#39; = i, &#39;prev&#39; = prev_basel_value, &#39;current&#39; = basel_value, diff = basel_value - prev_basel_value)) } } i = prev current diff 2.000000e+02 1.639896e+00 1.639922e+00 2.525189e-05 i = prev current diff 4.000000e+02 1.642425e+00 1.642431e+00 6.281368e-06 i = prev current diff 6.000000e+02 1.643263e+00 1.643266e+00 2.787060e-06 i = prev current diff 8.000000e+02 1.643682e+00 1.643683e+00 1.566414e-06 i = prev current diff 1.000000e+03 1.643933e+00 1.643934e+00 1.002003e-06 i [1] 1001 basel_value [1] 1.643935 prev_basel_value [1] 1.643934 in SAS: proc iml; i = 1; basel = 0; prev = -1; do while((basel - prev) &gt; 1e-6); prev = basel; basel = basel + 1/i**2; /* ** is the exponent operator */ i = i + 1; if i &gt; 1e6 then do; leave; end; if MOD(i, 200) = 0 then do; print i, prev, basel; end; end; print i, basel; quit; i 200 prev 1.6398963 basel 1.6399215 i 400 prev 1.6424247 basel 1.6424309 i 600 prev 1.6432632 basel 1.643266 i 800 prev 1.6436817 basel 1.6436833 i 1000 prev 1.6439326 basel 1.6439336 i 1001 basel 1.6439346 Another explanation of while loops is available at Khan Academy. Try it out Write a while loop in R and in SAS to calculate \\(\\displaystyle \\lim_{x \\rightarrow 4} \\frac{2 - \\sqrt{x}}{4-x}\\) by starting at 3 and halving the distance to 4 with each iteration. Exit the loop when you are within 1e-6 of the value computed on the previous iteration, or when you are within 1e-6 from 4. Which exit condition did you hit first? How do you know? Solutions: x &lt;- 3 dist &lt;- 4 - x current_value &lt;- 0 prev_value &lt;- -Inf while (abs(current_value - prev_value) &gt; 1e-6 &amp; dist &gt; 1e-6) { prev_value &lt;- current_value dist &lt;- dist/2 x &lt;- 4 - dist current_value &lt;- (2 - sqrt(x))/(4-x) } c(x = x, dist = dist, current_value = current_value, d_value = abs(current_value - prev_value)) x dist current_value d_value 3.999939e+00 6.103516e-05 2.500010e-01 9.536961e-07 Before \\(x\\) got to 4 - 1e-6, the change in f(x) became less than 1e-6. proc iml; x = 3; dist = 4 - x; fx = 0; prev_fx = 1; dfx = abs(fx - prev_fx); do while(dfx &gt; 1e-6 &amp; dist &gt; 1e-6); prev_fx = fx; dist = dist/2; x = 4 - dist; fx = (2 - sqrt(x))/(4 - x); dfx = abs(fx - prev_fx); end; print x, dist, fx, dfx; quit; x 3.999939 dist 0.000061 fx 0.250001 dfx 9.537E-7 2.3.2.3 Other Loops and Interative Structures There are many different ways to implement iteration in any language, including very low-level controls like repeat (in R). Higher level iteration may include a FOREACH loop, where a series of commands is applied to a list or vector (the *apply commands in R are examples of this). An additional method of iteration that requires functions is the recursion (where a function calls itself). In every case, these alternative loop structures can be translated to for or while loops. 2.4 Overgrown Calculators While R and SAS are both extremely powerful statistical programming languages, the core of both languages is the ability to do basic calculations and matrix arithmetic. As almost every dataset is stored as a matrix-like structure (data sets and data frames both allow for multiple types, which isn’t quite compatible with more canonical matrices), it is useful to know how to do matrix-level calculations in R and SAS. In this section, we will essentially be using both R and SAS as overgrown calculators. 2.4.1 Basic numerical operations Operation R SAS Addition + + Subtraction - - Elementwise Multiplication * # Matrix/Vector Multiplication %*% * Division \\ \\ Elementwise Exponentiation ^ ## Matrix Exponentiation ^ ** Matrix Transpose t(A) `A\\`` R demo: # transpose these to make row vectors to match SAS x &lt;- t(1:10) y &lt;- t(seq(3, 30, by = 3)) x + y [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [1,] 4 8 12 16 20 24 28 32 36 40 x - y [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [1,] -2 -4 -6 -8 -10 -12 -14 -16 -18 -20 x * y [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [1,] 3 12 27 48 75 108 147 192 243 300 x / y [,1] [,2] [,3] [,4] [,5] [,6] [,7] [1,] 0.3333333 0.3333333 0.3333333 0.3333333 0.3333333 0.3333333 0.3333333 [,8] [,9] [,10] [1,] 0.3333333 0.3333333 0.3333333 x^2 [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [1,] 1 4 9 16 25 36 49 64 81 100 t(x) %*% y [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [1,] 3 6 9 12 15 18 21 24 27 30 [2,] 6 12 18 24 30 36 42 48 54 60 [3,] 9 18 27 36 45 54 63 72 81 90 [4,] 12 24 36 48 60 72 84 96 108 120 [5,] 15 30 45 60 75 90 105 120 135 150 [6,] 18 36 54 72 90 108 126 144 162 180 [7,] 21 42 63 84 105 126 147 168 189 210 [8,] 24 48 72 96 120 144 168 192 216 240 [9,] 27 54 81 108 135 162 189 216 243 270 [10,] 30 60 90 120 150 180 210 240 270 300 SAS demo: By default, SAS creates row vectors with do(a, b, by = c) syntax. The transpose operator (a single backtick) can be used to transform A into A`. proc iml; x = do(1, 10, 1); y = do(3, 30, 3); z = x + y; z2 = x - y; z3 = x # y; z4 = x/y; z5 = x##2; z6 = x` * y; print z, z2, z3, z4, z5, z6; quit; z COL1 COL2 COL3 COL4 COL5 COL6 COL7 COL8 COL9 COL10 ROW1 4 8 12 16 20 24 28 32 36 40 z2 COL1 COL2 COL3 COL4 COL5 COL6 COL7 COL8 COL9 COL10 ROW1 -2 -4 -6 -8 -10 -12 -14 -16 -18 -20 z3 COL1 COL2 COL3 COL4 COL5 COL6 COL7 COL8 COL9 COL10 ROW1 3 12 27 48 75 108 147 192 243 300 z4 COL1 COL2 COL3 COL4 COL5 COL6 COL7 COL8 COL9 COL10 ROW1 0.3333333 0.3333333 0.3333333 0.3333333 0.3333333 0.3333333 0.3333333 0.3333333 0.3333333 0.3333333 z5 COL1 COL2 COL3 COL4 COL5 COL6 COL7 COL8 COL9 COL10 ROW1 1 4 9 16 25 36 49 64 81 100 z6 COL1 COL2 COL3 COL4 COL5 COL6 COL7 COL8 COL9 COL10 ROW1 3 6 9 12 15 18 21 24 27 30 ROW2 6 12 18 24 30 36 42 48 54 60 ROW3 9 18 27 36 45 54 63 72 81 90 ROW4 12 24 36 48 60 72 84 96 108 120 ROW5 15 30 45 60 75 90 105 120 135 150 ROW6 18 36 54 72 90 108 126 144 162 180 ROW7 21 42 63 84 105 126 147 168 189 210 ROW8 24 48 72 96 120 144 168 192 216 240 ROW9 27 54 81 108 135 162 189 216 243 270 ROW10 30 60 90 120 150 180 210 240 270 300 Other matrix operations, such as determinants and extraction of the matrix diagonal, are similarly easy: R: mat &lt;- matrix(c(1, 2, 3, 6, 4, 5, 7, 8, 9), nrow = 3, byrow = T) t(mat) # transpose [,1] [,2] [,3] [1,] 1 6 7 [2,] 2 4 8 [3,] 3 5 9 det(mat) # get the determinant [1] 18 diag(mat) # get the diagonal [1] 1 4 9 diag(diag(mat)) # get a square matrix with off-diag 0s [,1] [,2] [,3] [1,] 1 0 0 [2,] 0 4 0 [3,] 0 0 9 diag(1:3) # diag() also will create a diagonal matrix if given a vector [,1] [,2] [,3] [1,] 1 0 0 [2,] 0 2 0 [3,] 0 0 3 SAS: proc iml; mat = {1 2 3, 6 4 5, 7 8 9}; tmat = mat`; /* transpose */ determinant = det(mat); /* get the determinant */ diagonal_vector = vecdiag(mat); /* get the diagonal as a vector */ diagonal_mat = diag(mat); /* get the diagonal as a square matrix */ /* with 0 on off-diagonal entries */ dm = diag({1 2 3}); /* make a square matrix with vector as the diagonal */ print tmat, determinant, diagonal_vector, diagonal_mat, dm; quit; tmat 1 6 7 2 4 8 3 5 9 determinant 18 diagonal_vector 1 4 9 diagonal_mat 1 0 0 0 4 0 0 0 9 dm 1 0 0 0 2 0 0 0 3 The other important matrix-related function is the inverse. In R, A^-1 will get you the elementwise reciprocal of the matrix. Not exactly what we’d like to see… Instead, in both languages, we use the solve() function. The inverse is defined as the matrix B such that AB = I where I is the identity matrix (1’s on diagonal, 0’s off-diagonal). So if we solve(A) (in R) or solve(A, diag(n)) in SAS (where n is a vector of 1s the size of A), we will get the inverse matrix. R: mat &lt;- matrix(c(1, 2, 3, 6, 4, 5, 7, 8, 9), nrow = 3, byrow = T) minv &lt;- solve(mat) # get the inverse minv [,1] [,2] [,3] [1,] -0.2222222 0.3333333 -0.1111111 [2,] -1.0555556 -0.6666667 0.7222222 [3,] 1.1111111 0.3333333 -0.4444444 mat %*% minv [,1] [,2] [,3] [1,] 1 0 0 [2,] 0 1 0 [3,] 0 0 1 SAS: Documentation proc iml; mat = {1 2 3, 6 4 5, 7 8 9}; mat_inv = solve(mat, diag({1 1 1})); /* get the inverse */ mat_inv2 = inv(mat); /* less efficient and less accurate */ print mat_inv, mat_inv2; id = mat * mat_inv; id2 = mat * mat_inv2; print id, id2; quit; mat_inv -0.222222 0.3333333 -0.111111 -1.055556 -0.666667 0.7222222 1.1111111 0.3333333 -0.444444 mat_inv2 -0.222222 0.3333333 -0.111111 -1.055556 -0.666667 0.7222222 1.1111111 0.3333333 -0.444444 id 1 -2.22E-16 0 0 1 0 0 -8.88E-16 1 id2 1 -2.22E-16 0 0 1 0 0 -8.88E-16 1 References and Links Non-exhaustive list of general R and SAS references used in this chapter: SAS Matrix reference: http://www.math.wpi.edu/saspdf/iml/chap4.pdf Data structures in Advanced R: http://adv-r.had.co.nz/Data-structures.html SAS Data set documentation Loops in SAS and SAS documentation for DO WHILE loops Random number generation in SAS Repeatable random number generation in R Creating SAS Data Sets from IML (also this friendly guide and this blog post) SAS Data Step options SAS Mathematical Operators SAS and R compared (by SAS) Lists and Data Structures in SAS Non-Exhaustive List of Sources used to aggregate “core programming concepts”: https://blog.upperlinecode.com/computer-language-fundamentals-five-core-concepts-1aa43e929f40 https://howtoprogramwithjava.com/programming-101-the-5-basic-concepts-of-any-programming-language/ https://dev.to/lucpattyn/basic-programming-concepts-for-beginners-2o73 http://livecode.byu.edu/programmingconcepts/ControlStruct.php http://holowczak.com/programming-concepts-tutorial-programmers/ numeric is not really a type, it’s a mode. Run ?mode for more information.↩ Most languages are 0-indexed languages: C, C++, python, Java, javascript. Vectors in these languages are indexed as 0, 1, 2, 3. Other 1-indexed languages include FORTRAN, Matlab, Julia, Mathematica, and Lua, many of which were intended for mathematical processing or data analysis.↩ Traditionally, naughty children got coal, while nice children got toys or candy.↩ "],
["organization.html", "Module 3 Organization: Packages, Functions, Scripts, and Documents 3.1 Reproducibility 3.2 Markdown 3.3 Functions and Modules 3.4 Scripts 3.5 Packages 3.6 Comparisons - SAS and R", " Module 3 Organization: Packages, Functions, Scripts, and Documents 3.1 Reproducibility The concepts of replication and reproducibility is central to science - we do not trust studies whose results cannot be replicated by additional repetitions of the experiment, and we do not trust statistical analyses whose results are not backed up by valid methods that can be re-run to verify the reported results. While replication covers the lab methods, experimental design, and data collection procedures, reproducibility is concerned with the code and the data from an experiment which has already been run. Specifically, the idea is that the research paper is basically an advertisement - by exposing the code and data used in the analysis, readers can engage with the core of the analysis methods, leading to better peer feedback as well as easier adoption of the research for future work. Reproducibility has several advantages: It allows you to show the correctness of your results Trying to reproduce an analysis from the data and the description in the journal article is… challenging, if not impossible, in many cases. By providing the raw data and code to take the data from raw form to analysis results, readers can verify the legitimacy of each step in the analysis. This allows researchers to review each others methods, finding mistakes due to bugs in the software used or due to implementation errors. In one particularly prominent failure of reproducibility, a study used to support macroeconomic theories that shaped the response to the 2008-2009 recession negatively correlating national debt with gdp growth was found to be flawed due to an excel indexing mistake. Use of GUI-based (graphical user interface) statistical analysis software may make it harder to identify these mistakes, because the formulas and code are not visually displayed. It allows others to use your results more easily By sharing your code and raw data, you provide the wider scientific community with the ability to use your results to build new scientific studies. This increases the relevance of your work, the number of citations your papers get, and you also benefit from the community adopting a culture of openness and reproducibility. In 2 years, when you need to find the code you used for that analysis in XXX paper, you’ll be able to find the code (and the data) to see how it worked and what you did. The code may or may not run as-is (depending on software versioning, package updates, etc.), but you will have the methods clearly documented along with the data (so it’s easy to replicate the data format needed, etc.) There are other advantages (personal and public) described in an issue of Biostatistics dedicated to reproducibility. David Donoho’s response is particularly useful. As you might expect, there are many different types of reproducibility. Code reproducibility - allows replication of the computing aspects of the study. Includes code, software, hardware, and implementation details. Data reproducibility - allows replication of the non-computational parts of the study (e.g. experiment and data collection). This may include making protocols and data available. Statistical reproducibility - allows replication of the statistical methods. Includes details about model parameters, thresholds, etc. and may also include study pre-registration to prevent p-hacking. There are also many levels of reproducibility. Much of the computer code written in the 1960s is no longer runnable today, because the computer architecture it was written for is not available anymore. Code which depends on URLs is vulnerable to website rearrangements or the content no longer being hosted. Archiving projects on GitHub is nice, but what happens if GitHub goes down? It’s important to decide what type of reproducibility is important for a particular project, and then design the project’s workflow around that process. For most of my projects, I don’t worry about software versioning (I may archive my sessionInfo() so that package versions are docummented) and storing the software packages alongside the code and data. As much as possible, I keep the code and the data (if it’s small) on GitHub in a public repository for people to access, along with any manuscripts or presentations related to the project. Manuscripts are written in knitr or rmarkdown, so that the code is documented by the context of the project, and every image in the article generated by R has corresponding code available. This ensures that my code (and data) is stored somewhere off-site (backed up in the cloud) my code is available if others want to use it I can track my contributions to a project relative to any collaborators I can reuse blocks of code easily In situations where I run experiments, I also make sure that any experimental stimuli or other code that would contribute to the execution and data collection part of the experiment is also included in the repository. Stimuli are archived as well. The github reproducibility work flow is convenient - it allows for me to easily collaborate with others, without emailing versions of code and documents back and forth. I can revert changes that are made that had unintentional effects fairly easily. I can sync my files across multiple machines effortlessly. And if necessary, I can look back at the changes I’ve made and see why I made them, or what I’ve already tried. 3.1.1 Reproducibility References and Reading Advanced R’s reproducibility guide A reproducible R workflow ROpenSci’s guide to reproducibility Roger Peng’s Biostatistics editorial on reproducibility The Biostatistics reproducibility issue w/ responses to the editorial and associated commentary 3.2 Markdown In this class, we’re primarily going to use rmarkdown to create dynamic documents. Markdown itself is a special style of text that is intended to allow you to do basic formatting without having to pause to actually click the buttons (if you were writing in word). It integrates equation functionality (so you can type mathematical equations using LaTeX syntax) and also allows for the use of templates (so you can write whole journal articles in a text editor). Markdown is also program agnostic - it will allow you to compile your work into HTML, word, or PDF form. Markdown documents must be compiled - a computer program runs and transforms the text file into a full document. RStudio has markdown functionality built-in, and also supports rmarkdown, which is a markdown variant designed to make it easy to integrate R code with document creation (so-called literate programming). There are other markdown programs which extend markdown’s functionality so that you can write a book (like this one), create presentations or posters, or maintain a blog in markdown. Rmarkdown, despite the name, also allows you to integrate the results from code in other languages. As you saw in the last chapter, SAS code can be integrated into markdown as well. Other languages commonly used include python, julia, SQL, Bash, C++, and Stan. There is a full set of Rmarkdown tutorials from RStudio. There is also a handy cheatsheet. Rmarkdown documents may contain code used to support an analysis, but they are usually not the best way to develop an analysis method - they are better for documentation, writing tutorials, and other scenarios where you need both text explanations and code/analysis/results. There are other “containers” for code, though, including functions, scripts, and packages. Each has their own advantages and disadvantages, and can be used together. 3.3 Functions and Modules A function is a block of code which is only run when it is called. It takes arguments (known as parameters) and returns data or some other value. There is some extensive material on this subject in R for Data Science on functions. If you aren’t familiar with functions, you should read that material before proceeding. Let’s look at the structure of a generic function in pseudocode (code that isn’t really part of any language, but describes the steps of a program): my_function_name = function(param1, param2 = 3) { step1 // do something step2 // do something else return step_1/step2 } The first part of a function declaration (storing information in a named object) is the function’s intended name, my_function_name. Then, we indicate that we are defining a function, and what parameters our function requires. For param1, we do not provide a default value, but for param2, we indicate that the default value is 3. Thus, if we call the function (tell the program to run this function with certain arguments and provide the result), we could either say my_function_name(param1 = value1, param2 = value2) or my_function_name(param1 = value1) (which is equivalent to my_function_name(param1 = value1, param2 = 3)). Inside the function block (indicated by {} here, but some languages may use do ... end;), we perform whatever steps we’ve decided to include in the function, and then at the end of the function, we return a value - the function exits, and leaves behind some information. In R, functions look like this: function( arglist ) { expr return(value) } In SAS, functions are called modules and look like this: Statements That Define and Execute Modules Modules are used to create a user-defined subroutine or function. A module definition begins with a START statement, which has the following general form: START &lt;name&gt; &lt;( arguments )&gt; &lt;GLOBAL( arguments )&gt;; A module definition ends with a FINISH statement, which has the following general form: FINISH &lt;name&gt;; To execute a module, you can use either a RUN statement or a CALL statement. The general forms of these statements are as follows: RUN &lt;name&gt; &lt;( arguments)&gt;; CALL &lt;name&gt; &lt;( arguments)&gt;; The only difference between the RUN and CALL statements is the order of resolution. Source: SAS function reference Let’s try functions out by writing a simple function that takes two numbers as arguments and adds them together. adder &lt;- function(a, b) { return(a + b) } adder(3, 4) [1] 7 proc IML; start adder(a, b); return(a + b); finish; c = adder(3, 4); print c; quit; c 7 Of course, it’s not just important to be able to write your own functions. It’s also helpful to be able to see how functions are written, both to explore how a method is implemented and for debugging purposes. In SAS, this is generally not an option, because SAS is closed source, but in R, you can see the code behind any function which is implemented in R (it is harder to see functions implemented in C or C++, but not impossible) by typing the function name (no parentheses) into the command prompt. Let’s examine how the colSums() function is implemented: colSums function (x, na.rm = FALSE, dims = 1L) { if (is.data.frame(x)) x &lt;- as.matrix(x) if (!is.array(x) || length(dn &lt;- dim(x)) &lt; 2L) stop(&quot;&#39;x&#39; must be an array of at least two dimensions&quot;) if (dims &lt; 1L || dims &gt; length(dn) - 1L) stop(&quot;invalid &#39;dims&#39;&quot;) n &lt;- prod(dn[id &lt;- seq_len(dims)]) dn &lt;- dn[-id] z &lt;- if (is.complex(x)) .Internal(colSums(Re(x), n, prod(dn), na.rm)) + (0+1i) * .Internal(colSums(Im(x), n, prod(dn), na.rm)) else .Internal(colSums(x, n, prod(dn), na.rm)) if (length(dn) &gt; 1L) { dim(z) &lt;- dn dimnames(z) &lt;- dimnames(x)[-id] } else names(z) &lt;- dimnames(x)[[dims + 1L]] z } &lt;bytecode: 0x562410cd25b8&gt; &lt;environment: namespace:base&gt; You can see that the first 3 steps in the function are if statements to test whether the inputs are acceptable - x must be a data frame, a matrix, or an array (with 2+ dimensions). The next couple of lines test to see whether there are additional “column” dimensions (don’t worry if you don’t understand what’s going on in this code - it’s highly optimized and a bit arcane). Then, the function checks to see if x is real-valued or complex, and if it’s complex, computes the real and imaginary sums separately. The .Internal(colSums(x...)) part is calling a C function - basically, functions written in C are faster than R because they’re compiled, so this speeds basic operations up in R. Then there are statements that transfer dimension names over to the summed object. At the end of the function, the last value computed is returned automatically (in this case, z). Try it out Write a function named circle_area which computes the area of a circle given the radius. Make sure to use reasonable parameter names! (Note: in R, pi is conveniently stored in the variable of the same name - it can be overwritten if you want to do so, but why would you want to do that? In SAS, you can get the value of pi using constant(&quot;pi&quot;)) circle_area &lt;- function(r) { r^2*pi # automatically returned as the last computed value } circle_area(5) [1] 78.53982 A more complete and robust answer might include a test for numeric r: circle_area &lt;- function(r) { if (!is.numeric(r)) { stop(&quot;Supplied radius must be numeric&quot;) # This issues an error } r^2*pi # automatically returned as the last computed value } circle_area(5) [1] 78.53982 proc IML; start circle_area(r); pi = constant(&quot;pi&quot;); return(pi*r**2); finish; c = circle_area(5); print c; quit; c 78.539816 3.3.1 Function scope Every function is defined in a certain environment, and once it is defined,executed in a specific environment. Think of an environment as a space full of available variables, functions, and objects. Any defined object or variable that a function has access to is in scope. When you are inside of a function block, you have access to values defined within the function, plus any other values outside the function. When there are two variables with the same name, the environment which is “closest” controls: a &lt;- 3 myfun &lt;- function(a, b) { a + b + 2 } myfun(5, 6) # a is 5 inside the function, so that overrides the a defined outside the function [1] 13 myfun(a, 3) # this references the a outside the function [1] 8 Scope diagram. When myfun() is called, the calling environment contains the two parameters a and b. myfun2 &lt;- function(d) { myfun(a, d) } myfun2(3) # the only a in scope inside fun2 is the a defined at the top of the chunk [1] 8 Scope diagram. When myfun2() is called, the calling environment contains only a parameter \\(d\\). \\(a\\) is pulled from the global environment, as there is no parameter \\(a\\) in the myfun2 calling environment. myfun3 &lt;- function(a, d) { myfun(a, d) } myfun3(5, 3) # now, a is defined inside fun3 as a = 5, so there is an a in fun3&#39;s scope that isn&#39;t in the global environment. [1] 10 Scope diagram. When myfun3() is called, the calling environment contains parameters a and d, which are then copied into the calling environment of myfun as \\(a\\) and \\(b\\). The variable \\(a\\) in the global environment is ignored. 3.4 Scripts 3.5 Packages 3.6 Comparisons - SAS and R "],
["reading-data.html", "Module 4 External Data 4.1 External Data Formats 4.2 Importing Tabular Data into R 4.3 Importing Tabular Data into SAS 4.4 Exploratory Data Analysis", " Module 4 External Data 4.1 External Data Formats txt tsv csv fixed width excel/spreadsheet databases structured data (xml, json) 4.2 Importing Tabular Data into R 4.3 Importing Tabular Data into SAS 4.4 Exploratory Data Analysis tables summary statistics basic plots? unique values "],
["manipulating-data.html", "Module 5 Manipulating Data 5.1 Filter 5.2 Select 5.3 Group By 5.4 Summarize", " Module 5 Manipulating Data 5.1 Filter 5.2 Select 5.3 Group By 5.4 Summarize "],
["transforming-data.html", "Module 6 Transforming Data 6.1 Pivot operations 6.2 Separating one variable into many", " Module 6 Transforming Data 6.1 Pivot operations 6.1.1 Wider 6.1.2 Longer 6.2 Separating one variable into many "],
["data-analysis.html", "Module 7 Introduction to Data Analysis 7.1 Models in SAS 7.2 Models in R", " Module 7 Introduction to Data Analysis 7.1 Models in SAS 7.2 Models in R 7.2.1 Standard Models 7.2.2 Tidymodels "],
["data-vis-intro.html", "Module 8 Introduction to Data Visualization 8.1 Creating Charts in SAS 8.2 Creating Charts in R (base) 8.3 The Grammar of Graphics", " Module 8 Introduction to Data Visualization 8.1 Creating Charts in SAS 8.2 Creating Charts in R (base) 8.3 The Grammar of Graphics There are a lot of different types of charts. How do we classify them all? Introduce grammar of graphics as implemented in ggplot2 "],
["graphical-communication.html", "Module 9 Graphical Communication 9.1 something", " Module 9 Graphical Communication Good charts are important 9.1 something "],
["simulation.html", "Module 10 Simulation and Reproducibility 10.1 Pseudorandom Number Generation 10.2 Random Number Generation and Reproducibility", " Module 10 Simulation and Reproducibility 10.1 Pseudorandom Number Generation 10.2 Random Number Generation and Reproducibility 10.2.1 Seeds 10.2.2 Rmarkdown Reproducibility "],
["debugging.html", "Module 11 Principles of Debugging 11.1 Ideal Function Design 11.2 Debugging Tools in R 11.3 Debugging Tools in SAS 11.4 Minimal Working Examples 11.5 Researching Error Messages", " Module 11 Principles of Debugging 11.1 Ideal Function Design 11.2 Debugging Tools in R 11.3 Debugging Tools in SAS 11.4 Minimal Working Examples 11.5 Researching Error Messages "],
["presentations.html", "Module 12 Dynamic Presentations 12.1 Slides 12.2 Posters", " Module 12 Dynamic Presentations 12.1 Slides 12.1.1 Beamer (LaTeX) and knitr 12.1.2 xaringan 12.2 Posters 12.2.1 Beamer (LaTeX) and knitr 12.2.2 Pagedown "],
["references.html", "References", " References "]
]
