{
  "hash": "fa36fc2f9ce668ec7e401a71a0f64291",
  "result": {
    "markdown": "---\neditor_options: \n  markdown: \n    wrap: 72\n---\n\n\n# Exploratory Data Analysis\n\n## Module Objectives   {- #module7-objectives}\n\n- Understand the main goals of exploratory data analysis\n- Generate and answer questions about a new dataset using charts, tables, and numerical summaries\n\n::: callout-note\n## Extra Reading {.unnumbered}\n\n[The EDA chapter in R for Data Science](https://r4ds.had.co.nz/exploratory-data-analysis.html) [@r4ds] is very good at\nexplaining what the goals of EDA are, and what types of questions you\nwill typically need to answer in\nEDA. Much of the\nmaterial in this chapter is based at least in part on the R4DS chapter.\n:::\n\n![(Image from https://www.mrdbourke.com) \nThe EDA lifecycle starts with data collection and is\nprimarily a cycle between checking data types, assessing distributions,\nfeature engineering, and model iteration. These tasks are supported by\nsummary statistics, visualization, and\nmodeling.](images/eda/an-EDA-lifecycle.png){fig-align=\"center\"\nwidth=\"75%\"}\n<!-- https://www.mrdbourke.com/content/images/size/w1000/2019/09/an-EDA-lifecycle.png -->\n\nMajor components of Exploratory Data Analysis (EDA):\n\n-   generating questions about your data\n-   look for answers to the questions (visualization, transformation,\n    modeling)\n-   use answers to refine the questions and generate new questions\n\nEDA is an iterative process. It is like brainstorming - you start with\nan idea or question you might have about the data, investigate, and then\ngenerate new ideas. EDA is useful even when you are relatively familiar\nwith the type of data you're working with: in any dataset, it is good to\nmake sure that you know the quality of the data as well as the\nrelationships between the variables in the dataset.\n\nEDA is important because it helps us to know what challenges a\nparticular data set might bring, what we might do with it. Real data is\noften messy, with large amounts of cleaning that must be done before\nstatistical analysis can commence.\n\nWhile in many classes you'll be given mostly clean data, you do need to\nknow how to clean your own data up so that you can use more interesting\ndata sets for projects (and for fun!). EDA is an important component to\nlearning how to work with messy data.\n\n::: .callout-note\nIn this section, I will mostly be using the plot commands that come with\nbase R/python and require no extra packages. The R for Data Science book\n[@r4ds] shows plot commands which use the `ggplot2` library. I'll show\nyou some plots from ggplot here as well, but you don't have to\nunderstand how to generate them yet. We will learn more about ggplot2\nlater, though if you want to start using it now, you may.\n:::\n\n## A Note on Language Philosophies {.unnumbered}\n\nIt is usually relatively easy to get summary statistics from a dataset,\nbut the \"flow\" of EDA is somewhat different depending on the language\npatterns.\n\n> You must realize that R is written by experts in statistics and\n> statistical computing who, despite popular opinion, do not believe\n> that everything in SAS and SPSS is worth copying. Some things done in\n> such packages, which trace their roots back to the days of punched\n> cards and magnetic tape when fitting a single linear model may take\n> several days because your first 5 attempts failed due to syntax errors\n> in the JCL or the SAS code, still reflect the approach of \"give me\n> every possible statistic that could be calculated from this model,\n> whether or not it makes sense\". The approach taken in R is different.\n> The underlying assumption is that the useR is thinking about the\n> analysis while doing it. -- Douglas Bates\n\nI provide this as a historical artifact, but it does explain the\ndifference between the approach to EDA and model output in R and Python,\nand the approach in SAS, which you may see in your other statistics\nclasses. This is not (at least, in my opinion) a criticism -- the SAS\nphilosophy dates back to the mainframe and punch card days, and the\nsyntax and output still bear evidence of that -- but it is worth noting.\n\nIn R and in Python, you will have to specify each piece of output you\nwant, but in SAS you will get more than you ever wanted with a single\ncommand. Neither approach is wrong, but sometimes one is preferable over\nthe other for a given problem.\n\n## Generating EDA Questions\n\nI very much like the two quotes in the @r4ds section on EDA Questions:\n\n> There are no routine statistical questions, only questionable\n> statistical routines. --- Sir David Cox\n\n> Far better an approximate answer to the right question, which is often\n> vague, than an exact answer to the wrong question, which can always be\n> made precise. --- John Tukey\n\nAs statisticians, we are concerned with variability by default. This is\nalso true during EDA: we are interested in variability (or sometimes,\nlack thereof) in the variables in our dataset, including the\nco-variability between multiple variables.\n\nWe may assess variability using pictures or numerical summaries:\n\n-   histograms or density plots (continuous variables)\n-   column plots (categorical variables)\n-   boxplots\n-   5 number summaries (min, 25%, mean, 75%, max)\n-   tabular data summaries (for categorical variables)\n\nIn many cases, this gives us a picture of both variability and the\n\"typical\" value of our variable.\n\nSometimes we may also be interested in identifying unusual values:\noutliers, data entry errors, and other points which don't conform to our\nexpectations. These unusual values may show up when we generate pictures\nand the axis limits are much larger than expected.\n\nWe also are usually concerned with missing values - in many cases, not\nall observations are complete, and this missingness can interfere with\nstatistical analyses. It can be helpful to keep track of how much\nmissingness there is in any particular variable and any patterns of\nmissingness that would impact the eventual data\nanalysis[^exploratory-data-analysis-1].\n\n[^exploratory-data-analysis-1]: One package for this process in R is\n    `naniar` [@tierneyNaniarDataStructures2021].\n\nIf you are having trouble getting started on EDA,\n@danielbourkeGentleIntroductionExploratory2019 provides a nice checklist\nto get you thinking:\n\n> 1.  What question(s) are you trying to solve (or prove wrong)?\n> 2.  What kind of data do you have and how do you treat different\n>     types?\n> 3.  What's missing from the data and how do you deal with it?\n> 4.  Where are the outliers and why should you care about them?\n> 5.  How can you add, change or remove features to get more out of your\n>     data?\n\n## Useful EDA Techniques\n\nIn this chapter, we'll explore the [pokemon\ndata](https://github.com/shahinrostami/pokemon_dataset/blob/master/pokemon_gen_1_to_8.csv)\nin [shahinrostami](https://github.com/shahinrostami/pokemon_dataset)'s\ngithub repository. This data has a number of categorical and continuous\nvariables that should allow for a reasonable demonstration of a number\nof techniques for exploring data.\n\n::: panel-tabset\n### R {.unnumbered}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\nurl <- \"https://raw.githubusercontent.com/shahinrostami/pokemon_dataset/master/pokemon_gen_1_to_8.csv\"\npoke <- read_csv(url)[,-c(1, 4, 5)] # skip extra columns\n```\n:::\n\n\n### Python {.unnumbered}\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\npoke = pd.read_csv(\"https://raw.githubusercontent.com/shahinrostami/pokemon_dataset/master/pokemon_gen_1_to_8.csv\")\npoke = poke.drop([\"Unnamed: 0\", \"german_name\", \"japanese_name\"], axis = 1) # Drop some extra cols\n```\n:::\n\n:::\n\n### Numerical Summary Statistics\n\n::: panel-tabset\n#### R: summary {.unnumbered}\n\nThe first, and most basic EDA command in R is `summary()`.\n\nFor numeric variables, `summary` provides 5-number summaries plus the\nmean. For categorical variables, `summary` provides the length of the\nvariable and the Class and Mode. For factors, `summary` provides a table\nof the most common values, as well as a catch-all \"other\" category.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Make types into factors to demonstrate the difference\npoke$type_1 <- factor(poke$type_1)\npoke$type_2 <- factor(poke$type_2)\n\nsummary(poke[,3:12])\n##    generation       status            species           type_number   \n##  Min.   :1.000   Length:1028        Length:1028        Min.   :1.000  \n##  1st Qu.:2.000   Class :character   Class :character   1st Qu.:1.000  \n##  Median :4.000   Mode  :character   Mode  :character   Median :2.000  \n##  Mean   :4.034                                         Mean   :1.527  \n##  3rd Qu.:6.000                                         3rd Qu.:2.000  \n##  Max.   :8.000                                         Max.   :2.000  \n##                                                                       \n##      type_1        type_2       height_m         weight_kg     \n##  Water  :134   Flying :109   Min.   :  0.100   Min.   :  0.10  \n##  Normal :115   Fairy  : 41   1st Qu.:  0.600   1st Qu.:  8.80  \n##  Grass  : 91   Ground : 39   Median :  1.000   Median : 28.50  \n##  Bug    : 81   Poison : 38   Mean   :  1.368   Mean   : 69.75  \n##  Psychic: 76   Psychic: 38   3rd Qu.:  1.500   3rd Qu.: 69.10  \n##  Fire   : 65   (Other):277   Max.   :100.000   Max.   :999.90  \n##  (Other):466   NA's   :486                     NA's   :1       \n##  abilities_number  ability_1        \n##  Min.   :0.000    Length:1028       \n##  1st Qu.:2.000    Class :character  \n##  Median :2.000    Mode  :character  \n##  Mean   :2.284                      \n##  3rd Qu.:3.000                      \n##  Max.   :3.000                      \n## \n```\n:::\n\n\nOne common question in EDA is whether there are missing values or other\ninconsistencies that need to be handled. `summary()` provides you with\nthe NA count for each variable, making it easy to identify what\nvariables are likely to cause problems in an analysis.\n\nThere is one pokemon who appears to not have a weight specified. Let's\ninvestigate further:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npoke[is.na(poke$weight_kg),] # Show any rows where weight.kg is NA\n## # A tibble: 1 × 48\n##   pokedex_n…¹ name  gener…² status species type_…³ type_1 type_2 heigh…⁴ weigh…⁵\n##         <dbl> <chr>   <dbl> <chr>  <chr>     <dbl> <fct>  <fct>    <dbl>   <dbl>\n## 1         890 Eter…       8 Legen… Gigant…       2 Poison Dragon     100      NA\n## # … with 38 more variables: abilities_number <dbl>, ability_1 <chr>,\n## #   ability_2 <chr>, ability_hidden <chr>, total_points <dbl>, hp <dbl>,\n## #   attack <dbl>, defense <dbl>, sp_attack <dbl>, sp_defense <dbl>,\n## #   speed <dbl>, catch_rate <dbl>, base_friendship <dbl>,\n## #   base_experience <dbl>, growth_rate <chr>, egg_type_number <dbl>,\n## #   egg_type_1 <chr>, egg_type_2 <chr>, percentage_male <dbl>,\n## #   egg_cycles <dbl>, against_normal <dbl>, against_fire <dbl>, …\n## # ℹ Use `colnames()` to see all variable names\n```\n:::\n\n\nThis is the last row of our data frame, and this pokemon appears to have\nmany missing values.\n\n#### Python: describe {.unnumbered}\n\nThe most basic EDA command in pandas is `df.describe()` (which operates\non a DataFrame named `df`). Like `summary()` in R, `describe()` provides\na 5-number summary for numeric variables. For categorical variables,\n`describe()` provides the number of unique values, the most common\nvalue, and the frequency of that common value.\n\n\n::: {.cell}\n\n```{.python .cell-code}\npoke.iloc[:,2:11].describe() # describe only shows numeric variables by default\n\n# You can get categorical variables too if that's all you give it to show\n##         generation  type_number     height_m    weight_kg  abilities_number\n## count  1028.000000  1028.000000  1028.000000  1027.000000       1028.000000\n## mean      4.034047     1.527237     1.368093    69.753749          2.284047\n## std       2.234937     0.499501     3.380126   129.221230          0.794981\n## min       1.000000     1.000000     0.100000     0.100000          0.000000\n## 25%       2.000000     1.000000     0.600000     8.800000          2.000000\n## 50%       4.000000     2.000000     1.000000    28.500000          2.000000\n## 75%       6.000000     2.000000     1.500000    69.100000          3.000000\n## max       8.000000     2.000000   100.000000   999.900000          3.000000\npoke['status'].describe()\n## count       1028\n## unique         4\n## top       Normal\n## freq         915\n## Name: status, dtype: object\n```\n:::\n\n\n#### R: skimr {.unnumbered}\n\nAn R package that is incredibly useful for this type of dataset\nexploration is `skimr`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(skimr)\nskim(poke)\n```\n\n::: {.cell-output-display}\nTable: Data summary\n\n|                         |     |\n|:------------------------|:----|\n|Name                     |poke |\n|Number of rows           |1028 |\n|Number of columns        |48   |\n|_______________________  |     |\n|Column type frequency:   |     |\n|character                |9    |\n|factor                   |2    |\n|numeric                  |37   |\n|________________________ |     |\n|Group variables          |None |\n\n\n**Variable type: character**\n\n|skim_variable  | n_missing| complete_rate| min| max| empty| n_unique| whitespace|\n|:--------------|---------:|-------------:|---:|---:|-----:|--------:|----------:|\n|name           |         0|          1.00|   3|  33|     0|     1028|          0|\n|status         |         0|          1.00|   6|  13|     0|        4|          0|\n|species        |         0|          1.00|  11|  21|     0|      641|          0|\n|ability_1      |         3|          1.00|   4|  16|     0|      202|          0|\n|ability_2      |       515|          0.50|   4|  16|     0|      126|          0|\n|ability_hidden |       218|          0.79|   4|  16|     0|      154|          0|\n|growth_rate    |         1|          1.00|   4|  11|     0|        6|          0|\n|egg_type_1     |         3|          1.00|   3|  12|     0|       15|          0|\n|egg_type_2     |       746|          0.27|   5|  10|     0|       11|          0|\n\n\n**Variable type: factor**\n\n|skim_variable | n_missing| complete_rate|ordered | n_unique|top_counts                           |\n|:-------------|---------:|-------------:|:-------|--------:|:------------------------------------|\n|type_1        |         0|          1.00|FALSE   |       18|Wat: 134, Nor: 115, Gra: 91, Bug: 81 |\n|type_2        |       486|          0.53|FALSE   |       18|Fly: 109, Fai: 41, Gro: 39, Poi: 38  |\n\n\n**Variable type: numeric**\n\n|skim_variable    | n_missing| complete_rate|   mean|     sd|     p0|    p25|   p50|    p75|   p100|hist  |\n|:----------------|---------:|-------------:|------:|------:|------:|------:|-----:|------:|------:|:-----|\n|pokedex_number   |         0|          1.00| 437.71| 259.37|   1.00| 213.75| 433.5| 663.25|  890.0|▇▇▇▇▇ |\n|generation       |         0|          1.00|   4.03|   2.23|   1.00|   2.00|   4.0|   6.00|    8.0|▇▅▇▂▅ |\n|type_number      |         0|          1.00|   1.53|   0.50|   1.00|   1.00|   2.0|   2.00|    2.0|▇▁▁▁▇ |\n|height_m         |         0|          1.00|   1.37|   3.38|   0.10|   0.60|   1.0|   1.50|  100.0|▇▁▁▁▁ |\n|weight_kg        |         1|          1.00|  69.75| 129.22|   0.10|   8.80|  28.5|  69.10|  999.9|▇▁▁▁▁ |\n|abilities_number |         0|          1.00|   2.28|   0.79|   0.00|   2.00|   2.0|   3.00|    3.0|▁▃▁▅▇ |\n|total_points     |         0|          1.00| 437.57| 121.66| 175.00| 330.00| 455.0| 510.00| 1125.0|▅▇▂▁▁ |\n|hp               |         0|          1.00|  69.58|  26.39|   1.00|  50.00|  66.5|  80.00|  255.0|▃▇▁▁▁ |\n|attack           |         0|          1.00|  80.12|  32.37|   5.00|  55.00|  76.0| 100.00|  190.0|▂▇▇▂▁ |\n|defense          |         0|          1.00|  74.48|  31.30|   5.00|  50.00|  70.0|  90.00|  250.0|▃▇▂▁▁ |\n|sp_attack        |         0|          1.00|  72.73|  32.68|  10.00|  50.00|  65.0|  95.00|  194.0|▅▇▅▂▁ |\n|sp_defense       |         0|          1.00|  72.13|  28.08|  20.00|  50.00|  70.0|  90.00|  250.0|▇▇▁▁▁ |\n|speed            |         0|          1.00|  68.53|  29.80|   5.00|  45.00|  65.0|  90.00|  180.0|▃▇▆▂▁ |\n|catch_rate       |       104|          0.90|  93.17|  75.24|   3.00|  45.00|  60.0| 127.00|  255.0|▇▃▂▂▂ |\n|base_friendship  |       104|          0.90|  64.14|  21.46|   0.00|  70.00|  70.0|  70.00|  140.0|▁▁▇▁▁ |\n|base_experience  |       104|          0.90| 153.81|  79.27|  36.00|  67.00| 159.0| 201.50|  608.0|▇▇▂▁▁ |\n|egg_type_number  |         0|          1.00|   1.27|   0.45|   0.00|   1.00|   1.0|   2.00|    2.0|▁▁▇▁▃ |\n|percentage_male  |       236|          0.77|  55.00|  20.18|   0.00|  50.00|  50.0|  50.00|  100.0|▁▁▇▁▂ |\n|egg_cycles       |         1|          1.00|  30.32|  28.94|   5.00|  20.00|  20.0|  25.00|  120.0|▇▁▁▁▁ |\n|against_normal   |         0|          1.00|   0.87|   0.29|   0.00|   1.00|   1.0|   1.00|    1.0|▁▁▁▁▇ |\n|against_fire     |         0|          1.00|   1.13|   0.72|   0.00|   0.50|   1.0|   2.00|    4.0|▆▇▅▁▁ |\n|against_water    |         0|          1.00|   1.05|   0.61|   0.00|   0.50|   1.0|   1.00|    4.0|▅▇▂▁▁ |\n|against_electric |         0|          1.00|   1.03|   0.65|   0.00|   0.50|   1.0|   1.00|    4.0|▅▇▃▁▁ |\n|against_grass    |         0|          1.00|   1.00|   0.75|   0.00|   0.50|   1.0|   1.00|    4.0|▇▇▃▁▁ |\n|against_ice      |         0|          1.00|   1.20|   0.76|   0.00|   0.50|   1.0|   2.00|    4.0|▅▇▅▁▁ |\n|against_fight    |         0|          1.00|   1.08|   0.75|   0.00|   0.50|   1.0|   2.00|    4.0|▇▇▅▁▁ |\n|against_poison   |         0|          1.00|   0.95|   0.54|   0.00|   0.50|   1.0|   1.00|    4.0|▃▇▂▁▁ |\n|against_ground   |         0|          1.00|   1.08|   0.78|   0.00|   0.50|   1.0|   1.62|    4.0|▅▇▃▁▁ |\n|against_flying   |         0|          1.00|   1.17|   0.59|   0.25|   1.00|   1.0|   1.00|    4.0|▇▁▂▁▁ |\n|against_psychic  |         0|          1.00|   0.98|   0.50|   0.00|   1.00|   1.0|   1.00|    4.0|▃▇▂▁▁ |\n|against_bug      |         0|          1.00|   0.99|   0.60|   0.00|   0.50|   1.0|   1.00|    4.0|▇▇▃▁▁ |\n|against_rock     |         0|          1.00|   1.24|   0.70|   0.25|   1.00|   1.0|   2.00|    4.0|▇▁▂▁▁ |\n|against_ghost    |         0|          1.00|   1.01|   0.56|   0.00|   1.00|   1.0|   1.00|    4.0|▂▇▂▁▁ |\n|against_dragon   |         0|          1.00|   0.98|   0.38|   0.00|   1.00|   1.0|   1.00|    2.0|▁▁▇▁▁ |\n|against_dark     |         0|          1.00|   1.07|   0.45|   0.25|   1.00|   1.0|   1.00|    4.0|▇▁▁▁▁ |\n|against_steel    |         0|          1.00|   0.98|   0.50|   0.00|   0.50|   1.0|   1.00|    4.0|▅▇▂▁▁ |\n|against_fairy    |         0|          1.00|   1.08|   0.53|   0.00|   1.00|   1.0|   1.00|    4.0|▂▇▂▁▁ |\n:::\n:::\n\n\n`skim` provides a beautiful table of summary statistics along with a\nsparklines-style histogram of values, giving you a sneak peek at the\ndistribution.\n\n#### python: skimpy {.unnumbered}\n\nThere is a similar package to `skimr` in R called `skimpy` in Python.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom skimpy import skim\nskim(poke)\n## ╭─────────────────────────────── skimpy summary ───────────────────────────────╮\n## │          Data Summary                Data Types                              │\n## │ ┏━━━━━━━━━━━━━━━━━━━┳━━━━━━━━┓ ┏━━━━━━━━━━━━━┳━━━━━━━┓                       │\n## │ ┃ dataframe         ┃ Values ┃ ┃ Column Type ┃ Count ┃                       │\n## │ ┡━━━━━━━━━━━━━━━━━━━╇━━━━━━━━┩ ┡━━━━━━━━━━━━━╇━━━━━━━┩                       │\n## │ │ Number of rows    │ 1028   │ │ float64     │ 25    │                       │\n## │ │ Number of columns │ 48     │ │ int64       │ 12    │                       │\n## │ └───────────────────┴────────┘ │ object      │ 11    │                       │\n## │                                └─────────────┴───────┘                       │\n## │                                   number                                     │\n## │ ┏━━━━━━━━┳━━━━━━━┳━━━━━━━━┳━━━━━━┳━━━━━━┳━━━━━━┳━━━━━┳━━━━━┳━━━━━━┳━━━━━━━┓  │\n## │ ┃        ┃ missi ┃ comple ┃ mean ┃ sd   ┃ p0   ┃ p25 ┃ p75 ┃ p100 ┃ hist  ┃  │\n## │ ┃        ┃ ng    ┃ te     ┃      ┃      ┃      ┃     ┃     ┃      ┃       ┃  │\n## │ ┃        ┃       ┃ rate   ┃      ┃      ┃      ┃     ┃     ┃      ┃       ┃  │\n## │ ┡━━━━━━━━╇━━━━━━━╇━━━━━━━━╇━━━━━━╇━━━━━━╇━━━━━━╇━━━━━╇━━━━━╇━━━━━━╇━━━━━━━┩  │\n## │ │ pokede │     0 │      1 │  440 │  260 │    1 │ 210 │ 660 │  890 │ █▇▇▇▇ │  │\n## │ │ x_numb │       │        │      │      │      │     │     │      │   ▇   │  │\n## │ │ er     │       │        │      │      │      │     │     │      │       │  │\n## │ │ genera │     0 │      1 │    4 │  2.2 │    1 │   2 │   6 │    8 │ █▄▃▅▂ │  │\n## │ │ tion   │       │        │      │      │      │     │     │      │   ▅   │  │\n## │ │ type_n │     0 │      1 │  1.5 │  0.5 │    1 │   1 │   2 │    2 │   ▇   │  │\n## │ │ umber  │       │        │      │      │      │     │     │      │   █   │  │\n## │ │ height │     0 │      1 │  1.4 │  3.4 │  0.1 │ 0.6 │ 1.5 │  100 │   █   │  │\n## │ │ _m     │       │        │      │      │      │     │     │      │       │  │\n## │ │ weight │     1 │      1 │   70 │  130 │  0.1 │ 8.8 │  69 │ 1000 │  █▁   │  │\n## │ │ _kg    │       │        │      │      │      │     │     │      │       │  │\n## │ │ abilit │     0 │      1 │  2.3 │ 0.79 │    0 │   2 │   3 │    3 │    ▃  │  │\n## │ │ ies_nu │       │        │      │      │      │     │     │      │  ▅█   │  │\n## │ │ mber   │       │        │      │      │      │     │     │      │       │  │\n## │ │ total_ │     0 │      1 │  440 │  120 │  180 │ 330 │ 510 │ 1100 │ ▅█▆▁  │  │\n## │ │ points │       │        │      │      │      │     │     │      │       │  │\n## │ │ hp     │     0 │      1 │   70 │   26 │    1 │  50 │  80 │  260 │  ▁█▂  │  │\n## │ │ attack │     0 │      1 │   80 │   32 │    5 │  55 │ 100 │  190 │ ▂██▅▂ │  │\n## │ │ defens │     0 │      1 │   74 │   31 │    5 │  50 │  90 │  250 │ ▃█▄▁  │  │\n## │ │ e      │       │        │      │      │      │     │     │      │       │  │\n## │ │ sp_att │     0 │      1 │   73 │   33 │   10 │  50 │  95 │  190 │ ▄█▅▃▁ │  │\n## │ │ ack    │       │        │      │      │      │     │     │      │       │  │\n## │ │ sp_def │     0 │      1 │   72 │   28 │   20 │  50 │  90 │  250 │  ▆█▂  │  │\n## │ │ ense   │       │        │      │      │      │     │     │      │       │  │\n## │ │ speed  │     0 │      1 │   69 │   30 │    5 │  45 │  90 │  180 │ ▃█▇▄▁ │  │\n## │ │ catch_ │   100 │    0.9 │   93 │   75 │    3 │  45 │ 130 │  260 │  ▂█▂  │  │\n## │ │ rate   │       │        │      │      │      │     │     │      │  ▂▂   │  │\n## │ │ base_f │   100 │    0.9 │   64 │   21 │    0 │  70 │  70 │  140 │ ▁▁ █  │  │\n## │ │ riends │       │        │      │      │      │     │     │      │       │  │\n## │ │ hip    │       │        │      │      │      │     │     │      │       │  │\n## │ │ base_e │   100 │    0.9 │  150 │   79 │   36 │  67 │ 200 │  610 │  ▆█▃  │  │\n## │ │ xperie │       │        │      │      │      │     │     │      │       │  │\n## │ │ nce    │       │        │      │      │      │     │     │      │       │  │\n## │ │ egg_ty │     0 │      1 │  1.3 │ 0.45 │    0 │   1 │   2 │    2 │    █  │  │\n## │ │ pe_num │       │        │      │      │      │     │     │      │   ▃   │  │\n## │ │ ber    │       │        │      │      │      │     │     │      │       │  │\n## │ │ percen │   240 │   0.77 │   55 │   20 │    0 │  50 │  50 │  100 │    █  │  │\n## │ │ tage_m │       │        │      │      │      │     │     │      │   ▂   │  │\n## │ │ ale    │       │        │      │      │      │     │     │      │       │  │\n## │ │ egg_cy │     1 │      1 │   30 │   29 │    5 │  20 │  25 │  120 │  █▂   │  │\n## │ │ cles   │       │        │      │      │      │     │     │      │   ▁   │  │\n## │ │ agains │     0 │      1 │ 0.87 │ 0.29 │    0 │   1 │   1 │    1 │ ▁  ▁  │  │\n## │ │ t_norm │       │        │      │      │      │     │     │      │   █   │  │\n## │ │ al     │       │        │      │      │      │     │     │      │       │  │\n## │ │ agains │     0 │      1 │  1.1 │ 0.72 │    0 │ 0.5 │   2 │    4 │ ▆█ ▄  │  │\n## │ │ t_fire │       │        │      │      │      │     │     │      │       │  │\n## │ │ agains │     0 │      1 │  1.1 │ 0.61 │    0 │ 0.5 │   1 │    4 │ ▄█ ▂  │  │\n## │ │ t_wate │       │        │      │      │      │     │     │      │       │  │\n## │ │ r      │       │        │      │      │      │     │     │      │       │  │\n## │ │ agains │     0 │      1 │    1 │ 0.65 │    0 │ 0.5 │   1 │    4 │ ▅█ ▃  │  │\n## │ │ t_elec │       │        │      │      │      │     │     │      │       │  │\n## │ │ tric   │       │        │      │      │      │     │     │      │       │  │\n## │ │ agains │     0 │      1 │    1 │ 0.75 │    0 │ 0.5 │   1 │    4 │ █▇ ▃  │  │\n## │ │ t_gras │       │        │      │      │      │     │     │      │   ▁   │  │\n## │ │ s      │       │        │      │      │      │     │     │      │       │  │\n## │ │ agains │     0 │      1 │  1.2 │ 0.76 │    0 │ 0.5 │   2 │    4 │ ▅█ ▅  │  │\n## │ │ t_ice  │       │        │      │      │      │     │     │      │   ▁   │  │\n## │ │ agains │     0 │      1 │  1.1 │ 0.75 │    0 │ 0.5 │   2 │    4 │ ▇█ ▅  │  │\n## │ │ t_figh │       │        │      │      │      │     │     │      │       │  │\n## │ │ t      │       │        │      │      │      │     │     │      │       │  │\n## │ │ agains │     0 │      1 │ 0.95 │ 0.54 │    0 │ 0.5 │   1 │    4 │ ▄█ ▂  │  │\n## │ │ t_pois │       │        │      │      │      │     │     │      │       │  │\n## │ │ on     │       │        │      │      │      │     │     │      │       │  │\n## │ │ agains │     0 │      1 │  1.1 │ 0.78 │    0 │ 0.5 │ 1.6 │    4 │ ▅█ ▄  │  │\n## │ │ t_grou │       │        │      │      │      │     │     │      │       │  │\n## │ │ nd     │       │        │      │      │      │     │     │      │       │  │\n## │ │ agains │     0 │      1 │  1.2 │ 0.59 │ 0.25 │   1 │   1 │    4 │  ▂█▃  │  │\n## │ │ t_flyi │       │        │      │      │      │     │     │      │       │  │\n## │ │ ng     │       │        │      │      │      │     │     │      │       │  │\n## │ │ agains │     0 │      1 │ 0.98 │  0.5 │    0 │   1 │   1 │    4 │ ▃█ ▁  │  │\n## │ │ t_psyc │       │        │      │      │      │     │     │      │       │  │\n## │ │ hic    │       │        │      │      │      │     │     │      │       │  │\n## │ │ agains │     0 │      1 │ 0.99 │  0.6 │    0 │ 0.5 │   1 │    4 │ ▇█ ▃  │  │\n## │ │ t_bug  │       │        │      │      │      │     │     │      │       │  │\n## │ │ agains │     0 │      1 │  1.2 │  0.7 │ 0.25 │   1 │   2 │    4 │  ▂█▃  │  │\n## │ │ t_rock │       │        │      │      │      │     │     │      │       │  │\n## │ │ agains │     0 │      1 │    1 │ 0.56 │    0 │   1 │   1 │    4 │ ▂█ ▂  │  │\n## │ │ t_ghos │       │        │      │      │      │     │     │      │       │  │\n## │ │ t      │       │        │      │      │      │     │     │      │       │  │\n## │ │ agains │     0 │      1 │ 0.98 │ 0.38 │    0 │   1 │   1 │    2 │ ▁▁ █  │  │\n## │ │ t_drag │       │        │      │      │      │     │     │      │   ▁   │  │\n## │ │ on     │       │        │      │      │      │     │     │      │       │  │\n## │ │ agains │     0 │      1 │  1.1 │ 0.45 │ 0.25 │   1 │   1 │    4 │  ▂█▂  │  │\n## │ │ t_dark │       │        │      │      │      │     │     │      │       │  │\n## │ │ agains │     0 │      1 │ 0.98 │  0.5 │    0 │ 0.5 │   1 │    4 │ ▅█ ▂  │  │\n## │ │ t_stee │       │        │      │      │      │     │     │      │       │  │\n## │ │ l      │       │        │      │      │      │     │     │      │       │  │\n## │ │ agains │     0 │      1 │  1.1 │ 0.53 │    0 │   1 │   1 │    4 │ ▂█ ▂  │  │\n## │ │ t_fair │       │        │      │      │      │     │     │      │       │  │\n## │ │ y      │       │        │      │      │      │     │     │      │       │  │\n## │ └────────┴───────┴────────┴──────┴──────┴──────┴─────┴─────┴──────┴───────┘  │\n## ╰──────────────────────────────────── End ─────────────────────────────────────╯\n```\n:::\n\n:::\n\n### Assessing Distributions\n\nWe are often also interested in the distribution of values.\n\n#### Categorical Variables\n\nOne useful way to assess the distribution of values is to generate a\ncross-tabular view of the data. This is mostly important for variables\nwith a relatively low number of categories - otherwise, it is usually\neasier to use a graphical summary method.\n\n##### Tabular Summaries {.unnumbered}\n\n::: panel-tabset\n###### R {.unnumbered}\n\nWe can generate cross-tabs for variables that we know are discrete (such\nas generation, which will always be a whole number). We can even\ngenerate cross-tabular views for a combination of two variables (or\ntheoretically more, but this gets hard to read and track).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(poke$generation)\n## \n##   1   2   3   4   5   6   7   8 \n## 192 107 165 121 171  85  99  88\n\ntable(poke$type_1, poke$type_2)\n##           \n##            Bug Dark Dragon Electric Fairy Fighting Fire Flying Ghost Grass\n##   Bug        0    0      0        4     2        4    2     14     1     6\n##   Dark       0    0      4        0     3        2    3      5     2     0\n##   Dragon     0    0      0        1     1        2    1      6     3     0\n##   Electric   0    2      2        0     2        0    1      6     1     1\n##   Fairy      0    0      0        0     0        0    0      2     0     0\n##   Fighting   0    1      0        0     0        0    0      1     1     0\n##   Fire       2    1      2        0     0        7    0      7     2     0\n##   Flying     0    0      2        0     0        0    0      0     0     0\n##   Ghost      0    1      2        0     1        0    3      3     0    11\n##   Grass      0    3      5        0     5        3    0      7     1     0\n##   Ground     0    3      2        1     0        0    1      4     4     0\n##   Ice        2    0      0        0     1        0    1      2     1     0\n##   Normal     0    0      1        0     5        4    0     27     0     2\n##   Poison     1    5      4        0     1        2    2      3     0     0\n##   Psychic    0    1      1        0     9        3    1      7     3     1\n##   Rock       2    2      2        3     3        1    2      6     0     2\n##   Steel      0    0      2        0     4        1    0      2     4     0\n##   Water      2    7      3        2     4        3    0      7     2     3\n##           \n##            Ground Ice Normal Poison Psychic Rock Steel Water\n##   Bug           2   0      0     12       2    3     7     3\n##   Dark          0   2      5      0       2    0     2     0\n##   Dragon        7   3      0      0       4    0     0     0\n##   Electric      0   2      2      3       1    0     4     1\n##   Fairy         0   0      0      0       0    0     1     0\n##   Fighting      0   1      0      0       3    0     3     0\n##   Fire          3   0      2      0       2    1     1     1\n##   Flying        0   0      0      0       0    0     1     1\n##   Ghost         2   0      0      4       0    0     0     0\n##   Grass         1   3      0     15       2    0     3     0\n##   Ground        0   0      0      0       2    3     4     0\n##   Ice           3   0      0      0       2    0     2     3\n##   Normal        1   0      0      0       3    0     0     1\n##   Poison        2   0      0      0       0    0     0     3\n##   Psychic       0   2      2      0       0    0     2     0\n##   Rock          6   2      0      1       2    0     4     6\n##   Steel         2   0      0      0       7    3     0     0\n##   Water        10   4      0      3       6    5     1     0\n```\n:::\n\n\n###### Python {.unnumbered}\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport numpy as np\n# For only one factor, use .groupby('colname')['colname'].count()\npoke.groupby(['generation'])['generation'].count()\n\n# for two or more factors, use pd.crosstab\n## generation\n## 1    192\n## 2    107\n## 3    165\n## 4    121\n## 5    171\n## 6     85\n## 7     99\n## 8     88\n## Name: generation, dtype: int64\npd.crosstab(index = poke['type_1'], columns = poke['type_2'])\n## type_2    Bug  Dark  Dragon  Electric  ...  Psychic  Rock  Steel  Water\n## type_1                                 ...                             \n## Bug         0     0       0         4  ...        2     3      7      3\n## Dark        0     0       4         0  ...        2     0      2      0\n## Dragon      0     0       0         1  ...        4     0      0      0\n## Electric    0     2       2         0  ...        1     0      4      1\n## Fairy       0     0       0         0  ...        0     0      1      0\n## Fighting    0     1       0         0  ...        3     0      3      0\n## Fire        2     1       2         0  ...        2     1      1      1\n## Flying      0     0       2         0  ...        0     0      1      1\n## Ghost       0     1       2         0  ...        0     0      0      0\n## Grass       0     3       5         0  ...        2     0      3      0\n## Ground      0     3       2         1  ...        2     3      4      0\n## Ice         2     0       0         0  ...        2     0      2      3\n## Normal      0     0       1         0  ...        3     0      0      1\n## Poison      1     5       4         0  ...        0     0      0      3\n## Psychic     0     1       1         0  ...        0     0      2      0\n## Rock        2     2       2         3  ...        2     0      4      6\n## Steel       0     0       2         0  ...        7     3      0      0\n## Water       2     7       3         2  ...        6     5      1      0\n## \n## [18 rows x 18 columns]\n```\n:::\n\n:::\n\n##### Frequency Plots {.unnumbered}\n\n::: panel-tabset\n###### Base R {.unnumbered}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(table(poke$generation)) # bar plot\n```\n\n::: {.cell-output-display}\n![](exploratory-data-analysis_files/figure-html/poke-distribution-plots-1.png){width=2100}\n:::\n:::\n\n\n###### R: ggplot2 {.unnumbered}\n\nWe generate a bar chart using `geom_bar`. It helps to tell R that\ngeneration (despite appearances) is categorical by declaring it a factor\nvariable. This ensures that we get a break on the x-axis at each\ngeneration.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nggplot(poke, aes(x = factor(generation))) +\n  geom_bar() +\n  xlab(\"Generation\") + ylab(\"# Pokemon\")\n```\n\n::: {.cell-output-display}\n![](exploratory-data-analysis_files/figure-html/poke-dist-plots-ggplot2-1.png){width=2100}\n:::\n:::\n\n\n\n###### Python: matplotlib {.unnumbered}\n\nWe generate a bar chart using the contingency table we generated earlier\ncombined with matplotlib's `plt.bar()`.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport matplotlib.pyplot as plt\n\ntab = poke.groupby(['generation'])['generation'].count()\n\nplt.bar(tab.keys(), tab.values, color = 'grey')\n## <BarContainer object of 8 artists>\nplt.xlabel(\"Generation\")\nplt.ylabel(\"# Pokemon\")\nplt.show()\n```\n\n::: {.cell-output-display}\n![](exploratory-data-analysis_files/figure-html/matplotlib-categorical-chart-1.png){width=672}\n:::\n:::\n\n\n\n###### Python: plotnine {.unnumbered}\n\nPlotnine is a ggplot2 clone for python, and for the most part, the code\nlooks almost exactly the same, minus a few python-specific tweaks to\naccount for different syntax conventions in each language.\n\nWe generate a bar chart using `geom_bar`. It helps to tell R that\ngeneration (despite appearances) is categorical by declaring it a factor\nvariable. This ensures that we get a break on the x-axis at each\ngeneration.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom plotnine import *\n\n(ggplot(aes(x = \"factor(generation)\"), data = poke) +\n  geom_bar() +\n  xlab(\"Generation\") + ylab(\"# Pokemon\"))\n## <ggplot: (8760388072340)>\n```\n\n::: {.cell-output-display}\n![](exploratory-data-analysis_files/figure-html/poke-dist-plots-plotnine-3.png){width=614}\n:::\n:::\n\n\n:::\n\n#### Quantitative Variables\n\nWe covered some numerical summary statistics in the numerical summary\nstatistic section above. In this section, we will primarily focus on\nvisualization methods for assessing the distribution of quantitative\nvariables.\n\n::: callout-note\n##### Note: R pipe {.unnumbered}\n\nThe code in this section uses the R pipe, `%>%`. The left side of the\npipe is passed as an argument to the right side. This makes code easier\nto read because it becomes a step-wise \"recipe\" instead of a nested mess\nof functions and parentheses.\n\n![In each step, the left hand side of the pipe is put into the first\nargument of the function. Source: [Arthur Welle\n(Github)](https://github.com/arthurwelle/VIS/blob/master/Pipe_Cake/)](https://github.com/arthurwelle/VIS/blob/master/Pipe_Cake/Pipe_baking_magrittr_backAssign.gif?raw=true){width=\"50%\"}\n:::\n\nWe can generate histograms[^exploratory-data-analysis-2] or kernel\ndensity plots (a continuous version of the histogram) to show us the\ndistribution of a continuous variable.\n\n[^exploratory-data-analysis-2]: A histogram is a chart which breaks up a\n    continuous variable into ranges, where the height of the bar is\n    proportional to the number of items in the range. A bar chart is\n    similar, but shows the number of occurrences of a discrete variable.\n\n::: panel-tabset\n##### Base R {.unnumbered}\n\nBy default, R uses ranges of $(a, b]$ in histograms, so we specify which\nbreaks will give us a desirable result. If we do not specify breaks, R\nwill pick them for us.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(poke$hp)\n```\n\n::: {.cell-output-display}\n![](exploratory-data-analysis_files/figure-html/poke-hp-out-5.png){width=48%}\n:::\n:::\n\n\nFor continuous variables, we can use histograms, or we can examine\nkernel density plots.\n\n\n::: {.cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\nlibrary(magrittr) # This provides the pipe command, %>%\n\nhist(poke$weight_kg)\n\npoke$weight_kg %>%\n  log10() %>% # Take the log - will transformation be useful w/ modeling?\n  hist(main = \"Histogram of Log10 Weight (Kg)\") # create a histogram\n\npoke$weight_kg %>%\n  density(na.rm = T) %>% # First, we compute the kernel density\n  # (na.rm = T says to ignore NA values)\n  plot(main = \"Density of Weight (Kg)\") # Then, we plot the result\n\n\npoke$weight_kg %>%\n  log10() %>% # Transform the variable\n  density(na.rm = T) %>% # Compute the density ignoring missing values\n  plot(main = \"Density of Log10 pokemon weight in Kg\") # Plot the result,\n    # changing the title of the plot to a meaningful value\n```\n\n::: {.cell-output-display}\n![Histogram of Pokemon Height (m)](exploratory-data-analysis_files/figure-html/poke-graphs-base-cts-1.png){width=900}\n:::\n\n::: {.cell-output-display}\n![Histogram of Pokemon Height (m, log 10)](exploratory-data-analysis_files/figure-html/poke-graphs-base-cts-2.png){width=900}\n:::\n\n::: {.cell-output-display}\n![Density of Pokemon Height (m)](exploratory-data-analysis_files/figure-html/poke-graphs-base-cts-3.png){width=900}\n:::\n\n::: {.cell-output-display}\n![Density of Pokemon Height (m, log 10)](exploratory-data-analysis_files/figure-html/poke-graphs-base-cts-4.png){width=900}\n:::\n:::\n\n\n##### Python: matplotlib {.unnumbered}\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport matplotlib.pyplot as plt\n\n# Create a 2x2 grid of plots with separate axes\n# This uses python multi-assignment to assign figures, axes\n# variables all in one go\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2)\n\npoke.weight_kg.plot.hist(ax = ax1) # first plot\nax1.set_title(\"Histogram of Weight (kg)\")\n\n\nnp.log10(poke.weight_kg).plot.hist(ax = ax2)\nax2.set_title(\"Histogram of Log10 Weight (kg)\")\n\npoke.weight_kg.plot.density(ax = ax3)\nax3.set_title(\"Density of Weight (kg)\")\n\nnp.log10(poke.weight_kg).plot.density(ax = ax4)\nax4.set_title(\"Density of Log10 Weight (kg)\")\n\nplt.tight_layout()\nplt.show()\n```\n\n::: {.cell-output-display}\n![Histogram and density plots of weight and log10 weight of different pokemon. The untransformed data are highly skewed, the transformed data are significantly less skewed.](exploratory-data-analysis_files/figure-html/poke-graphs-matplotlib-cts-1.png){width=672}\n:::\n:::\n\n\n##### R: ggplot2\n\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nggplot(poke, aes(x = height_m)) +\n  geom_histogram(bins = 30)\nggplot(poke, aes(x = height_m)) +\n  geom_histogram(bins = 30) +\n  scale_x_log10()\nggplot(poke, aes(x = height_m)) +\n  geom_density()\nggplot(poke, aes(x = height_m)) +\n  geom_density() +\n  scale_x_log10()\n```\n\n::: {.cell-output-display}\n![Density of Pokemon Height (m)](exploratory-data-analysis_files/figure-html/poke-ggplot2-cts-r-3.png){fig-align='center' width=900}\n:::\n\n::: {.cell-output-display}\n![Density of Pokemon Height (m, log 10)](exploratory-data-analysis_files/figure-html/poke-ggplot2-cts-r-4.png){fig-align='center' width=900}\n:::\n\n::: {.cell-output-display}\n![Histogram of Pokemon Height (m)](exploratory-data-analysis_files/figure-html/poke-ggplot2-cts-r-5.png){fig-align='center' width=900}\n:::\n\n::: {.cell-output-display}\n![Histogram of Pokemon Height (m, log 10)](exploratory-data-analysis_files/figure-html/poke-ggplot2-cts-r-6.png){fig-align='center' width=900}\n:::\n:::\n\n\nNotice that in ggplot2/plotnine, we transform the axes instead of the\ndata. This means that the units on the axis are true to the original,\nunlike in base R and matplotlib.\n\n##### Python: plotnine\n\n\n::: {.cell layout-ncol=\"2\" layout-align=\"center\"}\n\n```{.python .cell-code}\nggplot(poke, aes(x = 'height_m')) + geom_histogram(bins = 30)\n## <ggplot: (8760385199345)>\n```\n\n::: {.cell-output-display}\n![Histogram of Pokemon Height (m)](exploratory-data-analysis_files/figure-html/poke-ggplot2-cts-py-1.png){fig-align='center' width=614}\n:::\n\n```{.python .cell-code}\n(ggplot(poke, aes(x = 'height_m')) +\n  geom_histogram(bins = 30) +\n  scale_x_log10())\n## <ggplot: (8760388038801)>\n```\n\n::: {.cell-output-display}\n![Histogram of Pokemon Height (m, log 10)](exploratory-data-analysis_files/figure-html/poke-ggplot2-cts-py-2.png){fig-align='center' width=614}\n:::\n\n```{.python .cell-code}\n(ggplot(poke, aes(x = 'height_m')) +\n  geom_density())\n## <ggplot: (8760379866691)>\n```\n\n::: {.cell-output-display}\n![Density of Pokemon Height (m)](exploratory-data-analysis_files/figure-html/poke-ggplot2-cts-py-3.png){fig-align='center' width=614}\n:::\n\n```{.python .cell-code}\n(ggplot(poke, aes(x = 'height_m')) +\n  geom_density() +\n  scale_x_log10())\n## <ggplot: (8760435302410)>\n```\n\n::: {.cell-output-display}\n![Density of Pokemon Height (m, log 10)](exploratory-data-analysis_files/figure-html/poke-ggplot2-cts-py-4.png){fig-align='center' width=614}\n:::\n:::\n\n\nNotice that in ggplot2/plotnine, we transform the axes instead of the\ndata. This means that the units on the axis are true to the original,\nunlike in base R and matplotlib.\n:::\n\n### Relationships Between Variables\n#### Categorical - Categorical Relationships\n\n::: panel-tabset\n\n##### R: ggplot2 {.unnumbered}\n\nWe can generate a (simple) mosaic plot (the equivalent of a 2-dimensional\ncross-tabular view) using `geom_bar` with `position = 'fill'`, which\nscales each bar so that it ends at 1. I've flipped the axes using\n`coord_flip` so that you can read the labels more easily.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nggplot(poke, aes(x = factor(type_1), fill = factor(type_2))) +\n  geom_bar(color = \"black\", position = \"fill\") +\n  xlab(\"Type 1\") + ylab(\"Proportion of Pokemon w/ Type 2\") +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](exploratory-data-analysis_files/figure-html/poke-dist-plots-ggplot2-mosaic-9.png){width=2100}\n:::\n:::\n\n\nAnother way to look at this data is to bin it in x and y and shade the\nresulting bins by the number of data points in each bin. We can even add\nin labels so that this is at least as clear as the tabular view!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(poke, aes(x = factor(type_1), y = factor(type_2))) +\n  # Shade tiles according to the number of things in the bin\n  geom_tile(aes(fill = ..count..), stat = \"bin2d\") +\n  # Add the number of things in the bin to the top of the tile as text\n  geom_text(aes(label = ..count..), stat = 'bin2d') +\n  # Scale the tile fill\n  scale_fill_gradient2(limits = c(0, 100), low = \"white\", high = \"blue\", na.value = \"white\")\n```\n\n::: {.cell-output-display}\n![](exploratory-data-analysis_files/figure-html/poke-dist-plots-ggplot2-tile-1.png){width=2100}\n:::\n:::\n\n\n##### Base R {.unnumbered}\n\nBase R mosaic plots aren't nearly as pretty as the ggplot version, but I will at least show you how to create them. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(table(poke$type_1, poke$type_2)) \n```\n\n::: {.cell-output-display}\n![](exploratory-data-analysis_files/figure-html/mosaic-base-r-1.png){width=2100}\n:::\n\n```{.r .cell-code}\n# mosaic plot - hard to read b/c too many categories\n```\n:::\n\n\n##### Python: matplotlib {.unnumbered}\n\nTo get a mosaicplot, we need an additional library, called\n`statsmodels`, which we install with `pip install statsmodels` in the\nterminal.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport matplotlib.pyplot as plt\nfrom statsmodels.graphics.mosaicplot import mosaic\n\nmosaic(poke, ['type_1', 'type_2'], title = \"Pokemon Types\")\n## (<Figure size 700x500 with 3 Axes>, {('Grass', 'Poison'): (0.0, 0.0, 0.08162293604502865, 0.29574132492113564), ('Grass', 'Flying'): (0.0, 0.2988958990536278, 0.08162293604502865, 0.13801261829652994), ('Grass', 'Dragon'): (0.0, 0.4400630914826498, 0.08162293604502865, 0.09858044164037857), ('Grass', 'Normal'): (0.0, 0.5417981072555206, 0.08162293604502865, 0.0), ('Grass', 'Psychic'): (0.0, 0.5449526813880126, 0.08162293604502865, 0.03943217665615138), ('Grass', 'Steel'): (0.0, 0.5875394321766562, 0.08162293604502865, 0.05914826498422713), ('Grass', 'Ground'): (0.0, 0.6498422712933754, 0.08162293604502865, 0.019716088328075747), ('Grass', 'Fairy'): (0.0, 0.6727129337539433, 0.08162293604502865, 0.09858044164037852), ('Grass', 'Grass'): (0.0, 0.7744479495268138, 0.08162293604502865, 0.0), ('Grass', 'Fighting'): (0.0, 0.777602523659306, 0.08162293604502865, 0.05914826498422713), ('Grass', 'Electric'): (0.0, 0.8399053627760252, 0.08162293604502865, 0.0), ('Grass', 'Ice'): (0.0, 0.8430599369085173, 0.08162293604502865, 0.05914826498422713), ('Grass', 'Dark'): (0.0, 0.9053627760252366, 0.08162293604502865, 0.05914826498422713), ('Grass', 'Ghost'): (0.0, 0.9676656151419558, 0.08162293604502865, 0.019716088328075747), ('Grass', 'Rock'): (0.0, 0.9905362776025236, 0.08162293604502865, 0.0), ('Grass', 'Water'): (0.0, 0.9936908517350158, 0.08162293604502865, 0.0), ('Grass', 'Fire'): (0.0, 0.9968454258675078, 0.08162293604502865, 0.0), ('Grass', 'Bug'): (0.0, 1.0, 0.08162293604502865, 0.0), ('Fire', 'Poison'): (0.08623123097590422, 0.0, 0.05271481286241434, 0.0), ('Fire', 'Flying'): (0.08623123097590422, 0.003154574132492114, 0.05271481286241434, 0.213696957362369), ('Fire', 'Dragon'): (0.08623123097590422, 0.2200061056273532, 0.05271481286241434, 0.06105627353210545), ('Fire', 'Normal'): (0.08623123097590422, 0.2842169532919508, 0.05271481286241434, 0.06105627353210542), ('Fire', 'Psychic'): (0.08623123097590422, 0.3484278009565483, 0.05271481286241434, 0.06105627353210542), ('Fire', 'Steel'): (0.08623123097590422, 0.41263864862114585, 0.05271481286241434, 0.030528136766052684), ('Fire', 'Ground'): (0.08623123097590422, 0.44632135951969065, 0.05271481286241434, 0.09158441029815811), ('Fire', 'Fairy'): (0.08623123097590422, 0.5410603439503409, 0.05271481286241434, 0.0), ('Fire', 'Grass'): (0.08623123097590422, 0.544214918082833, 0.05271481286241434, 0.0), ('Fire', 'Fighting'): (0.08623123097590422, 0.5473694922153252, 0.05271481286241434, 0.21369695736236902), ('Fire', 'Electric'): (0.08623123097590422, 0.7642210237101862, 0.05271481286241434, 0.0), ('Fire', 'Ice'): (0.08623123097590422, 0.7673755978426783, 0.05271481286241434, 0.0), ('Fire', 'Dark'): (0.08623123097590422, 0.7705301719751705, 0.05271481286241434, 0.030528136766052684), ('Fire', 'Ghost'): (0.08623123097590422, 0.8042128828737153, 0.05271481286241434, 0.06105627353210548), ('Fire', 'Rock'): (0.08623123097590422, 0.8684237305383128, 0.05271481286241434, 0.030528136766052684), ('Fire', 'Water'): (0.08623123097590422, 0.9021064414368577, 0.05271481286241434, 0.030528136766052684), ('Fire', 'Fire'): (0.08623123097590422, 0.9357891523354025, 0.05271481286241434, 0.0), ('Fire', 'Bug'): (0.08623123097590422, 0.9389437264678945, 0.05271481286241434, 0.06105627353210548), ('Bug', 'Poison'): (0.14355433876919416, 0.0, 0.10542962572482865, 0.18316882059631628), ('Bug', 'Flying'): (0.14355433876919416, 0.18632339472880838, 0.10542962572482865, 0.21369695736236902), ('Bug', 'Dragon'): (0.14355433876919416, 0.4031749262236695, 0.10542962572482865, 0.0), ('Bug', 'Normal'): (0.14355433876919416, 0.4063295003561616, 0.10542962572482865, 0.0), ('Bug', 'Psychic'): (0.14355433876919416, 0.4094840744886537, 0.10542962572482865, 0.030528136766052684), ('Bug', 'Steel'): (0.14355433876919416, 0.4431667853871985, 0.10542962572482865, 0.10684847868118455), ('Bug', 'Ground'): (0.14355433876919416, 0.5531698382008752, 0.10542962572482865, 0.030528136766052684), ('Bug', 'Fairy'): (0.14355433876919416, 0.58685254909942, 0.10542962572482865, 0.030528136766052684), ('Bug', 'Grass'): (0.14355433876919416, 0.6205352599979648, 0.10542962572482865, 0.09158441029815816), ('Bug', 'Fighting'): (0.14355433876919416, 0.7152742444286151, 0.10542962572482865, 0.06105627353210537), ('Bug', 'Electric'): (0.14355433876919416, 0.7794850920932126, 0.10542962572482865, 0.06105627353210548), ('Bug', 'Ice'): (0.14355433876919416, 0.8436959397578101, 0.10542962572482865, 0.0), ('Bug', 'Dark'): (0.14355433876919416, 0.8468505138903023, 0.10542962572482865, 0.0), ('Bug', 'Ghost'): (0.14355433876919416, 0.8500050880227944, 0.10542962572482865, 0.015264068383026342), ('Bug', 'Rock'): (0.14355433876919416, 0.8684237305383128, 0.10542962572482865, 0.04579220514907903), ('Bug', 'Water'): (0.14355433876919416, 0.917370509819884, 0.10542962572482865, 0.045792205149079133), ('Bug', 'Fire'): (0.14355433876919416, 0.9663172891014551, 0.10542962572482865, 0.030528136766052684), ('Bug', 'Bug'): (0.14355433876919416, 1.0, 0.10542962572482865, 0.0), ('Normal', 'Poison'): (0.2535922594248984, 0.0, 0.07482102470794294, 0.0), ('Normal', 'Flying'): (0.2535922594248984, 0.003154574132492114, 0.07482102470794294, 0.5807284198451391), ('Normal', 'Dragon'): (0.2535922594248984, 0.5870375681101234, 0.07482102470794294, 0.021508459994264394), ('Normal', 'Normal'): (0.2535922594248984, 0.6117006022368798, 0.07482102470794294, 0.0), ('Normal', 'Psychic'): (0.2535922594248984, 0.6148551763693719, 0.07482102470794294, 0.06452537998279329), ('Normal', 'Steel'): (0.2535922594248984, 0.6825351304846574, 0.07482102470794294, 0.0), ('Normal', 'Ground'): (0.2535922594248984, 0.6856897046171495, 0.07482102470794294, 0.021508459994264394), ('Normal', 'Fairy'): (0.2535922594248984, 0.7103527387439059, 0.07482102470794294, 0.10754229997132206), ('Normal', 'Grass'): (0.2535922594248984, 0.8210496128477202, 0.07482102470794294, 0.04301691998852879), ('Normal', 'Fighting'): (0.2535922594248984, 0.8672211069687411, 0.07482102470794294, 0.08603383997705767), ('Normal', 'Electric'): (0.2535922594248984, 0.9564095210782909, 0.07482102470794294, 0.0), ('Normal', 'Ice'): (0.2535922594248984, 0.9595640952107829, 0.07482102470794294, 0.0), ('Normal', 'Dark'): (0.2535922594248984, 0.9627186693432751, 0.07482102470794294, 0.0), ('Normal', 'Ghost'): (0.2535922594248984, 0.9658732434757671, 0.07482102470794294, 0.0), ('Normal', 'Rock'): (0.2535922594248984, 0.9690278176082593, 0.07482102470794294, 0.0), ('Normal', 'Water'): (0.2535922594248984, 0.9721823917407515, 0.07482102470794294, 0.021508459994264394), ('Normal', 'Fire'): (0.2535922594248984, 0.9968454258675078, 0.07482102470794294, 0.0), ('Normal', 'Bug'): (0.2535922594248984, 1.0, 0.07482102470794294, 0.0), ('Dark', 'Poison'): (0.33302157906371693, 0.0, 0.05101433502814293, 0.0), ('Dark', 'Flying'): (0.33302157906371693, 0.003154574132492114, 0.05101433502814293, 0.15772870662460567), ('Dark', 'Dragon'): (0.33302157906371693, 0.16403785488958988, 0.05101433502814293, 0.12618296529968454), ('Dark', 'Normal'): (0.33302157906371693, 0.29337539432176657, 0.05101433502814293, 0.1577287066246057), ('Dark', 'Psychic'): (0.33302157906371693, 0.45425867507886436, 0.05101433502814293, 0.06309148264984225), ('Dark', 'Steel'): (0.33302157906371693, 0.5205047318611988, 0.05101433502814293, 0.06309148264984225), ('Dark', 'Ground'): (0.33302157906371693, 0.5867507886435331, 0.05101433502814293, 0.0), ('Dark', 'Fairy'): (0.33302157906371693, 0.5899053627760252, 0.05101433502814293, 0.09463722397476339), ('Dark', 'Grass'): (0.33302157906371693, 0.6876971608832807, 0.05101433502814293, 0.0), ('Dark', 'Fighting'): (0.33302157906371693, 0.6908517350157729, 0.05101433502814293, 0.06309148264984236), ('Dark', 'Electric'): (0.33302157906371693, 0.7570977917981073, 0.05101433502814293, 0.0), ('Dark', 'Ice'): (0.33302157906371693, 0.7602523659305994, 0.05101433502814293, 0.06309148264984225), ('Dark', 'Dark'): (0.33302157906371693, 0.8264984227129338, 0.05101433502814293, 0.0), ('Dark', 'Ghost'): (0.33302157906371693, 0.8296529968454259, 0.05101433502814293, 0.06309148264984225), ('Dark', 'Rock'): (0.33302157906371693, 0.8958990536277602, 0.05101433502814293, 0.0), ('Dark', 'Water'): (0.33302157906371693, 0.8990536277602524, 0.05101433502814293, 0.0), ('Dark', 'Fire'): (0.33302157906371693, 0.9022082018927445, 0.05101433502814293, 0.09463722397476339), ('Dark', 'Bug'): (0.33302157906371693, 1.0, 0.05101433502814293, 0.0), ('Electric', 'Poison'): (0.38864420902273544, 0.0, 0.04761337935960002, 0.1013970256872465), ('Electric', 'Flying'): (0.38864420902273544, 0.1045515998197386, 0.04761337935960002, 0.20279405137449302), ('Electric', 'Dragon'): (0.38864420902273544, 0.3105002253267238, 0.04761337935960002, 0.06759801712483098), ('Electric', 'Normal'): (0.38864420902273544, 0.38125281658404686, 0.04761337935960002, 0.06759801712483103), ('Electric', 'Psychic'): (0.38864420902273544, 0.45200540784137, 0.04761337935960002, 0.03379900856241549), ('Electric', 'Steel'): (0.38864420902273544, 0.48895899053627767, 0.04761337935960002, 0.13519603424966206), ('Electric', 'Ground'): (0.38864420902273544, 0.6273095989184319, 0.04761337935960002, 0.0), ('Electric', 'Fairy'): (0.38864420902273544, 0.6304641730509238, 0.04761337935960002, 0.06759801712483098), ('Electric', 'Grass'): (0.38864420902273544, 0.701216764308247, 0.04761337935960002, 0.03379900856241549), ('Electric', 'Fighting'): (0.38864420902273544, 0.7381703470031546, 0.04761337935960002, 0.0), ('Electric', 'Electric'): (0.38864420902273544, 0.7413249211356467, 0.04761337935960002, 0.0), ('Electric', 'Ice'): (0.38864420902273544, 0.7444794952681387, 0.04761337935960002, 0.06759801712483098), ('Electric', 'Dark'): (0.38864420902273544, 0.815232086525462, 0.04761337935960002, 0.06759801712483109), ('Electric', 'Ghost'): (0.38864420902273544, 0.8859846777827851, 0.04761337935960002, 0.03379900856241549), ('Electric', 'Rock'): (0.38864420902273544, 0.9229382604776927, 0.04761337935960002, 0.0), ('Electric', 'Water'): (0.38864420902273544, 0.9260928346101849, 0.04761337935960002, 0.03379900856241549), ('Electric', 'Fire'): (0.38864420902273544, 0.9630464173050924, 0.04761337935960002, 0.03379900856241549), ('Electric', 'Bug'): (0.38864420902273544, 1.0, 0.04761337935960002, 0.0), ('Ice', 'Poison'): (0.44086588331321097, 0.0, 0.028908123182614334, 0.0), ('Ice', 'Flying'): (0.44086588331321097, 0.003154574132492114, 0.028908123182614334, 0.11133791055854518), ('Ice', 'Dragon'): (0.44086588331321097, 0.11764705882352941, 0.028908123182614334, 0.0), ('Ice', 'Normal'): (0.44086588331321097, 0.12080163295602153, 0.028908123182614334, 0.0), ('Ice', 'Psychic'): (0.44086588331321097, 0.12395620708851364, 0.028908123182614334, 0.11133791055854518), ('Ice', 'Steel'): (0.44086588331321097, 0.23844869177955094, 0.028908123182614334, 0.11133791055854521), ('Ice', 'Ground'): (0.44086588331321097, 0.35294117647058826, 0.028908123182614334, 0.16700686583781776), ('Ice', 'Fairy'): (0.44086588331321097, 0.5231026164408982, 0.028908123182614334, 0.055668955279272604), ('Ice', 'Grass'): (0.44086588331321097, 0.5819261458526628, 0.028908123182614334, 0.0), ('Ice', 'Fighting'): (0.44086588331321097, 0.585080719985155, 0.028908123182614334, 0.0), ('Ice', 'Electric'): (0.44086588331321097, 0.5882352941176471, 0.028908123182614334, 0.0), ('Ice', 'Ice'): (0.44086588331321097, 0.5913898682501392, 0.028908123182614334, 0.0), ('Ice', 'Dark'): (0.44086588331321097, 0.5945444423826314, 0.028908123182614334, 0.0), ('Ice', 'Ghost'): (0.44086588331321097, 0.5976990165151235, 0.028908123182614334, 0.055668955279272604), ('Ice', 'Rock'): (0.44086588331321097, 0.6565225459268881, 0.028908123182614334, 0.0), ('Ice', 'Water'): (0.44086588331321097, 0.6596771200593803, 0.028908123182614334, 0.1670068658378177), ('Ice', 'Fire'): (0.44086588331321097, 0.8298385600296901, 0.028908123182614334, 0.055668955279272604), ('Ice', 'Bug'): (0.44086588331321097, 0.8886620894414548, 0.028908123182614334, 0.11133791055854521), ('Poison', 'Poison'): (0.4743823014267009, 0.0, 0.03911099018824293, 0.0), ('Poison', 'Flying'): (0.4743823014267009, 0.003154574132492114, 0.03911099018824293, 0.12343985735838706), ('Poison', 'Dragon'): (0.4743823014267009, 0.12974900562337127, 0.03911099018824293, 0.16458647647784944), ('Poison', 'Normal'): (0.4743823014267009, 0.29749005623371283, 0.03911099018824293, 0.0), ('Poison', 'Psychic'): (0.4743823014267009, 0.3006446303662049, 0.03911099018824293, 0.0), ('Poison', 'Steel'): (0.4743823014267009, 0.3037992044986971, 0.03911099018824293, 0.0), ('Poison', 'Ground'): (0.4743823014267009, 0.30695377863118917, 0.03911099018824293, 0.0822932382389247), ('Poison', 'Fairy'): (0.4743823014267009, 0.39240159100260597, 0.03911099018824293, 0.041146619119462324), ('Poison', 'Grass'): (0.4743823014267009, 0.43670278425456044, 0.03911099018824293, 0.0), ('Poison', 'Fighting'): (0.4743823014267009, 0.43985735838705253, 0.03911099018824293, 0.0822932382389247), ('Poison', 'Electric'): (0.4743823014267009, 0.5253051707584694, 0.03911099018824293, 0.0), ('Poison', 'Ice'): (0.4743823014267009, 0.5284597448909614, 0.03911099018824293, 0.0), ('Poison', 'Dark'): (0.4743823014267009, 0.5316143190234536, 0.03911099018824293, 0.20573309559731173), ('Poison', 'Ghost'): (0.4743823014267009, 0.7405019887532575, 0.03911099018824293, 0.0), ('Poison', 'Rock'): (0.4743823014267009, 0.7436565628857494, 0.03911099018824293, 0.0), ('Poison', 'Water'): (0.4743823014267009, 0.7468111370182416, 0.03911099018824293, 0.12343985735838708), ('Poison', 'Fire'): (0.4743823014267009, 0.8734055685091209, 0.03911099018824293, 0.08229323823892476), ('Poison', 'Bug'): (0.4743823014267009, 0.9588533808805376, 0.03911099018824293, 0.041146619119462324), ('Ground', 'Poison'): (0.5181015865458195, 0.0, 0.040811468022514286, 0.0), ('Ground', 'Flying'): (0.5181015865458195, 0.003154574132492114, 0.040811468022514286, 0.15772870662460567), ('Ground', 'Dragon'): (0.5181015865458195, 0.16403785488958988, 0.040811468022514286, 0.07886435331230285), ('Ground', 'Normal'): (0.5181015865458195, 0.24605678233438488, 0.040811468022514286, 0.0), ('Ground', 'Psychic'): (0.5181015865458195, 0.24921135646687695, 0.040811468022514286, 0.07886435331230282), ('Ground', 'Steel'): (0.5181015865458195, 0.3312302839116719, 0.040811468022514286, 0.1577287066246057), ('Ground', 'Ground'): (0.5181015865458195, 0.49211356466876977, 0.040811468022514286, 0.0), ('Ground', 'Fairy'): (0.5181015865458195, 0.4952681388012618, 0.040811468022514286, 0.0), ('Ground', 'Grass'): (0.5181015865458195, 0.4984227129337539, 0.040811468022514286, 0.0), ('Ground', 'Fighting'): (0.5181015865458195, 0.501577287066246, 0.040811468022514286, 0.0), ('Ground', 'Electric'): (0.5181015865458195, 0.5047318611987381, 0.040811468022514286, 0.03943217665615138), ('Ground', 'Ice'): (0.5181015865458195, 0.5473186119873816, 0.040811468022514286, 0.0), ('Ground', 'Dark'): (0.5181015865458195, 0.5504731861198738, 0.040811468022514286, 0.11829652996845426), ('Ground', 'Ghost'): (0.5181015865458195, 0.6719242902208201, 0.040811468022514286, 0.15772870662460575), ('Ground', 'Rock'): (0.5181015865458195, 0.832807570977918, 0.040811468022514286, 0.11829652996845426), ('Ground', 'Water'): (0.5181015865458195, 0.9542586750788643, 0.040811468022514286, 0.0), ('Ground', 'Fire'): (0.5181015865458195, 0.9574132492113565, 0.040811468022514286, 0.03943217665615138), ('Ground', 'Bug'): (0.5181015865458195, 1.0, 0.040811468022514286, 0.0), ('Water', 'Poison'): (0.5635213494992093, 0.0, 0.10542962572482868, 0.04579220514907907), ('Water', 'Flying'): (0.5635213494992093, 0.04894677928157118, 0.10542962572482868, 0.1068484786811845), ('Water', 'Dragon'): (0.5635213494992093, 0.15894983209524777, 0.10542962572482868, 0.04579220514907908), ('Water', 'Normal'): (0.5635213494992093, 0.207896611376819, 0.10542962572482868, 0.0), ('Water', 'Psychic'): (0.5635213494992093, 0.2110511855093111, 0.10542962572482868, 0.09158441029815814), ('Water', 'Steel'): (0.5635213494992093, 0.30579016993996133, 0.10542962572482868, 0.015264068383026342), ('Water', 'Ground'): (0.5635213494992093, 0.32420881245547983, 0.10542962572482868, 0.15264068383026358), ('Water', 'Fairy'): (0.5635213494992093, 0.4800040704182355, 0.10542962572482868, 0.06105627353210537), ('Water', 'Grass'): (0.5635213494992093, 0.544214918082833, 0.10542962572482868, 0.045792205149079133), ('Water', 'Fighting'): (0.5635213494992093, 0.5931616973644043, 0.10542962572482868, 0.04579220514907903), ('Water', 'Electric'): (0.5635213494992093, 0.6421084766459754, 0.10542962572482868, 0.030528136766052684), ('Water', 'Ice'): (0.5635213494992093, 0.6757911875445202, 0.10542962572482868, 0.06105627353210548), ('Water', 'Dark'): (0.5635213494992093, 0.7400020352091178, 0.10542962572482868, 0.10684847868118451), ('Water', 'Ghost'): (0.5635213494992093, 0.8500050880227944, 0.10542962572482868, 0.030528136766052684), ('Water', 'Rock'): (0.5635213494992093, 0.8836877989213392, 0.10542962572482868, 0.07632034191513182), ('Water', 'Water'): (0.5635213494992093, 0.9631627149689631, 0.10542962572482868, 0.0), ('Water', 'Fire'): (0.5635213494992093, 0.9663172891014551, 0.10542962572482868, 0.0), ('Water', 'Bug'): (0.5635213494992093, 0.9694718632339473, 0.10542962572482868, 0.030528136766052684), ('Rock', 'Poison'): (0.6735592701549136, 0.0, 0.07482102470794294, 0.02150845999426441), ('Rock', 'Flying'): (0.6735592701549136, 0.024663034126756526, 0.07482102470794294, 0.12905075996558646), ('Rock', 'Dragon'): (0.6735592701549136, 0.1568683682248351, 0.07482102470794294, 0.043016919988528836), ('Rock', 'Normal'): (0.6735592701549136, 0.20303986234585605, 0.07482102470794294, 0.0), ('Rock', 'Psychic'): (0.6735592701549136, 0.20619443647834818, 0.07482102470794294, 0.04301691998852881), ('Rock', 'Steel'): (0.6735592701549136, 0.25236593059936907, 0.07482102470794294, 0.08603383997705762), ('Rock', 'Ground'): (0.6735592701549136, 0.3415543447089188, 0.07482102470794294, 0.12905075996558651), ('Rock', 'Fairy'): (0.6735592701549136, 0.47375967880699743, 0.07482102470794294, 0.06452537998279317), ('Rock', 'Grass'): (0.6735592701549136, 0.5414396329222827, 0.07482102470794294, 0.04301691998852889), ('Rock', 'Fighting'): (0.6735592701549136, 0.5876111270433038, 0.07482102470794294, 0.021508459994264394), ('Rock', 'Electric'): (0.6735592701549136, 0.6122741611700603, 0.07482102470794294, 0.06452537998279317), ('Rock', 'Ice'): (0.6735592701549136, 0.6799541152853456, 0.07482102470794294, 0.04301691998852889), ('Rock', 'Dark'): (0.6735592701549136, 0.7261256094063666, 0.07482102470794294, 0.04301691998852879), ('Rock', 'Ghost'): (0.6735592701549136, 0.7722971035273875, 0.07482102470794294, 0.0), ('Rock', 'Rock'): (0.6735592701549136, 0.7754516776598795, 0.07482102470794294, 0.0), ('Rock', 'Water'): (0.6735592701549136, 0.7786062517923718, 0.07482102470794294, 0.12905075996558646), ('Rock', 'Fire'): (0.6735592701549136, 0.9108115858904502, 0.07482102470794294, 0.04301691998852889), ('Rock', 'Bug'): (0.6735592701549136, 0.9569830800114713, 0.07482102470794294, 0.04301691998852879), ('Psychic', 'Poison'): (0.7529885897937321, 0.0, 0.05441529069668575, 0.0), ('Psychic', 'Flying'): (0.7529885897937321, 0.003154574132492114, 0.05441529069668575, 0.20701892744479497), ('Psychic', 'Dragon'): (0.7529885897937321, 0.21332807570977919, 0.05441529069668575, 0.029574132492113565), ('Psychic', 'Normal'): (0.7529885897937321, 0.24605678233438488, 0.05441529069668575, 0.05914826498422713), ('Psychic', 'Psychic'): (0.7529885897937321, 0.30835962145110407, 0.05441529069668575, 0.0), ('Psychic', 'Steel'): (0.7529885897937321, 0.3115141955835962, 0.05441529069668575, 0.05914826498422713), ('Psychic', 'Ground'): (0.7529885897937321, 0.37381703470031546, 0.05441529069668575, 0.0), ('Psychic', 'Fairy'): (0.7529885897937321, 0.37697160883280756, 0.05441529069668575, 0.2661671924290221), ('Psychic', 'Grass'): (0.7529885897937321, 0.6462933753943217, 0.05441529069668575, 0.029574132492113565), ('Psychic', 'Fighting'): (0.7529885897937321, 0.6790220820189274, 0.05441529069668575, 0.0887223974763407), ('Psychic', 'Electric'): (0.7529885897937321, 0.7708990536277602, 0.05441529069668575, 0.0), ('Psychic', 'Ice'): (0.7529885897937321, 0.7740536277602523, 0.05441529069668575, 0.05914826498422713), ('Psychic', 'Dark'): (0.7529885897937321, 0.8363564668769716, 0.05441529069668575, 0.029574132492113565), ('Psychic', 'Ghost'): (0.7529885897937321, 0.8690851735015773, 0.05441529069668575, 0.0887223974763407), ('Psychic', 'Rock'): (0.7529885897937321, 0.9609621451104101, 0.05441529069668575, 0.0), ('Psychic', 'Water'): (0.7529885897937321, 0.9641167192429023, 0.05441529069668575, 0.0), ('Psychic', 'Fire'): (0.7529885897937321, 0.9672712933753943, 0.05441529069668575, 0.029574132492113565), ('Psychic', 'Bug'): (0.7529885897937321, 1.0, 0.05441529069668575, 0.0), ('Ghost', 'Poison'): (0.8120121754212933, 0.0, 0.04591290152532861, 0.14020329477742727), ('Ghost', 'Flying'): (0.8120121754212933, 0.14335786890991936, 0.04591290152532861, 0.10515247108307045), ('Ghost', 'Dragon'): (0.8120121754212933, 0.2516649141254819, 0.04591290152532861, 0.07010164738871363), ('Ghost', 'Normal'): (0.8120121754212933, 0.3249211356466877, 0.04591290152532861, 0.0), ('Ghost', 'Psychic'): (0.8120121754212933, 0.32807570977917977, 0.04591290152532861, 0.0), ('Ghost', 'Steel'): (0.8120121754212933, 0.3312302839116719, 0.04591290152532861, 0.0), ('Ghost', 'Ground'): (0.8120121754212933, 0.33438485804416407, 0.04591290152532861, 0.07010164738871363), ('Ghost', 'Fairy'): (0.8120121754212933, 0.40764107956536977, 0.04591290152532861, 0.03505082369435682), ('Ghost', 'Grass'): (0.8120121754212933, 0.4458464773922187, 0.04591290152532861, 0.38555906063792506), ('Ghost', 'Fighting'): (0.8120121754212933, 0.8345601121626359, 0.04591290152532861, 0.0), ('Ghost', 'Electric'): (0.8120121754212933, 0.8377146862951279, 0.04591290152532861, 0.0), ('Ghost', 'Ice'): (0.8120121754212933, 0.84086926042762, 0.04591290152532861, 0.0), ('Ghost', 'Dark'): (0.8120121754212933, 0.8440238345601122, 0.04591290152532861, 0.03505082369435676), ('Ghost', 'Ghost'): (0.8120121754212933, 0.882229232386961, 0.04591290152532861, 0.0), ('Ghost', 'Rock'): (0.8120121754212933, 0.8853838065194531, 0.04591290152532861, 0.0), ('Ghost', 'Water'): (0.8120121754212933, 0.8885383806519453, 0.04591290152532861, 0.0), ('Ghost', 'Fire'): (0.8120121754212933, 0.8916929547844374, 0.04591290152532861, 0.1051524710830705), ('Ghost', 'Bug'): (0.8120121754212933, 1.0, 0.04591290152532861, 0.0), ('Dragon', 'Poison'): (0.8625333718774976, 0.0, 0.04761337935960012, 0.0), ('Dragon', 'Flying'): (0.8625333718774976, 0.003154574132492114, 0.04761337935960012, 0.202794051374493), ('Dragon', 'Dragon'): (0.8625333718774976, 0.2091031996394772, 0.04761337935960012, 0.0), ('Dragon', 'Normal'): (0.8625333718774976, 0.21225777377196936, 0.04761337935960012, 0.0), ('Dragon', 'Psychic'): (0.8625333718774976, 0.21541234790446145, 0.04761337935960012, 0.13519603424966203), ('Dragon', 'Steel'): (0.8625333718774976, 0.3537629562866156, 0.04761337935960012, 0.0), ('Dragon', 'Ground'): (0.8625333718774976, 0.35691753041910773, 0.04761337935960012, 0.23659305993690846), ('Dragon', 'Fairy'): (0.8625333718774976, 0.5966651644885083, 0.04761337935960012, 0.03379900856241559), ('Dragon', 'Grass'): (0.8625333718774976, 0.6336187471834159, 0.04761337935960012, 0.0), ('Dragon', 'Fighting'): (0.8625333718774976, 0.6367733213159081, 0.04761337935960012, 0.06759801712483098), ('Dragon', 'Electric'): (0.8625333718774976, 0.7075259125732312, 0.04761337935960012, 0.03379900856241549), ('Dragon', 'Ice'): (0.8625333718774976, 0.7444794952681387, 0.04761337935960012, 0.10139702568724647), ('Dragon', 'Dark'): (0.8625333718774976, 0.8490310950878774, 0.04761337935960012, 0.0), ('Dragon', 'Ghost'): (0.8625333718774976, 0.8521856692203695, 0.04761337935960012, 0.10139702568724657), ('Dragon', 'Rock'): (0.8625333718774976, 0.9567372690401083, 0.04761337935960012, 0.0), ('Dragon', 'Water'): (0.8625333718774976, 0.9598918431726002, 0.04761337935960012, 0.0), ('Dragon', 'Fire'): (0.8625333718774976, 0.9630464173050924, 0.04761337935960012, 0.03379900856241549), ('Dragon', 'Bug'): (0.8625333718774976, 1.0, 0.04761337935960012, 0.0), ('Fairy', 'Poison'): (0.9147550461679732, 0.0, 0.0051014335028142215, 0.0), ('Fairy', 'Flying'): (0.9147550461679732, 0.003154574132492114, 0.0051014335028142215, 0.6309148264984227), ('Fairy', 'Dragon'): (0.9147550461679732, 0.637223974763407, 0.0051014335028142215, 0.0), ('Fairy', 'Normal'): (0.9147550461679732, 0.6403785488958991, 0.0051014335028142215, 0.0), ('Fairy', 'Psychic'): (0.9147550461679732, 0.6435331230283912, 0.0051014335028142215, 0.0), ('Fairy', 'Steel'): (0.9147550461679732, 0.6466876971608833, 0.0051014335028142215, 0.3154574132492114), ('Fairy', 'Ground'): (0.9147550461679732, 0.9652996845425867, 0.0051014335028142215, 0.0), ('Fairy', 'Fairy'): (0.9147550461679732, 0.968454258675079, 0.0051014335028142215, 0.0), ('Fairy', 'Grass'): (0.9147550461679732, 0.9716088328075709, 0.0051014335028142215, 0.0), ('Fairy', 'Fighting'): (0.9147550461679732, 0.9747634069400631, 0.0051014335028142215, 0.0), ('Fairy', 'Electric'): (0.9147550461679732, 0.9779179810725553, 0.0051014335028142215, 0.0), ('Fairy', 'Ice'): (0.9147550461679732, 0.9810725552050473, 0.0051014335028142215, 0.0), ('Fairy', 'Dark'): (0.9147550461679732, 0.9842271293375395, 0.0051014335028142215, 0.0), ('Fairy', 'Ghost'): (0.9147550461679732, 0.9873817034700316, 0.0051014335028142215, 0.0), ('Fairy', 'Rock'): (0.9147550461679732, 0.9905362776025236, 0.0051014335028142215, 0.0), ('Fairy', 'Water'): (0.9147550461679732, 0.9936908517350158, 0.0051014335028142215, 0.0), ('Fairy', 'Fire'): (0.9147550461679732, 0.9968454258675078, 0.0051014335028142215, 0.0), ('Fairy', 'Bug'): (0.9147550461679732, 1.0, 0.0051014335028142215, 0.0), ('Steel', 'Poison'): (0.924464774601663, 0.0, 0.0425119458567858, 0.0), ('Steel', 'Flying'): (0.924464774601663, 0.003154574132492114, 0.0425119458567858, 0.07570977917981073), ('Steel', 'Dragon'): (0.924464774601663, 0.08201892744479496, 0.0425119458567858, 0.07570977917981073), ('Steel', 'Normal'): (0.924464774601663, 0.16088328075709782, 0.0425119458567858, 0.0), ('Steel', 'Psychic'): (0.924464774601663, 0.1640378548895899, 0.0425119458567858, 0.26498422712933756), ('Steel', 'Steel'): (0.924464774601663, 0.4321766561514196, 0.0425119458567858, 0.0), ('Steel', 'Ground'): (0.924464774601663, 0.4353312302839117, 0.0425119458567858, 0.07570977917981074), ('Steel', 'Fairy'): (0.924464774601663, 0.5141955835962145, 0.0425119458567858, 0.15141955835962148), ('Steel', 'Grass'): (0.924464774601663, 0.6687697160883281, 0.0425119458567858, 0.0), ('Steel', 'Fighting'): (0.924464774601663, 0.6719242902208202, 0.0425119458567858, 0.037854889589905294), ('Steel', 'Electric'): (0.924464774601663, 0.7129337539432177, 0.0425119458567858, 0.0), ('Steel', 'Ice'): (0.924464774601663, 0.7160883280757098, 0.0425119458567858, 0.0), ('Steel', 'Dark'): (0.924464774601663, 0.7192429022082019, 0.0425119458567858, 0.0), ('Steel', 'Ghost'): (0.924464774601663, 0.722397476340694, 0.0425119458567858, 0.15141955835962148), ('Steel', 'Rock'): (0.924464774601663, 0.8769716088328076, 0.0425119458567858, 0.11356466876971609), ('Steel', 'Water'): (0.924464774601663, 0.9936908517350158, 0.0425119458567858, 0.0), ('Steel', 'Fire'): (0.924464774601663, 0.9968454258675078, 0.0425119458567858, 0.0), ('Steel', 'Bug'): (0.924464774601663, 1.0, 0.0425119458567858, 0.0), ('Fighting', 'Poison'): (0.9715850153893244, 0.0, 0.01700477834271428, 0.0), ('Fighting', 'Flying'): (0.9715850153893244, 0.003154574132492114, 0.01700477834271428, 0.09463722397476342), ('Fighting', 'Dragon'): (0.9715850153893244, 0.10094637223974764, 0.01700477834271428, 0.0), ('Fighting', 'Normal'): (0.9715850153893244, 0.10410094637223975, 0.01700477834271428, 0.0), ('Fighting', 'Psychic'): (0.9715850153893244, 0.10725552050473187, 0.01700477834271428, 0.2839116719242903), ('Fighting', 'Steel'): (0.9715850153893244, 0.39432176656151424, 0.01700477834271428, 0.2839116719242902), ('Fighting', 'Ground'): (0.9715850153893244, 0.6813880126182965, 0.01700477834271428, 0.0), ('Fighting', 'Fairy'): (0.9715850153893244, 0.6845425867507886, 0.01700477834271428, 0.0), ('Fighting', 'Grass'): (0.9715850153893244, 0.6876971608832807, 0.01700477834271428, 0.0), ('Fighting', 'Fighting'): (0.9715850153893244, 0.6908517350157729, 0.01700477834271428, 0.0), ('Fighting', 'Electric'): (0.9715850153893244, 0.694006309148265, 0.01700477834271428, 0.0), ('Fighting', 'Ice'): (0.9715850153893244, 0.697160883280757, 0.01700477834271428, 0.0946372239747635), ('Fighting', 'Dark'): (0.9715850153893244, 0.7949526813880127, 0.01700477834271428, 0.09463722397476339), ('Fighting', 'Ghost'): (0.9715850153893244, 0.8927444794952681, 0.01700477834271428, 0.09463722397476339), ('Fighting', 'Rock'): (0.9715850153893244, 0.9905362776025236, 0.01700477834271428, 0.0), ('Fighting', 'Water'): (0.9715850153893244, 0.9936908517350158, 0.01700477834271428, 0.0), ('Fighting', 'Fire'): (0.9715850153893244, 0.9968454258675078, 0.01700477834271428, 0.0), ('Fighting', 'Bug'): (0.9715850153893244, 1.0, 0.01700477834271428, 0.0), ('Flying', 'Poison'): (0.9931980886629144, 0.0, 0.006801911337085732, 0.0), ('Flying', 'Flying'): (0.9931980886629144, 0.003154574132492114, 0.006801911337085732, 0.0), ('Flying', 'Dragon'): (0.9931980886629144, 0.006309148264984228, 0.006801911337085732, 0.47318611987381703), ('Flying', 'Normal'): (0.9931980886629144, 0.48264984227129337, 0.006801911337085732, 0.0), ('Flying', 'Psychic'): (0.9931980886629144, 0.48580441640378547, 0.006801911337085732, 0.0), ('Flying', 'Steel'): (0.9931980886629144, 0.48895899053627767, 0.006801911337085732, 0.23659305993690852), ('Flying', 'Ground'): (0.9931980886629144, 0.7287066246056783, 0.006801911337085732, 0.0), ('Flying', 'Fairy'): (0.9931980886629144, 0.7318611987381703, 0.006801911337085732, 0.0), ('Flying', 'Grass'): (0.9931980886629144, 0.7350157728706624, 0.006801911337085732, 0.0), ('Flying', 'Fighting'): (0.9931980886629144, 0.7381703470031546, 0.006801911337085732, 0.0), ('Flying', 'Electric'): (0.9931980886629144, 0.7413249211356467, 0.006801911337085732, 0.0), ('Flying', 'Ice'): (0.9931980886629144, 0.7444794952681387, 0.006801911337085732, 0.0), ('Flying', 'Dark'): (0.9931980886629144, 0.7476340694006309, 0.006801911337085732, 0.0), ('Flying', 'Ghost'): (0.9931980886629144, 0.750788643533123, 0.006801911337085732, 0.0), ('Flying', 'Rock'): (0.9931980886629144, 0.7539432176656151, 0.006801911337085732, 0.0), ('Flying', 'Water'): (0.9931980886629144, 0.7570977917981073, 0.006801911337085732, 0.23659305993690852), ('Flying', 'Fire'): (0.9931980886629144, 0.9968454258675078, 0.006801911337085732, 0.0), ('Flying', 'Bug'): (0.9931980886629144, 1.0, 0.006801911337085732, 0.0)})\nplt.show()\n```\n\n::: {.cell-output-display}\n![](exploratory-data-analysis_files/figure-html/mosaic-plot-poke-statsmodels-1.png){width=672}\n:::\n:::\n\n\nThis obviously needs a bit of cleaning up to remove extra labels, but\nit's easy to get to and relatively functional. Notice that it does not,\nby default, show NA values.\n\n##### Python: plotnine {-}\nWe can generate a mosaic plot (the equivalent of a 2-dimensional\ncross-tabular view) using `geom_bar` with `position = 'fill'`, which\nscales each bar so that it ends at 1. I've flipped the axes using\n`coord_flip` so that you can read the labels more easily.\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Convert everything to categorical/factor variable ahead of time\n# this stops an error: TypeError: '<' not supported between instances of 'float' and 'str'\npoke['type_1'] = pd.Categorical(poke['type_1'].astype(str))\npoke['type_2'] = pd.Categorical(poke['type_2'].astype(str))\n\n( ggplot(aes(x = 'type_1', fill = 'type_2'), data = poke) +\n  geom_bar(color = \"black\", position = \"fill\") +\n  xlab(\"Type 1\") + ylab(\"Proportion of Pokemon w/ Type 2\") +\n  coord_flip() +\n  # This says 85% of the plot is for the main plot and 15% is for the legend.\n  theme(subplots_adjust={'right':0.85})\n  )\n## <ggplot: (8760440211059)>\n```\n\n::: {.cell-output-display}\n![](exploratory-data-analysis_files/figure-html/poke-dist-plots-plotnine-mosaic-3.png){width=614}\n:::\n:::\n\n\nAnother way to look at this data is to bin it in x and y and shade the\nresulting bins by the number of data points in each bin. We can even add\nin labels so that this is at least as clear as the tabular view!\n\n\n::: {.cell}\n\n```{.python .cell-code}\n(ggplot(aes(x = 'type_1', y = 'type_2'), data = poke) +\n  # Shade tiles according to the number of things in the bin\n  stat_bin2d(aes(fill = after_stat('count')), geom = 'tile'))\n## <ggplot: (8760376631703)>\n```\n\n::: {.cell-output-display}\n![](exploratory-data-analysis_files/figure-html/poke-dist-plots-plotnine-tile-5.png){width=614}\n:::\n:::\n\n\n:::\n\n#### Categorical - Continuous Relationships\n\n::: panel-tabset\n##### Base R {.unnumbered}\n\nIn R, most models are specified as `y ~ x1 + x2 + x3`, where the\ninformation on the left side of the tilde is the dependent variable, and\nthe information on the right side are any explanatory variables.\nInteractions are specified using `x1*x2` to get all combinations of x1\nand x2 (x1, x2, x1\\*x2); single interaction terms are specified as e.g.\n`x1:x2` and do not include any component terms.\n\nTo examine the relationship between a categorical variable and a\ncontinuous variable, we might look at box plots:\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npar(mfrow = c(1, 2)) # put figures in same row\nboxplot(log10(height_m) ~ status, data = poke)\nboxplot(total_points ~ generation, data = poke)\n```\n\n::: {.cell-output-display}\n![](exploratory-data-analysis_files/figure-html/boxplot-graphs-7.png){fig-align='center' width=100%}\n:::\n:::\n\n\nIn the second box plot, there are far too many categories to be able to\nresolve the relationship clearly, but the plot is still effective in\nthat we can identify that there are one or two species which have a much\nhigher point range than other species. EDA isn't usually about creating\npretty plots (or we'd be using `ggplot` right now) but rather about\nidentifying things which may come up in the analysis later.\n\n##### R: ggplot2 {.unnumbered}\n\nXXX todo XXX\n\n##### Python: matplotlib {.unnumbered}\n\nXXX todo XXX\n\n##### Python: plotnine {.unnumbered}\n\nXXX todo XXX\n\n:::\n\n#### Continuous - Continuous Relationships\n\n::: panel-tabset\n##### Base R {.unnumbered}\n\nTo look at the relationship between numeric variables, we could compute\na numeric correlation, but a plot may be more useful, because it allows\nus to see outliers as well.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nplot(defense ~ attack, data = poke, type = \"p\")\n```\n\n::: {.cell-output-display}\n![](exploratory-data-analysis_files/figure-html/unnamed-chunk-2-1.png){fig-align='center' width=48%}\n:::\n\n```{.r .cell-code}\n\ncor(poke$defense, poke$attack)\n## [1] 0.4507656\n```\n:::\n\n\nSometimes, we discover that a numeric variable which may seem to be\ncontinuous is actually relatively quantized - there are only a few\nvalues of base_friendship in the whole dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(x = poke$base_experience, y = poke$base_friendship, type = \"p\")\n```\n\n::: {.cell-output-display}\n![](exploratory-data-analysis_files/figure-html/unnamed-chunk-3-1.png){width=2100}\n:::\n:::\n\n\nA scatterplot matrix can also be a useful way to visualize relationships\nbetween several variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(poke[,16:20]) # hp - sp_defense columns\n```\n\n::: {.cell-output-display}\n![A scatterplot matrix of hit points, attack, defense, special attack, and special defense characteristics for all generation 1-8 Pokemon.](exploratory-data-analysis_files/figure-html/unnamed-chunk-4-1.png){width=100%}\n:::\n:::\n\n\n::: callout-note\n[There's more information on how to customize base R scatterplot\nmatrices\nhere](http://www.sthda.com/english/wiki/scatter-plot-matrices-r-base-graphs).\n:::\n\n##### R: ggplot2 {.unnumbered}\n\nXXX TODO XXX\n\n##### Python: matplotlib {.unnumbered}\n\nXXX todo XXX\n\n##### Python: plotnine {.unnumbered}\n\nXXX todo XXX\n\n:::\n\nIf you want summary statistics by group, you can get that using the\n`dplyr` package functions `select` and `group_by`, which we will learn\nmore about in the next section. (I'm cheating a bit by mentioning it\nnow, but it's just so useful!)\n\n\n\n\n\n::: callout-tip\n## Try it out: EDA {#EDA-police-violence}\n\n::: panel-tabset\n### Problem {.unnumbered}\n\nExplore the variables present in [the police violence\ndata](data/police_violence.xlsx).\n\nNote that some variables may be too messy to handle with the things that\nyou have seen thus far - that is ok. As you find irregularities,\ndocument them - these are things you may need to clean up in the dataset\nbefore you conduct a formal analysis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (!\"readxl\" %in% installed.packages()) install.packages(\"readxl\")\nlibrary(readxl)\npolice_violence <- read_xlsx(\"data/police_violence.xlsx\", sheet = 1, guess_max = 7000, skip = 1)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\npolice_violence = pd.read_excel(\"data/police_violence.xlsx\", skiprows=1)\n```\n:::\n\n\n### R solution {.unnumbered}\n\n\n::: {.cell}\n\n```{.r .cell-code}\npolice_violence$`Victim's age` <- as.numeric(police_violence$`Victim's age`)\n\nskim(police_violence)\n```\n\n::: {.cell-output-display}\nTable: Data summary\n\n|                         |                |\n|:------------------------|:---------------|\n|Name                     |police_violence |\n|Number of rows           |9942            |\n|Number of columns        |63              |\n|_______________________  |                |\n|Column type frequency:   |                |\n|character                |45              |\n|numeric                  |17              |\n|POSIXct                  |1               |\n|________________________ |                |\n|Group variables          |None            |\n\n\n**Variable type: character**\n\n|skim_variable                                                                                                                                                              | n_missing| complete_rate| min|   max| empty| n_unique| whitespace|\n|:--------------------------------------------------------------------------------------------------------------------------------------------------------------------------|---------:|-------------:|---:|-----:|-----:|--------:|----------:|\n|Victim's name                                                                                                                                                              |         0|          1.00|   7|    49|     0|     9662|          0|\n|Victim's gender                                                                                                                                                            |         0|          1.00|   4|    11|     0|        4|          0|\n|Victim's race                                                                                                                                                              |         0|          1.00|   5|    16|     0|        7|          0|\n|URL of image of victim                                                                                                                                                     |      4594|          0.54|  27| 10527|     0|     5330|          0|\n|Street Address of Incident                                                                                                                                                 |       128|          0.99|   3|    73|     0|     9685|          0|\n|City                                                                                                                                                                       |        11|          1.00|   3|    29|     0|     3438|          0|\n|State                                                                                                                                                                      |         0|          1.00|   2|     2|     0|       51|          0|\n|Zipcode                                                                                                                                                                    |        32|          1.00|   5|     8|     0|     7088|          0|\n|County                                                                                                                                                                     |         5|          1.00|   3|    31|     0|     1218|          0|\n|Agency responsible for death                                                                                                                                               |         2|          1.00|   7|   181|     0|     3480|          0|\n|ORI Agency Identifier (if available)                                                                                                                                       |         0|          1.00|   3|    77|     0|     3571|          0|\n|Cause of death                                                                                                                                                             |         0|          1.00|   4|    39|     0|       31|          0|\n|A brief description of the circumstances surrounding the death                                                                                                             |        20|          1.00|  30|  1631|     0|     9849|          0|\n|Official disposition of death (justified or other)                                                                                                                         |        11|          1.00|   7|   193|     0|      183|          0|\n|Criminal Charges?                                                                                                                                                          |         0|          1.00|  16|    77|     0|       47|          0|\n|Link to news article or photo of official document                                                                                                                         |         0|          1.00|  21|   312|     0|     9834|          0|\n|Symptoms of mental illness?                                                                                                                                                |        63|          0.99|   2|    19|     0|        7|          0|\n|Armed/Unarmed Status                                                                                                                                                       |         0|          1.00|   7|    34|     0|        5|          0|\n|Alleged Weapon (Source: WaPo and Review of Cases Not Included in WaPo Database)                                                                                            |         0|          1.00|   2|    32|     0|      180|          0|\n|Alleged Threat Level (Source: WaPo)                                                                                                                                        |      2380|          0.76|   4|    27|     0|       11|          0|\n|Fleeing (Source: WaPo)                                                                                                                                                     |      3311|          0.67|   3|    11|     0|       12|          0|\n|Body Camera (Source: WaPo)                                                                                                                                                 |      3241|          0.67|   2|    18|     0|       10|          0|\n|Off-Duty Killing?                                                                                                                                                          |      9700|          0.02|   8|     8|     0|        3|          0|\n|Geography (via Trulia methodology based on zipcode population density: http://jedkolko.com/wp-content/uploads/2015/05/full-ZCTA-urban-suburban-rural-classification.xlsx ) |        39|          1.00|   5|    12|     0|        4|          0|\n|Encounter Type (DRAFT)                                                                                                                                                     |      4308|          0.57|   5|    69|     0|       25|          0|\n|Initial Reported Reason for Encounter (DRAFT)                                                                                                                              |      4308|          0.57|   4|   135|     0|     1699|          0|\n|Names of Officers Involved (DRAFT)                                                                                                                                         |      8115|          0.18|   5|   283|     0|     1798|          0|\n|Race of Officers Involved (DRAFT)                                                                                                                                          |      9497|          0.04|   5|   119|     0|       70|          0|\n|Known Past Shootings of Officer(s) (DRAFT)                                                                                                                                 |      9823|          0.01|   2|   132|     0|       33|          0|\n|Call for Service? (DRAFT)                                                                                                                                                  |      5563|          0.44|   2|    11|     0|        4|          0|\n|HUD UPSAI Geography                                                                                                                                                        |       543|          0.95|   5|    12|     0|        4|          0|\n|NCHS Urban-Rural Classification Scheme Codes (https://www.cdc.gov/nchs/data_access/urban_rural.htm)                                                                        |       438|          0.96|  12|    23|     0|        7|          0|\n|Congressional District                                                                                                                                                     |        89|          0.99|   3|     4|     0|      436|          0|\n|Current Representative Last name                                                                                                                                           |       385|          0.96|   3|    17|     0|      396|          0|\n|Current Representative First name                                                                                                                                          |       385|          0.96|   2|    11|     0|      276|          0|\n|Current Representative Party                                                                                                                                               |       385|          0.96|   8|    10|     0|        2|          0|\n|Officer Prosecuted by (Chief Prosecutor)                                                                                                                                   |      9763|          0.02|   7|    77|     0|      139|          0|\n|Prosecutor Race                                                                                                                                                            |      9763|          0.02|   5|    16|     0|        6|          0|\n|Prosecutor Gender                                                                                                                                                          |      9763|          0.02|   4|    12|     0|        3|          0|\n|Chief Prosecutor Political Party                                                                                                                                           |      9887|          0.01|  10|    38|     0|        3|          0|\n|Chief Prosecutor Term                                                                                                                                                      |      9892|          0.01|   5|    50|     0|       28|          0|\n|Officer Prosecuted by (Prosecutor in Court)                                                                                                                                |      9918|          0.00|  10|    74|     0|       24|          0|\n|Special Prosecutor?                                                                                                                                                        |      9776|          0.02|   2|   119|     0|       10|          0|\n|Independent Investigation?                                                                                                                                                 |      9897|          0.00|   2|   115|     0|       27|          0|\n|Prosecutor Source Link                                                                                                                                                     |      9814|          0.01|  36|   286|     0|      124|          0|\n\n\n**Variable type: numeric**\n\n|skim_variable                                              | n_missing| complete_rate|      mean|        sd|      p0|      p25|      p50|       p75|      p100|hist  |\n|:----------------------------------------------------------|---------:|-------------:|---------:|---------:|-------:|--------:|--------:|---------:|---------:|:-----|\n|Victim's age                                               |       393|          0.96|     36.85|     13.05|    1.00|    27.00|    35.00|     45.00|    107.00|▂▇▃▁▁ |\n|WaPo ID (If included in WaPo database)                     |      3377|          0.66|   3674.26|   2110.07|    3.00|  1849.00|  3644.00|   5424.00|   7468.00|▇▇▇▇▇ |\n|MPV ID                                                     |        15|          1.00|   4973.85|   2876.17|    1.00|  2485.50|  4967.00|   7452.50|   9987.00|▇▇▇▇▇ |\n|Fatal Encounters ID                                        |       230|          0.98|  21370.52|   5960.04|  116.00| 15962.75| 20876.50|  26624.25|  31497.00|▁▁▇▃▆ |\n|Census Tract Code                                          |        88|          0.99| 217720.56| 330317.48|  100.00|  5501.25| 30301.50| 313102.00| 989300.00|▇▁▁▁▂ |\n|Median household income ACS Census Tract                   |      2649|          0.73|  55360.62|  30082.94|    0.00| 35915.00| 50551.00|  69100.00| 250001.00|▇▇▁▁▁ |\n|Latitude                                                   |        74|          0.99|     36.60|      5.36|   19.04|    33.45|    36.06|     40.01|     71.30|▁▇▃▁▁ |\n|Longitude                                                  |        74|          0.99|    -96.78|     16.60| -163.17|  -112.07|   -93.59|    -82.90|    -67.26|▁▁▇▇▇ |\n|Total Population of Census Tract 2019 ACS 5-Year Estimates |      2480|          0.75|   1884.14|   1794.80|    0.00|  1037.25|  1520.00|   2205.00|  58705.00|▇▁▁▁▁ |\n|White Non-Hispanic Percent of the Population ACS           |      2480|          0.75|      0.66|      0.31|    0.00|     0.45|     0.77|      0.93|      1.00|▂▂▂▃▇ |\n|Black Non-Hispanic Percent of the Population ACS           |      2480|          0.75|      0.22|      0.29|    0.00|     0.01|     0.07|      0.33|      1.00|▇▂▁▁▁ |\n|Native American Percent of the Population ACS              |      2480|          0.75|      0.01|      0.06|    0.00|     0.00|     0.00|      0.00|      1.00|▇▁▁▁▁ |\n|Asian Percent of the Population ACS                        |      2480|          0.75|      0.06|      0.13|    0.00|     0.00|     0.01|      0.06|      1.00|▇▁▁▁▁ |\n|Pacific Islander Percent of the Population ACS             |      2480|          0.75|      0.00|      0.02|    0.00|     0.00|     0.00|      0.00|      0.69|▇▁▁▁▁ |\n|Other/Two or More Race Percent of the Population ACS       |      2480|          0.75|      0.04|      0.06|    0.00|     0.00|     0.02|      0.05|      1.00|▇▁▁▁▁ |\n|Hispanic Percent of the Population ACS                     |      2480|          0.75|      0.22|      0.26|    0.00|     0.03|     0.11|      0.33|      1.00|▇▂▁▁▁ |\n|Killed by Police 2013-21                                   |        43|          1.00|      1.00|      0.00|    1.00|     1.00|     1.00|      1.00|      1.00|▁▁▇▁▁ |\n\n\n**Variable type: POSIXct**\n\n|skim_variable                     | n_missing| complete_rate|min        |max        |median     | n_unique|\n|:---------------------------------|---------:|-------------:|:----------|:----------|:----------|--------:|\n|Date of Incident (month/day/year) |         0|             1|2013-01-01 |2022-01-20 |2017-08-02 |     3118|\n:::\n:::\n\n\nLet's examine the numeric and date variables first:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(police_violence$`Victim's age`)\n```\n\n::: {.cell-output-display}\n![](exploratory-data-analysis_files/figure-html/police-violence-numeric-date-1.png){width=2100}\n:::\n\n```{.r .cell-code}\n\n# hist(police_violence$`Date of Incident (month/day/year)`)\n# This didn't work - it wants me to specify breaks\n\n# Instead, lets see if ggplot handles it better - from R4DS\nlibrary(ggplot2)\nggplot(police_violence, aes(x = `Date of Incident (month/day/year)`)) +\n  geom_histogram()\n```\n\n::: {.cell-output-display}\n![](exploratory-data-analysis_files/figure-html/police-violence-numeric-date-2.png){width=2100}\n:::\n\n```{.r .cell-code}\nggplot(police_violence, aes(x = `Date of Incident (month/day/year)`)) +\n  geom_density()\n```\n\n::: {.cell-output-display}\n![](exploratory-data-analysis_files/figure-html/police-violence-numeric-date-3.png){width=2100}\n:::\n:::\n\n\nLet's look at the victims' gender and race:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(police_violence$`Victim's race`, useNA = 'ifany')\n## \n##            Asian            Black         Hispanic  Native American \n##              142             2498             1777              139 \n## Pacific Islander     Unknown race            White \n##               60              976             4350\ntable(police_violence$`Victim's gender`)\n## \n##      Female        Male Transgender     Unknown \n##         496        9419          10          17\ntable(police_violence$`Victim's race`, police_violence$`Victim's gender`)\n##                   \n##                    Female Male Transgender Unknown\n##   Asian                 9  132           0       1\n##   Black                82 2409           4       3\n##   Hispanic             67 1707           1       2\n##   Native American       8  130           0       1\n##   Pacific Islander      2   58           0       0\n##   Unknown race         37  931           0       8\n##   White               291 4052           5       2\n\nplot(table(police_violence$`Victim's race`, police_violence$`Victim's gender`),\n     main = \"Police Killing by Race, Gender\")\n```\n\n::: {.cell-output-display}\n![](exploratory-data-analysis_files/figure-html/police-violence-gender-race-1.png){width=2100}\n:::\n:::\n\n\nWe can also look at the age range for each race:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npolice_violence %>%\n  # get groups with at least 100 observations that aren't unknown\n  subset(`Victim's race` %in% c(\"Asian\", \"Black\", \"Native American\", \"Hispanic\", \"White\")) %>%\n  boxplot(`Victim's age` ~ `Victim's race`, data = .)\n```\n\n::: {.cell-output-display}\n![](exploratory-data-analysis_files/figure-html/unnamed-chunk-6-1.png){width=2100}\n:::\n:::\n\n\nAnd examine the age range for each gender as well:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npolice_violence %>%\n  boxplot(`Victim's age` ~ `Victim's gender`, data = .)\n```\n\n::: {.cell-output-display}\n![](exploratory-data-analysis_files/figure-html/police-violence-age-1.png){width=2100}\n:::\n:::\n\n\nThe thing I'm honestly most surprised at with this plot is that there\nare so many elderly individuals (of both genders) shot. That's not a\nrealization I'd normally construct this plot for, but the visual\nemphasis on the outliers in a boxplot makes it much easier to focus on\nthat aspect of the data.\n\n### Python solution {.unnumbered}\n\n\n::: {.cell}\n\n```{.python .cell-code}\npolice_violence[\"Victim's age\"] = pd.to_numeric(police_violence[\"Victim's age\"], errors = 'coerce')\n\n# police_violence.describe()\nskim(police_violence)\n## ╭─────────────────────────────── skimpy summary ───────────────────────────────╮\n## │          Data Summary                Data Types                              │\n## │ ┏━━━━━━━━━━━━━━━━━━━┳━━━━━━━━┓ ┏━━━━━━━━━━━━━┳━━━━━━━┓                       │\n## │ ┃ dataframe         ┃ Values ┃ ┃ Column Type ┃ Count ┃                       │\n## │ ┡━━━━━━━━━━━━━━━━━━━╇━━━━━━━━┩ ┡━━━━━━━━━━━━━╇━━━━━━━┩                       │\n## │ │ Number of rows    │ 9942   │ │ object      │ 44    │                       │\n## │ │ Number of columns │ 63     │ │ float64     │ 18    │                       │\n## │ └───────────────────┴────────┘ │ datetime64  │ 1     │                       │\n## │                                └─────────────┴───────┘                       │\n## │                                   number                                     │\n## │ ┏━━━━━━┳━━━━━━━┳━━━━━━┳━━━━━━━┳━━━━━━┳━━━━━━┳━━━━━━━┳━━━━━━┳━━━━━━━┳━━━━━━┓  │\n## │ ┃      ┃ missi ┃ comp ┃ mean  ┃ sd   ┃ p0   ┃ p25   ┃ p75  ┃ p100  ┃ hist ┃  │\n## │ ┃      ┃ ng    ┃ lete ┃       ┃      ┃      ┃       ┃      ┃       ┃      ┃  │\n## │ ┃      ┃       ┃      ┃       ┃      ┃      ┃       ┃      ┃       ┃      ┃  │\n## │ ┃      ┃       ┃ rate ┃       ┃      ┃      ┃       ┃      ┃       ┃      ┃  │\n## │ ┡━━━━━━╇━━━━━━━╇━━━━━━╇━━━━━━━╇━━━━━━╇━━━━━━╇━━━━━━━╇━━━━━━╇━━━━━━━╇━━━━━━┩  │\n## │ │ Vict │   390 │ 0.96 │    37 │   13 │    1 │    27 │   45 │   110 │ ▁█▅▂ │  │\n## │ │ im's │       │      │       │      │      │       │      │       │      │  │\n## │ │  age │       │      │       │      │      │       │      │       │      │  │\n## │ │ Zipc │    32 │    1 │ 60000 │ 2800 │ 1100 │ 34000 │ 8600 │ 33000 │  ▆█  │  │\n## │ │ ode  │       │      │       │    0 │      │       │    0 │     0 │      │  │\n## │ │ WaPo │  3400 │ 0.66 │  3700 │ 2100 │    3 │  1800 │ 5400 │  7500 │ ████ │  │\n## │ │ ID   │       │      │       │      │      │       │      │       │  ▇▇  │  │\n## │ │ (If  │       │      │       │      │      │       │      │       │      │  │\n## │ │ incl │       │      │       │      │      │       │      │       │      │  │\n## │ │ uded │       │      │       │      │      │       │      │       │      │  │\n## │ │ MPV  │    15 │    1 │  5000 │ 2900 │    1 │  2500 │ 7500 │ 10000 │ ████ │  │\n## │ │ ID   │       │      │       │      │      │       │      │       │  ██  │  │\n## │ │ Fata │   230 │ 0.98 │ 21000 │ 6000 │  120 │ 16000 │ 2700 │ 31000 │   ▇█ │  │\n## │ │ l En │       │      │       │      │      │       │    0 │       │  ▆█  │  │\n## │ │ coun │       │      │       │      │      │       │      │       │      │  │\n## │ │ ters │       │      │       │      │      │       │      │       │      │  │\n## │ │  ID  │       │      │       │      │      │       │      │       │      │  │\n## │ │ Cens │    88 │ 0.99 │ 22000 │ 3300 │  100 │  5500 │ 3100 │ 99000 │ █▁▁▁ │  │\n## │ │ us T │       │      │     0 │   00 │      │       │   00 │     0 │  ▁   │  │\n## │ │ ract │       │      │       │      │      │       │      │       │      │  │\n## │ │      │       │      │       │      │      │       │      │       │      │  │\n## │ │ Code │       │      │       │      │      │       │      │       │      │  │\n## │ │ Medi │  2600 │ 0.73 │ 55000 │ 3000 │    0 │ 36000 │ 6900 │ 25000 │ ▆█▂  │  │\n## │ │ an h │       │      │       │    0 │      │       │    0 │     0 │      │  │\n## │ │ ouse │       │      │       │      │      │       │      │       │      │  │\n## │ │ hold │       │      │       │      │      │       │      │       │      │  │\n## │ │  inc │       │      │       │      │      │       │      │       │      │  │\n## │ │ Lati │    74 │ 0.99 │    37 │  5.4 │   19 │    33 │   40 │    71 │ ▁█▇▁ │  │\n## │ │ tude │       │      │       │      │      │       │      │       │      │  │\n## │ │ Long │    74 │ 0.99 │   -97 │   17 │ -160 │  -110 │  -83 │   -67 │   ▄▃ │  │\n## │ │ itud │       │      │       │      │      │       │      │       │  █▆  │  │\n## │ │ e    │       │      │       │      │      │       │      │       │      │  │\n## │ │ Tota │  2500 │ 0.75 │  1900 │ 1800 │    0 │  1000 │ 2200 │ 59000 │  █   │  │\n## │ │ l Po │       │      │       │      │      │       │      │       │      │  │\n## │ │ pula │       │      │       │      │      │       │      │       │      │  │\n## │ │ tion │       │      │       │      │      │       │      │       │      │  │\n## │ │  of  │       │      │       │      │      │       │      │       │      │  │\n## │ │ Whit │  2500 │ 0.75 │  0.66 │ 0.31 │    0 │  0.45 │ 0.93 │     1 │ ▂▁▂▂ │  │\n## │ │ e No │       │      │       │      │      │       │      │       │  ▄█  │  │\n## │ │ n-Hi │       │      │       │      │      │       │      │       │      │  │\n## │ │ span │       │      │       │      │      │       │      │       │      │  │\n## │ │ ic P │       │      │       │      │      │       │      │       │      │  │\n## │ │ Blac │  2500 │ 0.75 │  0.22 │ 0.29 │    0 │ 0.006 │ 0.33 │     1 │ █▂▁▁ │  │\n## │ │ k No │       │      │       │      │      │       │      │       │  ▁▁  │  │\n## │ │ n-Hi │       │      │       │      │      │       │      │       │      │  │\n## │ │ span │       │      │       │      │      │       │      │       │      │  │\n## │ │ ic P │       │      │       │      │      │       │      │       │      │  │\n## │ │ Nati │  2500 │ 0.75 │ 0.014 │ 0.06 │    0 │     0 │ 0.00 │     1 │  █   │  │\n## │ │ ve A │       │      │       │    3 │      │       │    2 │       │      │  │\n## │ │ meri │       │      │       │      │      │       │      │       │      │  │\n## │ │ can  │       │      │       │      │      │       │      │       │      │  │\n## │ │ Perc │       │      │       │      │      │       │      │       │      │  │\n## │ │ Asia │  2500 │ 0.75 │ 0.061 │ 0.13 │    0 │     0 │ 0.05 │     1 │  █▁  │  │\n## │ │ n Pe │       │      │       │      │      │       │    8 │       │      │  │\n## │ │ rcen │       │      │       │      │      │       │      │       │      │  │\n## │ │ t of │       │      │       │      │      │       │      │       │      │  │\n## │ │ the  │       │      │       │      │      │       │      │       │      │  │\n## │ │ Paci │  2500 │ 0.75 │ 0.003 │ 0.02 │    0 │     0 │    0 │  0.69 │  █   │  │\n## │ │ fic  │       │      │     4 │    5 │      │       │      │       │      │  │\n## │ │ Isla │       │      │       │      │      │       │      │       │      │  │\n## │ │ nder │       │      │       │      │      │       │      │       │      │  │\n## │ │  Per │       │      │       │      │      │       │      │       │      │  │\n## │ │ Othe │  2500 │ 0.75 │ 0.037 │ 0.05 │    0 │     0 │ 0.05 │     1 │  █   │  │\n## │ │ r/Tw │       │      │       │    6 │      │       │    1 │       │      │  │\n## │ │ o or │       │      │       │      │      │       │      │       │      │  │\n## │ │ More │       │      │       │      │      │       │      │       │      │  │\n## │ │ Ra   │       │      │       │      │      │       │      │       │      │  │\n## │ │ Hisp │  2500 │ 0.75 │  0.22 │ 0.26 │    0 │ 0.025 │ 0.33 │     1 │ █▂▁▁ │  │\n## │ │ anic │       │      │       │      │      │       │      │       │  ▁▁  │  │\n## │ │  Per │       │      │       │      │      │       │      │       │      │  │\n## │ │ cent │       │      │       │      │      │       │      │       │      │  │\n## │ │  of  │       │      │       │      │      │       │      │       │      │  │\n## │ │ Kill │    43 │    1 │     1 │    0 │    1 │     1 │    1 │     1 │    █ │  │\n## │ │ ed   │       │      │       │      │      │       │      │       │      │  │\n## │ │ by P │       │      │       │      │      │       │      │       │      │  │\n## │ │ olic │       │      │       │      │      │       │      │       │      │  │\n## │ │ e    │       │      │       │      │      │       │      │       │      │  │\n## │ │ 201  │       │      │       │      │      │       │      │       │      │  │\n## │ └──────┴───────┴──────┴───────┴──────┴──────┴───────┴──────┴───────┴──────┘  │\n## │                                  datetime                                    │\n## │ ┏━━━━━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━┓  │\n## │ ┃            ┃ missing ┃ complete   ┃ first      ┃ last       ┃ frequency ┃  │\n## │ ┃            ┃         ┃ rate       ┃            ┃            ┃           ┃  │\n## │ ┡━━━━━━━━━━━━╇━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━┩  │\n## │ │ Date of    │       0 │          1 │ 2013-01-01 │ 2022-01-20 │ None      │  │\n## │ │ Incident   │         │            │            │            │           │  │\n## │ │ (mo        │         │            │            │            │           │  │\n## │ └────────────┴─────────┴────────────┴────────────┴────────────┴───────────┘  │\n## ╰──────────────────────────────────── End ─────────────────────────────────────╯\n```\n:::\n\n\nLet's examine the numeric and date variables first:\n\n\n::: {.cell}\n\n```{.python .cell-code}\npolice_violence[\"Victim's age\"].plot.hist()\nplt.show()\n```\n\n::: {.cell-output-display}\n![](exploratory-data-analysis_files/figure-html/police-violence-numeric-date-py-1.png){width=614}\n:::\n\n```{.python .cell-code}\n(ggplot(police_violence, aes(x = \"Date of Incident (month/day/year)\")) +\n  geom_histogram())\n## <ggplot: (8760379861634)>\n## \n## /home/susan/Projects/Class/unl-stat850/stat850-textbook/renv/python/virtualenvs/renv-python-3.8/lib/python3.8/site-packages/plotnine/stats/stat_bin.py:95: PlotnineWarning: 'stat_bin()' using 'bins = 22'. Pick better value with 'binwidth'.\n```\n\n::: {.cell-output-display}\n![](exploratory-data-analysis_files/figure-html/police-violence-numeric-date-py-2.png){width=614}\n:::\n\n```{.python .cell-code}\n(ggplot(police_violence, aes(x = \"Date of Incident (month/day/year)\")) +\n  geom_density())\n## <ggplot: (8760361550343)>\n```\n\n::: {.cell-output-display}\n![](exploratory-data-analysis_files/figure-html/police-violence-numeric-date-py-3.png){width=614}\n:::\n:::\n\n\nLet's look at the victims' gender and race:\n\n\n::: {.cell}\n\n```{.python .cell-code}\npolice_violence[\"Victim's race\"].groupby(police_violence[\"Victim's race\"]).count()\n## Victim's race\n## Asian                142\n## Black               2498\n## Hispanic            1777\n## Native American      139\n## Pacific Islander      60\n## Unknown race         976\n## White               4350\n## Name: Victim's race, dtype: int64\npolice_violence[\"Victim's gender\"].groupby(police_violence[\"Victim's gender\"]).count()\n## Victim's gender\n## Female          496\n## Male           9418\n## Male              1\n## Transgender      10\n## Unknown          17\n## Name: Victim's gender, dtype: int64\npd.crosstab(index = police_violence[\"Victim's race\"], columns = police_violence[\"Victim's gender\"])\n\n## Victim's gender   Female  Male  Male   Transgender  Unknown\n## Victim's race                                              \n## Asian                  9   132      0            0        1\n## Black                 82  2409      0            4        3\n## Hispanic              67  1707      0            1        2\n## Native American        8   130      0            0        1\n## Pacific Islander       2    58      0            0        0\n## Unknown race          37   930      1            0        8\n## White                291  4052      0            5        2\nimport matplotlib.pyplot as plt\nfrom statsmodels.graphics.mosaicplot import mosaic\n\nmosaic(police_violence, [\"Victim's race\", \"Victim's gender\"], title = \"Police Killing by Race, Gender\")\n## (<Figure size 700x500 with 3 Axes>, {('Unknown race', 'Male'): (0.0, 0.0, 0.09531008001749958, 0.9403311044003453), ('Unknown race', 'Unknown'): (0.0, 0.9436205780845558, 0.09531008001749958, 0.008088869715271797), ('Unknown race', 'Female'): (0.0, 0.9549989214840382, 0.09531008001749958, 0.03741102243313199), ('Unknown race', 'Transgender'): (0.0, 0.9956994176013806, 0.09531008001749958, 0.0), ('Unknown race', 'Male '): (0.0, 0.9989888912855911, 0.09531008001749958, 0.0010111087144089607), ('White', 'Male'): (0.10016444894953842, 0.0, 0.4247939017173393, 0.9192377495462795), ('White', 'Unknown'): (0.10016444894953842, 0.92252722323049, 0.4247939017173393, 0.00045372050816691156), ('White', 'Female'): (0.10016444894953842, 0.9262704174228674, 0.4247939017173393, 0.06601633393829408), ('White', 'Transgender'): (0.10016444894953842, 0.995576225045372, 0.4247939017173393, 0.0011343012704173885), ('White', 'Male '): (0.10016444894953842, 1.0, 0.4247939017173393, 0.0), ('Hispanic', 'Male'): (0.5298127195989165, 0.0, 0.17353075019579586, 0.9479681900305067), ('Hispanic', 'Unknown'): (0.5298127195989165, 0.9512576637147172, 0.17353075019579586, 0.0011106832923614344), ('Hispanic', 'Female'): (0.5298127195989165, 0.9556578206912892, 0.17353075019579586, 0.03720789029410893), ('Hispanic', 'Transgender'): (0.5298127195989165, 0.9961551846696086, 0.17353075019579586, 0.0005553416461807172), ('Hispanic', 'Male '): (0.5298127195989165, 1.0, 0.17353075019579586, 0.0), ('Black', 'Male'): (0.7081978387267512, 0.0, 0.24393911873331345, 0.9516823985504191), ('Black', 'Unknown'): (0.7081978387267512, 0.9549718722346296, 0.24393911873331345, 0.0011851586532384652), ('Black', 'Female'): (0.7081978387267512, 0.9594465045720787, 0.24393911873331345, 0.032394336521849046), ('Black', 'Transgender'): (0.7081978387267512, 0.9951303147781383, 0.24393911873331345, 0.0015802115376511408), ('Black', 'Male '): (0.7081978387267512, 1.0, 0.24393911873331345, 0.0), ('Pacific Islander', 'Male'): (0.9569913263921035, 0.0, 0.0058592262305839655, 0.9539473684210525), ('Pacific Islander', 'Unknown'): (0.9569913263921035, 0.957236842105263, 0.0058592262305839655, 0.0), ('Pacific Islander', 'Female'): (0.9569913263921035, 0.9605263157894737, 0.0058592262305839655, 0.032894736842105254), ('Pacific Islander', 'Transgender'): (0.9569913263921035, 0.9967105263157894, 0.0058592262305839655, 0.0), ('Pacific Islander', 'Male '): (0.9569913263921035, 1.0, 0.0058592262305839655, 0.0), ('Native American', 'Male'): (0.9677049215547263, 0.0, 0.013573874100852925, 0.9229458538432411), ('Native American', 'Unknown'): (0.9677049215547263, 0.9262353275274515, 0.013573874100852925, 0.00709958349110192), ('Native American', 'Female'): (0.9677049215547263, 0.9366243847027641, 0.013573874100852925, 0.05679666792881481), ('Native American', 'Transgender'): (0.9677049215547263, 0.9967105263157894, 0.013573874100852925, 0.0), ('Native American', 'Male '): (0.9677049215547263, 1.0, 0.013573874100852925, 0.0), ('Asian', 'Male'): (0.986133164587618, 0.0, 0.013866835412382128, 0.9173461823573016), ('Asian', 'Unknown'): (0.986133164587618, 0.9206356560415121, 0.013866835412382128, 0.0069495922905856095), ('Asian', 'Female'): (0.986133164587618, 0.9308747220163083, 0.013866835412382128, 0.0625463306152706), ('Asian', 'Transgender'): (0.986133164587618, 0.9967105263157894, 0.013866835412382128, 0.0), ('Asian', 'Male '): (0.986133164587618, 1.0, 0.013866835412382128, 0.0)})\nplt.show()\n```\n\n::: {.cell-output-display}\n![](exploratory-data-analysis_files/figure-html/police-violence-gender-race-py-7.png){width=672}\n:::\n:::\n\n\nWe can also look at the age range for each race:\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# get groups with at least 100 observations that aren't unknown\nrace_sub = [\"Asian\", \"Black\", \"Native American\", \"Hispanic\", \"White\"]\n\npolice_sub = police_violence.loc[police_violence[\"Victim's race\"].isin(race_sub)]\npolice_sub = police_sub.assign(v_race = pd.Categorical(police_sub[\"Victim's race\"], categories = race_sub))\n\npolice_sub.boxplot(\"Victim's age\", by = \"v_race\")\nplt.show()\n```\n\n::: {.cell-output-display}\n![](exploratory-data-analysis_files/figure-html/police-age-race-py-9.png){width=672}\n:::\n:::\n\n\nAnd examine the age range for each gender as well:\n\n\n::: {.cell}\n\n```{.python .cell-code}\npolice_violence.boxplot(\"Victim's age\", \"Victim's gender\")\nplt.show()\n```\n:::\n\n\nThe thing I'm honestly most surprised at with this plot is that there\nare so many elderly individuals (of both genders) shot. That's not a\nrealization I'd normally construct this plot for, but the visual\nemphasis on the outliers in a boxplot makes it much easier to focus on\nthat aspect of the data.\n\n:::\n:::\n\n\n::: callout-note\n## Learn More: Janitor R package\n\nThe janitor package [@janitorpkg] has some very convenient functions for cleaning up messy data. \nOne of its best features is the `clean_names()` function, which creates names based on a capitalization/separation scheme of your choosing.\n\n![janitor and clean_names() by Allison\nHorst](https://github.com/allisonhorst/stats-illustrations/blob/main/rstats-artwork/janitor_clean_names.png?raw=true){fig-alt=\"A cartoon beaver putting shapes with long, messy column names (pulled from a bin labeled “MESS” and “not so awesome column names”) into a contraption that converts them to lower snake case. The output has stylized text reading “Way more deal-withable column names.” Title text reads “janitor::clean_names(): convert all column names to *_case!”\"}\n:::\n\n## References\n",
    "supporting": [
      "exploratory-data-analysis_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}