{
  "hash": "1d2d623cc9805f19b0691cf36d4a3303",
  "result": {
    "markdown": "# Programming with Data {#data-programming}\n\n## Module Objectives  {- #module6-objectives}\n\n- Write basic functions and procedures to create simple plots and data summaries\n- Apply syntax knowledge to reference variables and observations in common data structures\n- Create new variables and columns or reformat existing columns in provided data structures\n\n\n## Introduction {-}\n\nAt this point, you've learned how to write functions. You know the basics of how to create new variables, how data frames and lists work, and how to use markdown.\n\nAnd yet... these are skills that take some practice when applied to new data. We're going to take a break from the fire-hose of syntax you've learned and focus on applying what you've learned to problems related to data. The goal is to **reinforce the skills you've already learned** and help you find your feet a bit as you work through data analysis. I'll provide sample code for tasks like basic plots and tables that we haven't covered yet - you should feel free to modify and tinker with these chunks as you go along. This week will also provide a preview of some of the packages we're going to work with in the coming weeks (because I'm going to show you some code for e.g. summarizing a dataset and plot a few things, even without having covered that material). \n\n\n\n\n![It's 100% expected that you would be oscillating between just maybe understanding something and feeling completely lost again during this chapter. Hopefully, that feeling will get better over the next few weeks... but for now, just stick with it.](images/data-programming/What I Know.png){fig-alt='An illustrated cartoon graph with \"How much I think I know\" on the y-axis, with axis labels at \"I know nothing\" and \"I know lots\", versus time on the x-axis. The line varies widely between the two. Above the line are emoji-like faces, showing uncertainty and hope early on. A box is provided spanning an initial first peak, valley, and ascent to the highest peak, with a label that says \"you should be about here\".'}\n\nAs you've probably guessed by now, this week's reading will primarily be focused on examples.\n\n## Example: Artwork Dimensions\nThe Tate Art Museum assembled a collection of 70,000 artworks (last updated in 2014). They cataloged information including accession number, artwork dimensions, units, title, date, medium, inscription, and even URLs for images of the art. \n\n### Reading in the Data\n::: panel-tabset\n\n#### R {-}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\nartwork <- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-01-12/artwork.csv')\n```\n:::\n\n\n\n#### Python {-}\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport pandas as pd\nartwork = pd.read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-01-12/artwork.csv')\n```\n:::\n\n\n\n:::\n\n### Visual Summaries\n\nWhen you first access a new dataset, it's fun to explore it a bit. I've shown a summary of the variables (character variables summarized with completion rates and # unique values, numeric variables summarized with quantiles and mean/sd) generated using the R `skimr` and Python `skimpy` packages (which we'll talk about in the next chapter). \n\n::: panel-tabset\n\n#### R {-}\n\nYou may need to run `install.packages(\"skimr\")` in the R terminal if you have not used the package before.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(skimr)\nskim(artwork)\n```\n\n::: {.cell-output-display}\nTable: Data summary\n\n|                         |        |\n|:------------------------|:-------|\n|Name                     |artwork |\n|Number of rows           |69201   |\n|Number of columns        |20      |\n|_______________________  |        |\n|Column type frequency:   |        |\n|character                |12      |\n|logical                  |1       |\n|numeric                  |7       |\n|________________________ |        |\n|Group variables          |None    |\n\n\n**Variable type: character**\n\n|skim_variable    | n_missing| complete_rate| min| max| empty| n_unique| whitespace|\n|:----------------|---------:|-------------:|---:|---:|-----:|--------:|----------:|\n|accession_number |         0|          1.00|   6|   7|     0|    69201|          0|\n|artist           |         0|          1.00|   4| 120|     0|     3336|          0|\n|artistRole       |         0|          1.00|   5|  24|     0|       19|          0|\n|title            |         0|          1.00|   1| 320|     0|    43529|          0|\n|dateText         |         0|          1.00|   4|  75|     0|     2736|          0|\n|medium           |      6384|          0.91|   3| 120|     0|     3401|          0|\n|creditLine       |         3|          1.00|  14| 820|     0|     3209|          0|\n|dimensions       |      2433|          0.96|   4| 248|     0|    25575|          0|\n|units            |      3341|          0.95|   2|   2|     0|        1|          0|\n|inscription      |     62895|          0.09|  14|  14|     0|        1|          0|\n|thumbnailUrl     |     10786|          0.84|  55|  57|     0|    58415|          0|\n|url              |         0|          1.00|  48| 134|     0|    69201|          0|\n\n\n**Variable type: logical**\n\n|skim_variable      | n_missing| complete_rate| mean|count |\n|:------------------|---------:|-------------:|----:|:-----|\n|thumbnailCopyright |     69201|             0|  NaN|:     |\n\n\n**Variable type: numeric**\n\n|skim_variable   | n_missing| complete_rate|     mean|       sd|   p0|      p25|   p50|   p75|   p100|hist  |\n|:---------------|---------:|-------------:|--------:|--------:|----:|--------:|-----:|-----:|------:|:-----|\n|id              |         0|          1.00| 39148.03| 25980.47|    3| 19096.00| 37339| 54712| 129068|▇▇▅▁▁ |\n|artistId        |         0|          1.00|  1201.06|  2019.42|    0|   558.00|   558|  1137|  19232|▇▁▁▁▁ |\n|year            |      5397|          0.92|  1867.23|    72.01| 1545|  1817.00|  1831|  1953|   2012|▁▁▇▆▆ |\n|acquisitionYear |        45|          1.00|  1910.65|    64.20| 1823|  1856.00|  1856|  1982|   2013|▇▁▁▁▅ |\n|width           |      3367|          0.95|   323.47|   408.81|    3|   118.00|   175|   345|  11960|▇▁▁▁▁ |\n|height          |      3342|          0.95|   346.44|   538.04|    6|   117.00|   190|   359|  37500|▇▁▁▁▁ |\n|depth           |     66687|          0.04|   479.20|  1051.14|    1|    48.25|   190|   450|  18290|▇▁▁▁▁ |\n:::\n:::\n\n\n\n#### Python (pandas) {-}\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# Base pandas\nartwork.describe()\n##                   id      artistId  ...         depth  thumbnailCopyright\n## count   69201.000000  69201.000000  ...   2514.000000                 0.0\n## mean    39148.026213   1201.063251  ...    479.197772                 NaN\n## std     25980.468687   2019.422535  ...   1051.141734                 NaN\n## min         3.000000      0.000000  ...      1.000000                 NaN\n## 25%     19096.000000    558.000000  ...     48.250000                 NaN\n## 50%     37339.000000    558.000000  ...    190.000000                 NaN\n## 75%     54712.000000   1137.000000  ...    450.000000                 NaN\n## max    129068.000000  19232.000000  ...  18290.000000                 NaN\n## \n## [8 rows x 8 columns]\n```\n:::\n\n\n\n#### Python (skimpy) {-}\n\nYou may need to run `pip install skimpy` in the terminal if you have not used the package before.\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n\n# Skimpy package - like skimr\nfrom skimpy import skim\nskim(artwork)\n## ╭─────────────────────────────── skimpy summary ───────────────────────────────╮\n## │          Data Summary                Data Types                              │\n## │ ┏━━━━━━━━━━━━━━━━━━━┳━━━━━━━━┓ ┏━━━━━━━━━━━━━┳━━━━━━━┓                       │\n## │ ┃ dataframe         ┃ Values ┃ ┃ Column Type ┃ Count ┃                       │\n## │ ┡━━━━━━━━━━━━━━━━━━━╇━━━━━━━━┩ ┡━━━━━━━━━━━━━╇━━━━━━━┩                       │\n## │ │ Number of rows    │ 69201  │ │ object      │ 12    │                       │\n## │ │ Number of columns │ 20     │ │ float64     │ 6     │                       │\n## │ └───────────────────┴────────┘ │ int64       │ 2     │                       │\n## │                                └─────────────┴───────┘                       │\n## │                                   number                                     │\n## │ ┏━━━━━━┳━━━━━━━┳━━━━━━┳━━━━━━━┳━━━━━━┳━━━━━━┳━━━━━━━┳━━━━━━┳━━━━━━━┳━━━━━━┓  │\n## │ ┃      ┃ missi ┃ comp ┃ mean  ┃ sd   ┃ p0   ┃ p25   ┃ p75  ┃ p100  ┃ hist ┃  │\n## │ ┃      ┃ ng    ┃ lete ┃       ┃      ┃      ┃       ┃      ┃       ┃      ┃  │\n## │ ┃      ┃       ┃      ┃       ┃      ┃      ┃       ┃      ┃       ┃      ┃  │\n## │ ┃      ┃       ┃ rate ┃       ┃      ┃      ┃       ┃      ┃       ┃      ┃  │\n## │ ┡━━━━━━╇━━━━━━━╇━━━━━━╇━━━━━━━╇━━━━━━╇━━━━━━╇━━━━━━━╇━━━━━━╇━━━━━━━╇━━━━━━┩  │\n## │ │ id   │     0 │    1 │ 39000 │ 2600 │    3 │ 19000 │ 5500 │ 13000 │ ▇██▁ │  │\n## │ │      │       │      │       │    0 │      │       │    0 │     0 │  ▁▁  │  │\n## │ │ arti │     0 │    1 │  1200 │ 2000 │    0 │   560 │ 1100 │ 19000 │  █   │  │\n## │ │ stId │       │      │       │      │      │       │      │       │      │  │\n## │ │ year │  5400 │ 0.92 │  1900 │   72 │ 1500 │  1800 │ 2000 │  2000 │    █ │  │\n## │ │      │       │      │       │      │      │       │      │       │  ▁▃  │  │\n## │ │ acqu │    45 │    1 │  1900 │   64 │ 1800 │  1900 │ 2000 │  2000 │   █  │  │\n## │ │ isit │       │      │       │      │      │       │      │       │ ▁▂▄  │  │\n## │ │ ionY │       │      │       │      │      │       │      │       │      │  │\n## │ │ ear  │       │      │       │      │      │       │      │       │      │  │\n## │ │ widt │  3400 │ 0.95 │   320 │  410 │    3 │   120 │  340 │ 12000 │  █   │  │\n## │ │ h    │       │      │       │      │      │       │      │       │      │  │\n## │ │ heig │  3300 │ 0.95 │   350 │  540 │    6 │   120 │  360 │ 38000 │  █   │  │\n## │ │ ht   │       │      │       │      │      │       │      │       │      │  │\n## │ │ dept │ 67000 │ 0.03 │   480 │ 1100 │    1 │    48 │  450 │ 18000 │  █   │  │\n## │ │ h    │       │    6 │       │      │      │       │      │       │      │  │\n## │ │ thum │ 69000 │    0 │   nan │  nan │  nan │   nan │  nan │   nan │      │  │\n## │ │ bnai │       │      │       │      │      │       │      │       │      │  │\n## │ │ lCop │       │      │       │      │      │       │      │       │      │  │\n## │ │ yrig │       │      │       │      │      │       │      │       │      │  │\n## │ │ ht   │       │      │       │      │      │       │      │       │      │  │\n## │ └──────┴───────┴──────┴───────┴──────┴──────┴───────┴──────┴───────┴──────┘  │\n## ╰──────────────────────────────────── End ─────────────────────────────────────╯\n## \n## /home/susan/Projects/Class/unl-stat850/stat850-textbook/renv/python/virtualenvs/renv-python-3.8/lib/python3.8/site-packages/numpy/lib/histograms.py:906: RuntimeWarning: invalid value encountered in true_divide\n##   return n/db/n.sum(), bin_edges\n```\n:::\n\n\n:::\n\n### Accessing one column\n\nFirst, let's pull out the year for each piece of artwork in the dataset and see what we can do with it...\n\n::: panel-tabset\n\n#### R {-}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(artwork$year)\n## [1]   NA   NA 1785   NA 1826 1826\n```\n:::\n\n\n\nWe reference a column of the dataset by name using `dataset_name$column_name`, and since our data is stored in `artwork`, and we want the column named `year`, we use `artwork$year` to get access to the data we want.\n\n#### Python {-}\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nartwork.year.head()\n## 0       NaN\n## 1       NaN\n## 2    1785.0\n## 3       NaN\n## 4    1826.0\n## Name: year, dtype: float64\n```\n:::\n\n\n\nWe reference a column of the dataset by name using `dataset_name.column_name` or `dataset_name['column_name']`, and since our data is stored in `artwork` and we want the column `year`, we use `artwork.year` or `artwork['year']` to access the data we want.\n\n:::\n\n\nI've used the `head` command to show only the first few values (so that the output isn't overwhelming). \n\n### Variable Summary\n\nWhen we have output like this, it is useful to summarize the output in some way:\n\n::: panel-tabset\n\n#### R {-}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(artwork$year)\n##    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n##    1545    1817    1831    1867    1953    2012    5397\n```\n:::\n\n\n\nThat's much less output, but we might want to instead make a chart:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(artwork$year, breaks = 30)\n```\n\n::: {.cell-output-display}\n![](data-programming_files/figure-pdf/hist-data-col-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n#### Python {-}\n\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nartwork.year.describe()\n## count    63804.000000\n## mean      1867.227823\n## std         72.012718\n## min       1545.000000\n## 25%       1817.000000\n## 50%       1831.000000\n## 75%       1953.000000\n## max       2012.000000\n## Name: year, dtype: float64\n```\n:::\n\n\n\nThe `df.describe()` command provides us with a 5-number summary and then some additional statistics. \n\nWe can also create a chart:\n\n\n::: {.cell}\n\n```{.python .cell-code}\nartwork.year.hist(bins = 30)\n```\n\n::: {.cell-output-display}\n![](data-programming_files/figure-pdf/hist-data-col-py-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n:::\n\nPersonally, I much prefer the graphical version. It's informative (though it does leave out NA values) and shows that there are pieces going back to the 1500s, but that most pieces were made in the early 1800s or late 1900s. \n\n### Create a Histogram (base graphics/matplotlib)\n\nWe might be interested in the aspect ratio of the artwork - let's take a look at the input variables and define new variables related to aspect ratio(s).\n\n::: panel-tabset\n\n####R {-}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(1, 3)) # 3 plots on one row\nhist(artwork$width, main = \"width\", breaks = 30)\nhist(artwork$depth, main = \"depth\", breaks = 30)\nhist(artwork$height, main = \"height\", breaks = 30)\n```\n\n::: {.cell-output-display}\n![](data-programming_files/figure-pdf/hist-dims-art-3.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n#### Python {-}\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport matplotlib.pyplot as plt\n\nfig, axes = plt.subplots(nrows=1, ncols=3) # 3 subplots\n\nartwork.width.hist(bins = 30, ax = axes[0])\nartwork.depth.hist(bins = 30, ax = axes[1])\nartwork.height.hist(bins = 30, ax= axes[2])\n\n# Set subplot titles\naxes[0].title.set_text(\"width\")\naxes[1].title.set_text(\"depth\")\naxes[2].title.set_text(\"height\")\n\nplt.show()\n```\n\n::: {.cell-output-display}\n![](data-programming_files/figure-pdf/hist-dims-art-py-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n:::\n\nSo all of our variables are skewed quite a bit, and we know from the existence of the `units` column that they may not be in the same unit, either.\n\n### Summary Tables\n\nLet's make a table of the units column so that we can see what the frequency of various units are in the dataset.\n\n::: panel-tabset\n\n#### R {-}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(artwork$units, useNA = 'ifany')\n## \n##    mm  <NA> \n## 65860  3341\n```\n:::\n\n\n\n#### Python {-}\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nartwork.units.value_counts(dropna=False)\n## mm     65860\n## NaN     3341\n## Name: units, dtype: int64\n```\n:::\n\n\n\n:::\n\nEverything that has specified units is in mm. That makes things easier.\n\n### Defining a new variable\n\n::: panel-tabset\n\n#### R {-}\n\nTo define a new variable that exists on its own, we might do something like this:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naspect_hw <- artwork$height/artwork$width\npar(mfrow = c(1, 2))\nhist(aspect_hw, breaks = 30)\nhist(log(aspect_hw), breaks = 30)\n```\n\n::: {.cell-output-display}\n![](data-programming_files/figure-pdf/hist-aspect-ratio-calc-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n\n#### Python {-}\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport numpy as np\n\nfig, axes = plt.subplots(nrows=1, ncols=2) # 2 subplots\n\naspect_hw = artwork.height/artwork.width\naspect_hw.hist(bins = 30, ax = axes[0])\nnp.log(aspect_hw).hist(bins = 30, ax = axes[1])\n```\n\n::: {.cell-output-display}\n![](data-programming_files/figure-pdf/hist-aspect-ratio-calc-py-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n:::\n\nMost things are pretty square-ish, but there are obviously quite a few exceptions in both directions.\n\nThe one problem with how we've done this is that we now have a data frame with all of our data in it, and a separate variable `aspect_hw`, that is not attached to our data frame. That's not ideal - it's easy to lose track of the variable, it's easy to accidentally \"sort\" the variable so that the row order isn't the same as in the original data frame... there are all sorts of potential issues.\n\n### Adding a new column\n\nThe better way to define a new variable is to add a new **column** to the data frame:\n\n::: panel-tabset\n\n#### R {-}\n\nTo define a new variable that exists on its own, we might do something like this:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nartwork$aspect_hw <- artwork$height/artwork$width\n```\n:::\n\n\n\n\n#### Python {-}\n\n\n::: {.cell}\n\n```{.python .cell-code}\nartwork['aspect_hw'] = artwork.height/artwork.width\n```\n:::\n\n\n\nNote that when you create a new column in a pandas dataframe, you have to use `df['colname']` on the left hand side, even if you use `df.colname` syntax on the right hand side.\n\n:::\n\n\n(We'll learn a shorter way to do this later, but this is functional, if not pretty, for now).\n\nThe downside to this is that we have to write out `artwork$aspect_hw` or `artwork.aspect_hw` each time we want to reference the variable. That is a pain, but one that's relatively temporary (we'll get to a better way to do this in a couple of weeks). A little bit of extra typing is definitely worth it if you don't lose data you want to keep.\n\n::: watchout\n\nOne mistake I see people make frequently is to calculate `height/width`, but then not assign that value to a variable. \n\nIf you're not using `<-` in R^[(or `=` or `->` if you're a total heathen)] or `=` in Python, then you're not saving that information to be referenced later - you're just calculating values temporarily and possibly printing them as output. \n\n:::\n\n### Conclusions\n\nIt's important to keep track of where you're putting the pieces you create during an analysis - just as important as keeping track of the different sub-components when you're putting a lego set together or making a complex recipe in the kitchen. Forgetting to assign your calculation to a variable is like dumping your glaze down the sink or throwing that small lego component into the trash.\n\n\n## Example 2: Dogs of NYC\n\nNew York City provides a whole host of open-data resources, including a [dataset of dogs licensed in the city on an annual basis](https://data.cityofnewyork.us/Health/NYC-Dog-Licensing-Dataset/nu7n-tubp) (link is to the NYC Open Data Page). \n\n[CSV link](https://data.cityofnewyork.us/api/views/nu7n-tubp/rows.csv?accessType=DOWNLOAD) (this data is ~23 MB)\n\n###  Read in data\n\n::: panel-tabset\n\n#### R {-}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readr)\n\nif (!file.exists(\"data/NYC_dogs.csv\")) {\n  # if the file doesn't exist, download it!\n  download.file(\n    \"https://data.cityofnewyork.us/api/views/nu7n-tubp/rows.csv?accessType=DOWNLOAD\", # url for download\n    destfile = \"data/NYC_dogs.csv\", # location to store the file\n    mode = \"wb\" # need this to get downloads to work on windows\n  )\n}\n\ndogs <- read_csv(\"data/NYC_dogs.csv\")\nhead(dogs)\n## # A tibble: 6 x 11\n##   RowNumber AnimalName AnimalGender AnimalBirthMonth BreedName   Borough ZipCode\n##       <dbl> <chr>      <chr>                   <dbl> <chr>       <lgl>     <dbl>\n## 1         1 PAIGE      F                        2014 American P~ NA        10035\n## 2         2 YOGI       M                        2010 Boxer       NA        10465\n## 3         3 ALI        M                        2014 Basenji     NA        10013\n## 4         4 QUEEN      F                        2013 Akita Cros~ NA        10013\n## 5         5 LOLA       F                        2009 Maltese     NA        10028\n## 6         6 IAN        M                        2006 Unknown     NA        10013\n## # ... with 4 more variables: LicenseIssuedDate <chr>, LicenseExpiredDate <chr>,\n## #   `Extract Year` <dbl>, `Unique Dog ID` <lgl>\n```\n:::\n\n\n\n#### Python {-}\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom os.path import exists # to test whether files exist\nimport requests # to download a file\n\nif ~exists(\"data/NYC_dogs.csv\"):\n  response = requests.get(\"https://data.cityofnewyork.us/api/views/nu7n-tubp/rows.csv?accessType=DOWNLOAD\")\n  open(\"data/NYC_dogs.csv\", \"wb\").write(response.content)\n## 15130695\ndogs = pd.read_csv(\"data/NYC_dogs.csv\")\n## <string>:1: DtypeWarning: Columns (0) have mixed types. Specify dtype option on import or set low_memory=False.\ndogs.head()\n##   RowNumber AnimalName  ... Extract Year  Unique Dog ID\n## 0         1      PAIGE  ...       2016.0            NaN\n## 1         2       YOGI  ...       2016.0            NaN\n## 2         3        ALI  ...       2016.0            NaN\n## 3         4      QUEEN  ...       2016.0            NaN\n## 4         5       LOLA  ...       2016.0            NaN\n## \n## [5 rows x 11 columns]\n```\n:::\n\n\n\n:::\n\n\n### Work with Dates\n\nOne thing we might want to do first is to transform the license dates (`LicenseIssuedDate`, `LicenseExpiredDate`) into actual dates instead of characters. \n\n::: panel-tabset\n\n#### R {-}\n\nWe will use the `lubridate` package to do this, because it is designed to make working with dates and times very easy.\n\nYou may need to run `install.packages(\"lubridate\")` in the R console if you have not used the package before.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lubridate)\nhead(dogs$LicenseExpiredDate) # Dates are in month-day-year format\n## [1] \"09/12/2017\" \"10/02/2017\" \"09/12/2019\" \"09/12/2017\" \"10/09/2017\"\n## [6] \"10/30/2019\"\n\ndogs$LicenseExpiredDate <- mdy(dogs$LicenseExpiredDate)\ndogs$LicenseIssuedDate <- mdy(dogs$LicenseIssuedDate)\n\nhead(dogs$LicenseExpiredDate)\n## [1] \"2017-09-12\" \"2017-10-02\" \"2019-09-12\" \"2017-09-12\" \"2017-10-09\"\n## [6] \"2019-10-30\"\n```\n:::\n\n\n\n#### Python {-}\n\nYou may need to run `pip install datetime` in the terminal if you have not used the package before. \n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom datetime import date\n\ndogs[['LicenseExpiredDate','LicenseIssuedDate']].head() # Before\n##   LicenseExpiredDate LicenseIssuedDate\n## 0         09/12/2017        09/12/2014\n## 1         10/02/2017        09/12/2014\n## 2         09/12/2019        09/12/2014\n## 3         09/12/2017        09/12/2014\n## 4         10/09/2017        09/12/2014\nformat_str = \"%m/%d/%Y\" # date format in the dataset\n\ndogs['LicenseExpiredDate'] = pd.to_datetime(dogs.LicenseExpiredDate, format = format_str)\n## Error in py_call_impl(callable, dots$args, dots$keywords): ValueError: time data '12{' does not match format '%m/%d/%Y' (match)\n## \n## Detailed traceback:\n##   File \"<string>\", line 1, in <module>\n##   File \"/home/susan/Projects/Class/unl-stat850/stat850-textbook/renv/python/virtualenvs/renv-python-3.8/lib/python3.8/site-packages/pandas/core/tools/datetimes.py\", line 1047, in to_datetime\n##     cache_array = _maybe_cache(arg, format, cache, convert_listlike)\n##   File \"/home/susan/Projects/Class/unl-stat850/stat850-textbook/renv/python/virtualenvs/renv-python-3.8/lib/python3.8/site-packages/pandas/core/tools/datetimes.py\", line 197, in _maybe_cache\n##     cache_dates = convert_listlike(unique_dates, format)\n##   File \"/home/susan/Projects/Class/unl-stat850/stat850-textbook/renv/python/virtualenvs/renv-python-3.8/lib/python3.8/site-packages/pandas/core/tools/datetimes.py\", line 394, in _convert_listlike_datetimes\n##     res = _to_datetime_with_format(\n##   File \"/home/susan/Projects/Class/unl-stat850/stat850-textbook/renv/python/virtualenvs/renv-python-3.8/lib/python3.8/site-packages/pandas/core/tools/datetimes.py\", line 514, in _to_datetime_with_format\n##     raise err\n##   File \"/home/susan/Projects/Class/unl-stat850/stat850-textbook/renv/python/virtualenvs/renv-python-3.8/lib/python3.8/site-packages/pandas/core/tools/datetimes.py\", line 501, in _to_datetime_with_format\n##     res = _array_strptime_with_fallback(\n##   File \"/home/susan/Projects/Class/unl-stat850/stat850-textbook/renv/python/virtualenvs/renv-python-3.8/lib/python3.8/site-packages/pandas/core/tools/datetimes.py\", line 437, in _array_strptime_with_fallback\n##     result, timezones = array_strptime(arg, fmt, exact=exact, errors=errors)\n##   File \"pandas/_libs/tslibs/strptime.pyx\", line 150, in pandas._libs.tslibs.strptime.array_strptime\ndogs['LicenseIssuedDate'] = pd.to_datetime(dogs.LicenseIssuedDate, format = format_str)\n\ndogs[['LicenseExpiredDate','LicenseIssuedDate']].head() # After\n##   LicenseExpiredDate LicenseIssuedDate\n## 0         09/12/2017        2014-09-12\n## 1         10/02/2017        2014-09-12\n## 2         09/12/2019        2014-09-12\n## 3         09/12/2017        2014-09-12\n## 4         10/09/2017        2014-09-12\n```\n:::\n\n\n\n:::\n\nIt might be interesting to see when licenses have been issued over time, so let's make a histogram. This time, I'm going to use ggplot graphics with the `ggplot2` package in R and the `plotnine` package in python (which is the python version of the R package). \n\n### Create a Histogram (ggplot2/plotnine)\n\n::: panel-tabset\n\n#### R {-}\n\nYou may need to run `install.packages(\"ggplot2\")` in the R console if you have not used ggplot2 before.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nggplot(\n  data = dogs, \n  aes(x = LicenseIssuedDate) # Specify we want LicenseIssueDate on the x-axis\n) + \n  geom_histogram() # Create a histogram\n```\n\n::: {.cell-output-display}\n![](data-programming_files/figure-pdf/dog-license-hist-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n#### Python {-}\n\nYou may need to run `pip install plotnine` in the terminal if you have not used the package before. \n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom plotnine import *\n\n(\n  ggplot(aes(x = 'LicenseIssuedDate'), data = dogs) + \n  geom_histogram() # Create a histogram\n)\n## Error in py_call_impl(callable, dots$args, dots$keywords): ValueError: cannot convert float NaN to integer\n## \n## Detailed traceback:\n##   File \"<string>\", line 1, in <module>\n##   File \"/home/susan/Projects/Class/unl-stat850/stat850-textbook/renv/python/virtualenvs/renv-python-3.8/lib/python3.8/site-packages/plotnine/ggplot.py\", line 97, in __repr__\n##     self.__str__()\n##   File \"/home/susan/Projects/Class/unl-stat850/stat850-textbook/renv/python/virtualenvs/renv-python-3.8/lib/python3.8/site-packages/plotnine/ggplot.py\", line 88, in __str__\n##     self.draw(show=True)\n##   File \"/home/susan/Projects/Class/unl-stat850/stat850-textbook/renv/python/virtualenvs/renv-python-3.8/lib/python3.8/site-packages/plotnine/ggplot.py\", line 205, in draw\n##     self._build()\n##   File \"/home/susan/Projects/Class/unl-stat850/stat850-textbook/renv/python/virtualenvs/renv-python-3.8/lib/python3.8/site-packages/plotnine/ggplot.py\", line 300, in _build\n##     layers.compute_statistic(layout)\n##   File \"/home/susan/Projects/Class/unl-stat850/stat850-textbook/renv/python/virtualenvs/renv-python-3.8/lib/python3.8/site-packages/plotnine/layer.py\", line 73, in compute_statistic\n##     l.compute_statistic(layout)\n##   File \"/home/susan/Projects/Class/unl-stat850/stat850-textbook/renv/python/virtualenvs/renv-python-3.8/lib/python3.8/site-packages/plotnine/layer.py\", line 321, in compute_statistic\n##     params = self.stat.setup_params(data)\n##   File \"/home/susan/Projects/Class/unl-stat850/stat850-textbook/renv/python/virtualenvs/renv-python-3.8/lib/python3.8/site-packages/plotnine/stats/stat_bin.py\", line 92, in setup_params\n##     params['bins'] = freedman_diaconis_bins(data['x'])\n##   File \"/home/susan/Projects/Class/unl-stat850/stat850-textbook/renv/python/virtualenvs/renv-python-3.8/lib/python3.8/site-packages/plotnine/stats/binning.py\", line 35, in freedman_diaconis_bins\n##     return np.int(bins)\n```\n:::\n\n\n\n:::\n\nThere is an interesting periodicity to the license issue dates. \n\n### Compute License Length\n\nI'm also curious about how long a license tends to be held for - we can get this information by subtracting the issue date from the expiration date.\n\n::: panel-tabset\n\n#### R\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndogs$LicenseLength <- dogs$LicenseExpiredDate - dogs$LicenseIssuedDate\nsummary(dogs$LicenseLength)\n##   Length    Class     Mode \n##   493072 difftime  numeric\nhead(dogs$LicenseLength)\n## Time differences in days\n## [1] 1096 1116 1826 1096 1123 1874\n```\n:::\n\n\n\nWe can see that directly subtracting date-times gives us a license length in days. That's useful enough, I guess, but it might be more useful in years... unfortunately, that's not an option for `difftime()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\ndogs$LicenseLength <- difftime(dogs$LicenseExpiredDate, dogs$LicenseIssuedDate, units = \"weeks\")\n\n# 52 weeks in a year so we'll just convert as we plot\nggplot(data = dogs, aes(x = LicenseLength / 52 )) + geom_histogram() + \n  scale_x_continuous(limits = c(0,10))\n```\n\n::: {.cell-output-display}\n![](data-programming_files/figure-pdf/dog-license-length-2-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n#### Python\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\ndogs[\"License_length\"] = dogs.LicenseExpiredDate - dogs.LicenseIssuedDate\n## Error in py_call_impl(callable, dots$args, dots$keywords): TypeError: cannot subtract DatetimeArray from ndarray\n## \n## Detailed traceback:\n##   File \"<string>\", line 1, in <module>\n##   File \"/home/susan/Projects/Class/unl-stat850/stat850-textbook/renv/python/virtualenvs/renv-python-3.8/lib/python3.8/site-packages/pandas/core/ops/common.py\", line 70, in new_method\n##     return method(self, other)\n##   File \"/home/susan/Projects/Class/unl-stat850/stat850-textbook/renv/python/virtualenvs/renv-python-3.8/lib/python3.8/site-packages/pandas/core/arraylike.py\", line 108, in __sub__\n##     return self._arith_method(other, operator.sub)\n##   File \"/home/susan/Projects/Class/unl-stat850/stat850-textbook/renv/python/virtualenvs/renv-python-3.8/lib/python3.8/site-packages/pandas/core/series.py\", line 5639, in _arith_method\n##     return base.IndexOpsMixin._arith_method(self, other, op)\n##   File \"/home/susan/Projects/Class/unl-stat850/stat850-textbook/renv/python/virtualenvs/renv-python-3.8/lib/python3.8/site-packages/pandas/core/base.py\", line 1295, in _arith_method\n##     result = ops.arithmetic_op(lvalues, rvalues, op)\n##   File \"/home/susan/Projects/Class/unl-stat850/stat850-textbook/renv/python/virtualenvs/renv-python-3.8/lib/python3.8/site-packages/pandas/core/ops/array_ops.py\", line 216, in arithmetic_op\n##     res_values = op(left, right)\n##   File \"/home/susan/Projects/Class/unl-stat850/stat850-textbook/renv/python/virtualenvs/renv-python-3.8/lib/python3.8/site-packages/pandas/core/arrays/datetimelike.py\", line 1752, in __array_ufunc__\n##     return super().__array_ufunc__(ufunc, method, *inputs, **kwargs)\n##   File \"/home/susan/Projects/Class/unl-stat850/stat850-textbook/renv/python/virtualenvs/renv-python-3.8/lib/python3.8/site-packages/pandas/core/arrays/base.py\", line 1611, in __array_ufunc__\n##     result = arraylike.maybe_dispatch_ufunc_to_dunder_op(\n##   File \"pandas/_libs/ops_dispatch.pyx\", line 113, in pandas._libs.ops_dispatch.maybe_dispatch_ufunc_to_dunder_op\n##   File \"/home/susan/Projects/Class/unl-stat850/stat850-textbook/renv/python/virtualenvs/renv-python-3.8/lib/python3.8/site-packages/pandas/core/arrays/datetimelike.py\", line 1380, in __rsub__\n##     raise TypeError(\ndogs.License_length.describe()\n## Error in py_call_impl(callable, dots$args, dots$keywords): AttributeError: 'DataFrame' object has no attribute 'License_length'\n## \n## Detailed traceback:\n##   File \"<string>\", line 1, in <module>\n##   File \"/home/susan/Projects/Class/unl-stat850/stat850-textbook/renv/python/virtualenvs/renv-python-3.8/lib/python3.8/site-packages/pandas/core/generic.py\", line 5575, in __getattr__\n##     return object.__getattribute__(self, name)\ndogs.License_length.head()\n## Error in py_call_impl(callable, dots$args, dots$keywords): AttributeError: 'DataFrame' object has no attribute 'License_length'\n## \n## Detailed traceback:\n##   File \"<string>\", line 1, in <module>\n##   File \"/home/susan/Projects/Class/unl-stat850/stat850-textbook/renv/python/virtualenvs/renv-python-3.8/lib/python3.8/site-packages/pandas/core/generic.py\", line 5575, in __getattr__\n##     return object.__getattribute__(self, name)\ndogs[\"License_length_yr\"] = dogs.License_length.dt.days/365.25\n## Error in py_call_impl(callable, dots$args, dots$keywords): AttributeError: 'DataFrame' object has no attribute 'License_length'\n## \n## Detailed traceback:\n##   File \"<string>\", line 1, in <module>\n##   File \"/home/susan/Projects/Class/unl-stat850/stat850-textbook/renv/python/virtualenvs/renv-python-3.8/lib/python3.8/site-packages/pandas/core/generic.py\", line 5575, in __getattr__\n##     return object.__getattribute__(self, name)\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\n(\n  ggplot(aes(x = \"License_length_yr\"), data = dogs_sub) + \n  geom_histogram(bins = 30)+\n  scale_x_continuous(limits = (0,10))\n)\n## Error in py_call_impl(callable, dots$args, dots$keywords): NameError: name 'dogs_sub' is not defined\n## \n## Detailed traceback:\n##   File \"<string>\", line 2, in <module>\n```\n:::\n\n\n\nIn python, we have to first access the \"days\" attribute of the `timedelta64` data type (this gives us a number) using `dogs.Licence_length.dt.days` and then divide by 365.25 (number of days in a year, on average). \n:::\n\n### Explore Boroughs\n\nAnother question that I have when looking at this dataset is a bit more superficial - are the characteristics of different areas different? The `dogs` data frame has a Borough column, but it's not actually filled in, so we'll need to get rid of it and then add Borough back in by zip code. \n\nTo look at this, we'll need a bit more data. I found a list of NYC zip codes by borough, which we can merge in with the data we already have to get puppy registrations by borough. Then, we can see if e.g. the top 10 breeds are different for different boroughs. To simplify this, I'm going to link to a file to merge in, and not show you the specifics of how I read the table from [this site](https://www.nycbynatives.com/nyc_info/new_york_city_zip_codes.php).\n\n\n\n\n\n\n\n::: panel-tabset\n\n#### R {-}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nborough_zip <- read_csv(\"https://raw.githubusercontent.com/srvanderplas/unl-stat850/main/data/nyc_zip_borough.csv\")\n\n# Remove the Borough column from dogs\ndogs <- dogs[, which(names(dogs) != \"Borough\")]\ndogs <- merge(dogs, borough_zip, by = \"ZipCode\")\nhead(dogs)\n##   ZipCode RowNumber AnimalName AnimalGender AnimalBirthMonth\n## 1   10001     67887      ROCKY            M             2015\n## 2   10001    103829      CASEY            M             2017\n## 3   10001     30515    UNKNOWN            F             2015\n## 4   10001     96067      ROMAN            M             2018\n## 5   10001     76251       SOBA            M             2018\n## 6   10001    111379  CLEOPATRA            F             2019\n##                       BreedName LicenseIssuedDate LicenseExpiredDate\n## 1           Miniature Schnauzer        2019-02-14         2020-01-15\n## 2 Cavalier King Charles Spaniel        2017-10-23         2018-10-23\n## 3                     Chihuahua        2015-11-03         2016-11-03\n## 4                    Weimaraner        2019-05-29         2021-05-29\n## 5                     Shiba Inu        2019-10-05         2021-09-10\n## 6             Poodle Crossbreed        2019-10-21         2020-10-21\n##   Extract Year Unique Dog ID   LicenseLength   Borough\n## 1           NA            NA  47.85714 weeks Manhattan\n## 2         2017            NA  52.14286 weeks Manhattan\n## 3         2016            NA  52.28571 weeks Manhattan\n## 4           NA            NA 104.42857 weeks Manhattan\n## 5           NA            NA 100.85714 weeks Manhattan\n## 6           NA            NA  52.28571 weeks Manhattan\n```\n:::\n\n\n\n\n#### Python {-}\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nborough_zip = pd.read_csv(\"https://raw.githubusercontent.com/srvanderplas/unl-stat850/main/data/nyc_zip_borough.csv\")\n\ndogs = dogs.drop('Borough', axis = 1) # drop borough column\ndogs = pd.merge(dogs, borough_zip, on = 'ZipCode')\ndogs.head()\n##   RowNumber  AnimalName AnimalGender  ...  Extract Year Unique Dog ID    Borough\n## 0         1       PAIGE            F  ...        2016.0           NaN  Manhattan\n## 1        82       BRODY            M  ...        2016.0           NaN  Manhattan\n## 2       199       ROCKO            M  ...        2016.0           NaN  Manhattan\n## 3       282   SENSATION            F  ...        2016.0           NaN  Manhattan\n## 4       290  TEMPTATION            M  ...        2016.0           NaN  Manhattan\n## \n## [5 rows x 11 columns]\n```\n:::\n\n\n\n:::\n\nNow that we have borough, let's write a function that will take a dataset and spit out a list of the top 5 dog breeds registered in that area.\n\n### Custom Summary Function\n\n::: panel-tabset\n\n#### R {-}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop_5_breeds <- function(data) {\n  # Inside the function, our dataset is called data, not dogs\n  tmp <- table(data$BreedName) \n  return(sort(tmp, decreasing = T)[1:5]) # top 5 breeds with counts\n}\n```\n:::\n\n\n\n#### Python {-}\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n\ndef top_5_breeds(data):\n  tmp = pd.value_counts(data.BreedName)\n  return tmp.iloc[0:5]\n```\n:::\n\n\n\n:::\n\n\n### For Loop Summary\n\nNow, using that function, lets write a for loop that loops through the 5 boroughs and spits out the top 5 breeds in each borough:\n\n::: panel-tabset\n\n#### R {-}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboroughs <- unique(borough_zip$Borough) # get a list of the 5 boroughs\nfor (i in boroughs) {\n  # Get subset of data frame corresponding to the Borough\n  dogs_sub <- subset(dogs, Borough == i)\n  # Get top 5 dog breeds\n  result <- as.data.frame(top_5_breeds(dogs_sub))\n  # set names\n  names(result) <- c(\"Breed\", \"Freq\")\n  # Add Borough as a new column\n  result$Borough <- i\n  # Add rank as a new column\n  result$rank <- 1:5\n  \n  print(result)\n}\n##                Breed  Freq   Borough rank\n## 1            Unknown 16728 Manhattan    1\n## 2  Yorkshire Terrier  7242 Manhattan    2\n## 3          Chihuahua  6907 Manhattan    3\n## 4           Shih Tzu  6209 Manhattan    4\n## 5 Labrador Retriever  5662 Manhattan    5\n##                Breed Freq Borough rank\n## 1            Unknown 5894  Staten    1\n## 2           Shih Tzu 3058  Staten    2\n## 3  Yorkshire Terrier 2987  Staten    3\n## 4 Labrador Retriever 2061  Staten    4\n## 5            Maltese 1588  Staten    5\n##                                Breed Freq Borough rank\n## 1                            Unknown 5071   Bronx    1\n## 2                  Yorkshire Terrier 4956   Bronx    2\n## 3                           Shih Tzu 4153   Bronx    3\n## 4                          Chihuahua 2934   Bronx    4\n## 5 American Pit Bull Terrier/Pit Bull 2334   Bronx    5\n##               Breed  Freq Borough rank\n## 1           Unknown 11771  Queens    1\n## 2 Yorkshire Terrier  6696  Queens    2\n## 3          Shih Tzu  6016  Queens    3\n## 4           Maltese  4274  Queens    4\n## 5         Chihuahua  4168  Queens    5\n##                                  Breed  Freq  Borough rank\n## 1                              Unknown 14236 Brooklyn    1\n## 2                    Yorkshire Terrier  8046 Brooklyn    2\n## 3                             Shih Tzu  7543 Brooklyn    3\n## 4                            Chihuahua  5520 Brooklyn    4\n## 5 American Pit Bull Mix / Pit Bull Mix  4315 Brooklyn    5\n```\n:::\n\n\n\n#### Python {-}\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nboroughs = borough_zip.Borough.unique()\nfor i in boroughs:\n  # get subset of data frame corresponding to the borough\n  dogs_sub = dogs.query(\"Borough== @i\")\n  # Get top 5 breeds\n  result = top_5_breeds(dogs_sub)\n  # Convert to DataFrame and make the index another column\n  result = result.to_frame().reset_index()\n  # Rename columns\n  result.rename(columns = {'index':'BreedName','BreedName':'count'})\n  # Add Borough column\n  result[\"Borough\"] = i\n  # Add rank column\n  result[\"rank\"] = range(1, 6)\n\n  print(result)\n##             BreedName  count\n## 0             Unknown   8298\n## 1   Yorkshire Terrier   3465\n## 2           Chihuahua   3278\n## 3            Shih Tzu   2963\n## 4  Labrador Retriever   2638\n##                 index  BreedName    Borough  rank\n## 0             Unknown       8298  Manhattan     1\n## 1   Yorkshire Terrier       3465  Manhattan     2\n## 2           Chihuahua       3278  Manhattan     3\n## 3            Shih Tzu       2963  Manhattan     4\n## 4  Labrador Retriever       2638  Manhattan     5\n##             BreedName  count\n## 0             Unknown   2683\n## 1   Yorkshire Terrier   1300\n## 2            Shih Tzu   1286\n## 3  Labrador Retriever    956\n## 4             Maltese    699\n##                 index  BreedName Borough  rank\n## 0             Unknown       2683  Staten     1\n## 1   Yorkshire Terrier       1300  Staten     2\n## 2            Shih Tzu       1286  Staten     3\n## 3  Labrador Retriever        956  Staten     4\n## 4             Maltese        699  Staten     5\n##                             BreedName  count\n## 0                             Unknown   2300\n## 1                   Yorkshire Terrier   2235\n## 2                            Shih Tzu   1899\n## 3                           Chihuahua   1455\n## 4  American Pit Bull Terrier/Pit Bull   1236\n##                                 index  BreedName Borough  rank\n## 0                             Unknown       2300   Bronx     1\n## 1                   Yorkshire Terrier       2235   Bronx     2\n## 2                            Shih Tzu       1899   Bronx     3\n## 3                           Chihuahua       1455   Bronx     4\n## 4  American Pit Bull Terrier/Pit Bull       1236   Bronx     5\n##            BreedName  count\n## 0            Unknown   5465\n## 1  Yorkshire Terrier   2922\n## 2           Shih Tzu   2715\n## 3            Maltese   2013\n## 4          Chihuahua   1952\n##                index  BreedName Borough  rank\n## 0            Unknown       5465  Queens     1\n## 1  Yorkshire Terrier       2922  Queens     2\n## 2           Shih Tzu       2715  Queens     3\n## 3            Maltese       2013  Queens     4\n## 4          Chihuahua       1952  Queens     5\n##                               BreedName  count\n## 0                               Unknown   6303\n## 1                     Yorkshire Terrier   3678\n## 2                              Shih Tzu   3353\n## 3                             Chihuahua   2601\n## 4  American Pit Bull Mix / Pit Bull Mix   2027\n##                                   index  BreedName   Borough  rank\n## 0                               Unknown       6303  Brooklyn     1\n## 1                     Yorkshire Terrier       3678  Brooklyn     2\n## 2                              Shih Tzu       3353  Brooklyn     3\n## 3                             Chihuahua       2601  Brooklyn     4\n## 4  American Pit Bull Mix / Pit Bull Mix       2027  Brooklyn     5\n```\n:::\n\n\n\n\n[More information on pandas `query` function](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.query.html) (use `\\@varname` to use a variable in a query).\n\n:::\n\n### Summary Data Frame\n\nIf we wanted to save these results as a summary data frame, we could totally do that!\n\n::: panel-tabset\n\n#### R {-}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbreeds_by_borough <- data.frame() # create a blank data frame\n\nfor (i in boroughs) {\n  # Get subset of data frame corresponding to the Borough\n  dogs_sub <- subset(dogs, Borough == i)\n  # Get top 5 dog breeds\n  result <- as.data.frame(top_5_breeds(dogs_sub))\n  # set names\n  names(result) <- c(\"Breed\", \"Freq\")\n  # Add Borough as a new column\n  result$Borough <- i\n  # Add rank as a new column\n  result$rank <- 1:5\n  \n  breeds_by_borough <- rbind(breeds_by_borough, result)\n}\n\nbreeds_by_borough\n##                                   Breed  Freq   Borough rank\n## 1                               Unknown 16728 Manhattan    1\n## 2                     Yorkshire Terrier  7242 Manhattan    2\n## 3                             Chihuahua  6907 Manhattan    3\n## 4                              Shih Tzu  6209 Manhattan    4\n## 5                    Labrador Retriever  5662 Manhattan    5\n## 6                               Unknown  5894    Staten    1\n## 7                              Shih Tzu  3058    Staten    2\n## 8                     Yorkshire Terrier  2987    Staten    3\n## 9                    Labrador Retriever  2061    Staten    4\n## 10                              Maltese  1588    Staten    5\n## 11                              Unknown  5071     Bronx    1\n## 12                    Yorkshire Terrier  4956     Bronx    2\n## 13                             Shih Tzu  4153     Bronx    3\n## 14                            Chihuahua  2934     Bronx    4\n## 15   American Pit Bull Terrier/Pit Bull  2334     Bronx    5\n## 16                              Unknown 11771    Queens    1\n## 17                    Yorkshire Terrier  6696    Queens    2\n## 18                             Shih Tzu  6016    Queens    3\n## 19                              Maltese  4274    Queens    4\n## 20                            Chihuahua  4168    Queens    5\n## 21                              Unknown 14236  Brooklyn    1\n## 22                    Yorkshire Terrier  8046  Brooklyn    2\n## 23                             Shih Tzu  7543  Brooklyn    3\n## 24                            Chihuahua  5520  Brooklyn    4\n## 25 American Pit Bull Mix / Pit Bull Mix  4315  Brooklyn    5\n```\n:::\n\n\n\nWe could even sort our data by the rank and Borough for easier comparisons:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\nbreeds_by_borough[order(breeds_by_borough$rank, \n                        breeds_by_borough$Borough),]\n##                                   Breed  Freq   Borough rank\n## 11                              Unknown  5071     Bronx    1\n## 21                              Unknown 14236  Brooklyn    1\n## 1                               Unknown 16728 Manhattan    1\n## 16                              Unknown 11771    Queens    1\n## 6                               Unknown  5894    Staten    1\n## 12                    Yorkshire Terrier  4956     Bronx    2\n## 22                    Yorkshire Terrier  8046  Brooklyn    2\n## 2                     Yorkshire Terrier  7242 Manhattan    2\n## 17                    Yorkshire Terrier  6696    Queens    2\n## 7                              Shih Tzu  3058    Staten    2\n## 13                             Shih Tzu  4153     Bronx    3\n## 23                             Shih Tzu  7543  Brooklyn    3\n## 3                             Chihuahua  6907 Manhattan    3\n## 18                             Shih Tzu  6016    Queens    3\n## 8                     Yorkshire Terrier  2987    Staten    3\n## 14                            Chihuahua  2934     Bronx    4\n## 24                            Chihuahua  5520  Brooklyn    4\n## 4                              Shih Tzu  6209 Manhattan    4\n## 19                              Maltese  4274    Queens    4\n## 9                    Labrador Retriever  2061    Staten    4\n## 15   American Pit Bull Terrier/Pit Bull  2334     Bronx    5\n## 25 American Pit Bull Mix / Pit Bull Mix  4315  Brooklyn    5\n## 5                    Labrador Retriever  5662 Manhattan    5\n## 20                            Chihuahua  4168    Queens    5\n## 10                              Maltese  1588    Staten    5\n```\n:::\n\n\n\n#### Python {-}\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\nbreeds_by_borough = pd.DataFrame() # Create a blank dataframe\n\nfor i in boroughs:\n  print(i)\n  # get subset of data frame corresponding to the borough\n  dogs_sub = dogs.query(\"Borough== @i\")\n  # Get top 5 breeds\n  result = top_5_breeds(dogs_sub)\n  # Convert to DataFrame and make the index another column\n  result = result.to_frame().reset_index()\n  # Rename columns\n  result.rename(columns = {'index':'BreedName','BreedName':'count'})\n  # Add Borough column\n  result[\"Borough\"] = i\n  # Add rank column\n  result[\"rank\"] = range(1, 6)\n  # Append to blank dataframe\n  breeds_by_borough = breeds_by_borough.append(result)\n## Manhattan\n##             BreedName  count\n## 0             Unknown   8298\n## 1   Yorkshire Terrier   3465\n## 2           Chihuahua   3278\n## 3            Shih Tzu   2963\n## 4  Labrador Retriever   2638\n## Staten\n##             BreedName  count\n## 0             Unknown   2683\n## 1   Yorkshire Terrier   1300\n## 2            Shih Tzu   1286\n## 3  Labrador Retriever    956\n## 4             Maltese    699\n## Bronx\n##                             BreedName  count\n## 0                             Unknown   2300\n## 1                   Yorkshire Terrier   2235\n## 2                            Shih Tzu   1899\n## 3                           Chihuahua   1455\n## 4  American Pit Bull Terrier/Pit Bull   1236\n## Queens\n##            BreedName  count\n## 0            Unknown   5465\n## 1  Yorkshire Terrier   2922\n## 2           Shih Tzu   2715\n## 3            Maltese   2013\n## 4          Chihuahua   1952\n## Brooklyn\n##                               BreedName  count\n## 0                               Unknown   6303\n## 1                     Yorkshire Terrier   3678\n## 2                              Shih Tzu   3353\n## 3                             Chihuahua   2601\n## 4  American Pit Bull Mix / Pit Bull Mix   2027\n## \n## <string>:16: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n## <string>:16: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n## <string>:16: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n## <string>:16: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n## <string>:16: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\nbreeds_by_borough.head()\n##                 index  BreedName    Borough  rank\n## 0             Unknown       8298  Manhattan     1\n## 1   Yorkshire Terrier       3465  Manhattan     2\n## 2           Chihuahua       3278  Manhattan     3\n## 3            Shih Tzu       2963  Manhattan     4\n## 4  Labrador Retriever       2638  Manhattan     5\nbreeds_by_borough.tail()\n##                                   index  BreedName   Borough  rank\n## 0                               Unknown       6303  Brooklyn     1\n## 1                     Yorkshire Terrier       3678  Brooklyn     2\n## 2                              Shih Tzu       3353  Brooklyn     3\n## 3                             Chihuahua       2601  Brooklyn     4\n## 4  American Pit Bull Mix / Pit Bull Mix       2027  Brooklyn     5\n```\n:::\n\n\n\n\nWe could even sort our data by the rank and Borough for easier comparisons:\n\n\n\n::: {.cell}\n\n```{.python .cell-code}\n\nbreeds_by_borough.sort_values(['rank', 'Borough'])\n##                                   index  BreedName    Borough  rank\n## 0                               Unknown       2300      Bronx     1\n## 0                               Unknown       6303   Brooklyn     1\n## 0                               Unknown       8298  Manhattan     1\n## 0                               Unknown       5465     Queens     1\n## 0                               Unknown       2683     Staten     1\n## 1                     Yorkshire Terrier       2235      Bronx     2\n## 1                     Yorkshire Terrier       3678   Brooklyn     2\n## 1                     Yorkshire Terrier       3465  Manhattan     2\n## 1                     Yorkshire Terrier       2922     Queens     2\n## 1                     Yorkshire Terrier       1300     Staten     2\n## 2                              Shih Tzu       1899      Bronx     3\n## 2                              Shih Tzu       3353   Brooklyn     3\n## 2                             Chihuahua       3278  Manhattan     3\n## 2                              Shih Tzu       2715     Queens     3\n## 2                              Shih Tzu       1286     Staten     3\n## 3                             Chihuahua       1455      Bronx     4\n## 3                             Chihuahua       2601   Brooklyn     4\n## 3                              Shih Tzu       2963  Manhattan     4\n## 3                               Maltese       2013     Queens     4\n## 3                    Labrador Retriever        956     Staten     4\n## 4    American Pit Bull Terrier/Pit Bull       1236      Bronx     5\n## 4  American Pit Bull Mix / Pit Bull Mix       2027   Brooklyn     5\n## 4                    Labrador Retriever       2638  Manhattan     5\n## 4                             Chihuahua       1952     Queens     5\n## 4                               Maltese        699     Staten     5\n```\n:::\n\n\n\n:::\n\n\nSoon we'll learn a much shorter set of commands to get these types of summaries, but it's important to know how a for loop connects to the concept of summarizing data by a factor (in this case, by borough).\n\n### Try it out! {- .tryitout}\n\nLook at the name, age, or gender of dogs registered in NYC and see if you can come up with a similar function and way of summarizing the data in a for-loop.\n",
    "supporting": [
      "data-programming_files/figure-pdf"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}